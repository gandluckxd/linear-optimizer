"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Altawin
"""

import fdb
import time
from modules.config import DB_CONFIG, ENABLE_LOGGING
from modules.models import Profile, Stock, MoskitkaProfile, StockRemainder, StockMaterial, GrordersMos, OptimizedMos, OptDetailMos
from modules.models import FiberglassDetail, FiberglassSheet, FiberglassLoadDataResponse
from typing import List, Dict, Any

def get_db_connection():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Firebird
    """
    try:
        con = fdb.connect(
            host=DB_CONFIG['host'],
            port=DB_CONFIG['port'],
            database=DB_CONFIG['database'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            charset=DB_CONFIG['charset']
        )
        return con
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

def get_profiles_for_order(order_id: int) -> List[Profile]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
    """
    profiles = []
    
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # SQL –∑–∞–ø—Ä–æ—Å –æ—Ç –ê—Ä—Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
        sql = """
        SELECT
            gr.ordernames as gr_ordernames,
            gr.groupdate as groupdate,
            gr.name as gr_name,
            oi.orderitemsid,
            oi.name as oi_name,
            o.orderno,
            g.marking as g_marking,
            g.goodsid,
            grd.qty * itd.qty as total_qty,
            itd.thick,
            o.orderid
        FROM grorders gr
        JOIN grordersdetail grd on grd.grorderid = gr.grorderid
        JOIN orderitems oi on oi.orderitemsid = grd.orderitemsid
        JOIN orders o on o.orderid = oi.orderid
        JOIN itemsdetail itd on itd.orderitemsid = oi.orderitemsid
        JOIN goods g on g.goodsid = itd.goodsid
        JOIN groupgoods gg on gg.grgoodsid = itd.grgoodsid
        JOIN groupgoodstypes ggt on ggt.ggtypeid = gg.ggtypeid
        WHERE gr.grorderid = ?
        AND ggt.code = 'MosNetProfile'
        AND gg.thick <> 1
        ORDER BY oi.orderitemsid
        """
        
        cur.execute(sql, (order_id,))
        rows = cur.fetchall()
        
        for row in rows:
            profile = Profile(
                id=row[7],  # goodsid
                order_id=row[10],  # o.orderid - —Ä–µ–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
                element_name=row[4] or "",  # oi_name - –≠–ª–µ–º–µ–Ω—Ç (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ orderitem)
                profile_code=row[6],  # g_marking - –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ—Ñ–∏–ª—è
                length=float(row[9]),  # thick (–¥–ª–∏–Ω–∞)
                quantity=int(row[8])  # total_qty - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            )
            profiles.append(profile)
            print(f"üîç DB: *** –û–¢–õ–ê–î–ö–ê *** –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: goodsid={row[7]}, orderid={row[10]}, length={row[9]}, qty={row[8]}")
        
        con.close()
        
        if ENABLE_LOGGING:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        raise
    
    return profiles

def get_grorder_ids_by_grorders_mos_id(grorders_mos_id: int) -> List[int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ GRORDERID –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ (GRORDERS_MOS_ID).

    –õ–æ–≥–∏–∫–∞: —Å–≤—è–∑—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ GRORDER_UF_VALUES –ø–æ userfieldid = 8 –∏ var_str = grorders_mos_id.
    """
    grorder_ids: List[int] = []
    try:
        con = get_db_connection()
        cur = con.cursor()

        sql = (
            "SELECT gruv.GRORDERID "
            "FROM GRORDER_UF_VALUES gruv "
            "WHERE gruv.USERFIELDID = 8 AND gruv.VAR_STR = ?"
        )

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ, —Ç.–∫. —Å—Ç–æ–ª–±–µ—Ü VAR_STR —Ç–µ–∫—Å—Ç–æ–≤—ã–π
        cur.execute(sql, (str(grorders_mos_id),))
        rows = cur.fetchall()

        for row in rows:
            if row and row[0] is not None:
                grorder_ids.append(int(row[0]))

        con.close()

        if ENABLE_LOGGING:
            print(
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(grorder_ids)} GRORDERID –ø–æ GRORDERS_MOS_ID={grorders_mos_id}: {grorder_ids}"
            )
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GRORDERID –ø–æ GRORDERS_MOS_ID={grorders_mos_id}: {e}")
        raise

    return grorder_ids

def get_stock_for_profile(profile_id: int) -> List[Stock]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∫–ª–∞–¥–µ
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π (–æ–±—Ä–µ–∑–∫–∏) –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥ (—Ö–ª—ã—Å—Ç—ã)
    """
    stock = []
    
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Ö–ª—ã—Å—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
        sql_warehouse = """
        SELECT 
            wh.WAREHOUSEID as stock_id,
            wh.GOODSID,
            6000 as length,
            wh.QTY - wh.RESERVEQTY as qty,
            whl.RNAME as location,
            0 as is_remainder,
            NULL as warehouseremaindersid,
            g.MARKING as profile_code
        FROM WAREHOUSE wh
        JOIN WH_LIST whl ON whl.WHLISTID = wh.WHLISTID
        JOIN GOODS g ON g.GOODSID = wh.GOODSID
        WHERE wh.GOODSID = ? 
        AND (wh.QTY - wh.RESERVEQTY) > 0
        AND whl.DELETED = 0
        AND g.DELETED = 0
        """
        
        cur.execute(sql_warehouse, (profile_id,))
        warehouse_rows = cur.fetchall()
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –æ—Å—Ç–∞—Ç–∫–∏
        sql_remainders = """
        SELECT 
            whr.WHREMAINDERID as stock_id,
            whr.GOODSID,
            whr.THICK as length,
            whr.QTY - whr.RESERVEQTY as qty,
            whl.RNAME as location,
            1 as is_remainder,
            whr.WHREMAINDERID as warehouseremaindersid,
            g.MARKING as profile_code
        FROM WAREHOUSEREMAINDER whr
        JOIN WH_LIST whl ON whl.WHLISTID = whr.WHLISTID
        JOIN GOODS g ON g.GOODSID = whr.GOODSID
        WHERE whr.GOODSID = ?
        AND (whr.QTY - whr.RESERVEQTY) > 0
        AND whl.DELETED = 0
        AND g.DELETED = 0
        """
        
        cur.execute(sql_remainders, (profile_id,))
        remainder_rows = cur.fetchall()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_rows = list(warehouse_rows) + list(remainder_rows)
        
        for row in all_rows:
            stock_item = Stock(
                id=row[0],  # stock_id
                profile_id=row[1],  # goodsid
                length=float(row[2]) if row[2] else 6000.0,  # length
                quantity=int(row[3]),  # qty
                location=row[4] or "",  # location
                is_remainder=bool(row[5]),  # is_remainder
                warehouseremaindersid=row[6]  # warehouseremaindersid
            )
            stock.append(stock_item)
        
        con.close()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–Ω–∞—á–∞–ª–∞ —Ö–ª—ã—Å—Ç—ã (is_remainder=False), –ø–æ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –¥–ª–∏–Ω–µ —É–±—ã–≤–∞—é—â–µ–π
        stock.sort(key=lambda x: (x.is_remainder, -x.length))
        
        if ENABLE_LOGGING:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(stock)} –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}")
            
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        raise
    
    return stock

def get_stock_remainders(profile_codes: List[str]) -> List[StockRemainder]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –ø—Ä–æ—Ñ–∏–ª–µ–π
    """
    stock_remainders = []
    
    if not profile_codes:
        return stock_remainders
    
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è IN —É—Å–ª–æ–≤–∏—è
        placeholders = ','.join(['?'] * len(profile_codes))
        
        sql = f"""
            select
                g.marking as profile_code,
                whm.thick as length,
                whm.qty - whm.reserveqty as quantity_pieces
            from warehouseremainder whm
            join goods g on g.goodsid = whm.goodsid
            join groupgoods gg on gg.grgoodsid = g.grgoodsid
            where g.MARKING IN ({placeholders})
            and (whm.qty - whm.reserveqty) > 0
            ORDER BY g.MARKING, whm.THICK DESC
        """
        
        cur.execute(sql, profile_codes)
        rows = cur.fetchall()
        
        for row in rows:
            remainder = StockRemainder(
                profile_code=row[0],  # profile_code
                length=float(row[1]) if row[1] else 0.0,  # length
                quantity_pieces=int(row[2])  # quantity_pieces - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–æ–∫
            )
            stock_remainders.append(remainder)
        
        con.close()
        
        if ENABLE_LOGGING:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(stock_remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞")
            
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        raise
    
    return stock_remainders

def get_stock_materials(profile_codes: List[str]) -> List[StockMaterial]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –ø—Ä–æ—Ñ–∏–ª–µ–π
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∫–ª–∞–¥—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ / —Ç–∏–ø–æ–≤–æ–π —Ä–∞–∑–º–µ—Ä (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Glass Optimizer)
    """
    stock_materials = []
    
    if not profile_codes:
        if ENABLE_LOGGING:
            print("‚ö†Ô∏è get_stock_materials: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ profile_codes")
        return stock_materials
    
    if ENABLE_LOGGING:
        print(f"üîß get_stock_materials: –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è {len(profile_codes)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {profile_codes}")
    
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è IN —É—Å–ª–æ–≤–∏—è
        placeholders = ','.join(['?'] * len(profile_codes))
        
        sql = f"""
        SELECT 
            g.MARKING as profile_code,
            gg.THICK as length,
            SUM(wh.QTY - wh.RESERVEQTY) as warehouse_qty,
            gg.THICK as typical_size,
            CASE 
                WHEN gg.THICK > 0 THEN SUM(wh.QTY - wh.RESERVEQTY) / gg.THICK
                ELSE 0
            END as quantity_pieces
        FROM WAREHOUSE wh
        JOIN WH_LIST whl ON whl.WHLISTID = wh.WHLISTID
        JOIN GOODS g ON g.GOODSID = wh.GOODSID
        JOIN GROUPGOODS gg ON gg.GRGOODSID = g.GRGOODSID
        WHERE g.MARKING IN ({placeholders})
        AND (wh.QTY - wh.RESERVEQTY) > 0
        AND whl.DELETED = 0
        AND g.DELETED = 0
        AND gg.THICK > 1
        GROUP BY g.MARKING, gg.THICK
        ORDER BY g.MARKING
        """
        
        if ENABLE_LOGGING:
            print(f"üîß get_stock_materials: –í—ã–ø–æ–ª–Ω—è—é SQL-–∑–∞–ø—Ä–æ—Å:")
            print(f"   SQL: {sql}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {profile_codes}")
        
        cur.execute(sql, profile_codes)
        rows = cur.fetchall()
        
        if ENABLE_LOGGING:
            print(f"üîß get_stock_materials: –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ –ë–î")
            for i, row in enumerate(rows):
                print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {row}")
        
        for row in rows:
            material = StockMaterial(
                profile_code=row[0],  # profile_code
                length=float(row[1]) if row[1] else 6000.0,  # length (—Ç–∏–ø–æ–≤–æ–π —Ä–∞–∑–º–µ—Ä –∏–∑ gg.THICK)
                quantity_pieces=int(row[4]) if row[4] else 0  # quantity_pieces - —Å–∫–ª–∞–¥—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ / —Ç–∏–ø–æ–≤–æ–π —Ä–∞–∑–º–µ—Ä
            )
            stock_materials.append(material)
            
            if ENABLE_LOGGING:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: {material.profile_code}, –¥–ª–∏–Ω–∞={material.length}–º–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={material.quantity_pieces}—à—Ç")
        
        con.close()
        
        if ENABLE_LOGGING:
            print(f"‚úÖ get_stock_materials: –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(stock_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞")
            if stock_materials:
                print(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º:")
                for material in stock_materials:
                    print(f"   - {material.profile_code}: {material.quantity_pieces} —Ö–ª—ã—Å—Ç–æ–≤ –ø–æ {material.length}–º–º")
            else:
                print("‚ö†Ô∏è –ú–ê–¢–ï–†–ò–ê–õ–´ –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–´! –ó–∞–ø—É—Å–∫–∞—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...")
                diagnosis = diagnose_stock_materials_issue(profile_codes)
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diagnosis}")
            
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
        raise
    
    return stock_materials

def diagnose_stock_materials_issue(profile_codes: List[str]) -> Dict[str, Any]:
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞
    """
    diagnosis = {
        "profile_codes": profile_codes,
        "goods_found": [],
        "warehouse_data": [],
        "groupgoods_data": [],
        "thick_values": [],
        "total_warehouse_records": 0,
        "issues": []
    }
    
    if not profile_codes:
        diagnosis["issues"].append("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ profile_codes")
        return diagnosis
    
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è IN —É—Å–ª–æ–≤–∏—è
        placeholders = ','.join(['?'] * len(profile_codes))
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã —Å —Ç–∞–∫–∏–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏
        goods_sql = f"""
        SELECT g.GOODSID, g.MARKING, g.DELETED, gg.GRGOODSID, gg.THICK, gg.DELETED as GG_DELETED
        FROM GOODS g 
        JOIN GROUPGOODS gg ON gg.GRGOODSID = g.GRGOODSID
        WHERE g.MARKING IN ({placeholders})
        ORDER BY g.MARKING
        """
        
        cur.execute(goods_sql, profile_codes)
        goods_rows = cur.fetchall()
        
        for row in goods_rows:
            diagnosis["goods_found"].append({
                "goodsid": row[0],
                "marking": row[1], 
                "deleted": row[2],
                "grgoodsid": row[3],
                "thick": row[4],
                "gg_deleted": row[5]
            })
            diagnosis["thick_values"].append(row[4])
        
        if not goods_rows:
            diagnosis["issues"].append(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏: {profile_codes}")
            return diagnosis
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–ª–∞–¥ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        goodsids = [str(row[0]) for row in goods_rows]
        warehouse_sql = f"""
        SELECT wh.GOODSID, wh.QTY, wh.RESERVEQTY, (wh.QTY - wh.RESERVEQTY) as available_qty,
               whl.DELETED as WHL_DELETED, g.MARKING
        FROM WAREHOUSE wh
        JOIN WH_LIST whl ON whl.WHLISTID = wh.WHLISTID  
        JOIN GOODS g ON g.GOODSID = wh.GOODSID
        WHERE wh.GOODSID IN ({','.join(['?'] * len(goodsids))})
        ORDER BY g.MARKING
        """
        
        cur.execute(warehouse_sql, goodsids)
        warehouse_rows = cur.fetchall()
        
        diagnosis["total_warehouse_records"] = len(warehouse_rows)
        
        for row in warehouse_rows:
            diagnosis["warehouse_data"].append({
                "goodsid": row[0],
                "qty": row[1],
                "reserve_qty": row[2], 
                "available_qty": row[3],
                "whl_deleted": row[4],
                "marking": row[5]
            })
        
        # 3. –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filtered_count = 0
        available_count = 0
        thick_filtered_count = 0
        
        for wh_row in warehouse_rows:
            available_qty = wh_row[3]
            whl_deleted = wh_row[4]
            goodsid = wh_row[0]
            
            # –ù–∞—Ö–æ–¥–∏–º thick –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            thick = None
            for goods_row in goods_rows:
                if goods_row[0] == goodsid:
                    thick = goods_row[4]
                    break
            
            if available_qty > 0:
                available_count += 1
                
            if whl_deleted == 0 and available_qty > 0:
                filtered_count += 1
                
            if thick is not None and thick > 1:
                thick_filtered_count += 1
        
        diagnosis["available_count"] = available_count
        diagnosis["filtered_count"] = filtered_count  
        diagnosis["thick_filtered_count"] = thick_filtered_count
        
        # 4. –í—ã—è–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if not warehouse_rows:
            diagnosis["issues"].append("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥–µ")
        elif available_count == 0:
            diagnosis["issues"].append("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏")
        elif filtered_count == 0:
            diagnosis["issues"].append("–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã —É—Å–ª–æ–≤–∏—è–º–∏ (whl.DELETED=0 –∏–ª–∏ qty<=0)")
        elif thick_filtered_count == 0:
            diagnosis["issues"].append("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã —É—Å–ª–æ–≤–∏–µ–º gg.THICK > 1")
            
        con.close()
        
        if ENABLE_LOGGING:
            print(f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
            print(f"   –ê—Ä—Ç–∏–∫—É–ª—ã: {profile_codes}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(goods_rows)}")
            print(f"   –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ: {len(warehouse_rows)}")
            print(f"   –° –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {available_count}")
            print(f"   –ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é: {filtered_count}")
            print(f"   –° thick > 1: {thick_filtered_count}")
            print(f"   –ó–Ω–∞—á–µ–Ω–∏—è thick: {diagnosis['thick_values']}")
            if diagnosis["issues"]:
                print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {diagnosis['issues']}")
                
    except Exception as e:
        diagnosis["issues"].append(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    return diagnosis


def save_optimization_result(optimization_result, save_to_order: bool, create_cutting_list: bool):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin
    """
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.begin()
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø–∏–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ LINEAROPTDATA –∏ LINEAROPTDETAIL
        for plan in optimization_result.cut_plans:
            
            # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ LINEAROPTDATA (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–ª—ã—Å—Ç–µ)
            insert_optdata_sql = """
            INSERT INTO LINEAROPTDATA (
                SHIFTTASKSID, GOODSID, QTY, LONGPROF, CUTWIDTH, 
                MINREST, OSTAT, SUMPROF, RESTPERCENT, TRASHPERCENT, MAP
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Ä–∞—Å–ø–∏–ª–∞ –¥–ª—è OPTIMIZED.MAP: —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º, —á–µ—Ä–µ–∑ ';'
            pieces = []
            for cut in plan.cuts:
                length_val = float(cut['length']) if cut.get('length') else 0.0
                qty_val = int(cut['quantity']) if cut.get('quantity') else 0
                for _ in range(max(0, qty_val)):
                    pieces.append(f"{length_val:.1f}")
            cut_map = ";".join(pieces)
            
            cur.execute(insert_optdata_sql, (
                optimization_result.order_id,  # SHIFTTASKSID (ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è)
                plan.stock_id,  # GOODSID (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
                1,  # QTY (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª—ã—Å—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞)
                plan.stock_length,  # LONGPROF (–¥–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞)
                3.0,  # CUTWIDTH (—à–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–∞)
                100.0,  # MINREST (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫)
                plan.remainder or plan.waste,  # OSTAT (–æ—Å—Ç–∞—Ç–æ–∫)
                sum(cut['length'] * cut['quantity'] for cut in plan.cuts),  # SUMPROF (—Å—É–º–º–∞ –æ—Ç–ø–∏–ª–µ–Ω–Ω—ã—Ö –∫—É—Å–∫–æ–≤)
                (plan.remainder or 0) / plan.stock_length * 100,  # RESTPERCENT
                plan.waste_percent,  # TRASHPERCENT
                cut_map  # MAP (–∫–∞—Ä—Ç–∞ —Ä–∞—Å–ø–∏–ª–∞)
            ))
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
            cur.execute("SELECT GEN_ID(GEN_LINEAROPTDATA_ID, 0) FROM RDB$DATABASE")
            linearoptdata_id = cur.fetchone()[0]
            
            # 2. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ LINEAROPTDETAIL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞
            for cut in plan.cuts:
                insert_detail_sql = """
                INSERT INTO LINEAROPTDETAIL (
                    LINEAROPTDATAID, ITEMLONG, QTY, NUM, SUBNUM, LONG_AL
                ) VALUES (?, ?, ?, ?, ?, ?)
                """
                
                cur.execute(insert_detail_sql, (
                    linearoptdata_id,  # LINEAROPTDATAID
                    cut['length'],  # ITEMLONG (–¥–ª–∏–Ω–∞ –∫—É—Å–∫–∞)
                    cut['quantity'],  # QTY (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤)
                    1,  # NUM (–Ω–æ–º–µ—Ä —Ö–ª—ã—Å—Ç–∞)
                    1,  # SUBNUM (–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Ö–ª—ã—Å—Ç–µ)
                    cut['length'] + 3.0  # LONG_AL (–¥–ª–∏–Ω–∞ —Å –ø–∏–ª–æ–π)
                ))
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        con.close()
        
        if ENABLE_LOGGING:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(optimization_result.cut_plans)} –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞")
        
        return True
        
    except Exception as e:
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            con.rollback()
        except Exception:
            pass
        
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def get_moskitka_profiles(grorder_ids: List[int]) -> List[MoskitkaProfile]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª—è—Ö –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è
    
    Args:
        grorder_ids: –°–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø –∑–∞–∫–∞–∑–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    profiles = []
    
    if not grorder_ids:
        return profiles
    
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è IN —É—Å–ª–æ–≤–∏—è
        placeholders = ','.join(['?'] * len(grorder_ids))
        
        sql = f"""
        SELECT 
            grd.GRORDERID,
            grd.ORDERITEMSID,
            oi.NAME as ORDER_ITEM_NAME,
            grd.QTY as GRORDER_QTY,
            oi.QTY as ORDER_QTY,
            oi.WIDTH as ORDER_WIDTH,
            oi.HEIGHT as ORDER_HEIGHT,
            itd.ITEMSDETAILID,
            itd.MODELNO,
            itd.PARTNUM,
            itd.WIDTH as DETAIL_WIDTH,
            itd.HEIGHT as DETAIL_HEIGHT,
            itd.THICK as DETAIL_LENGTH,
            itd.QTY as DETAIL_QTY,
            itd.IZDPART,
            itd.PARTSIDE,
            gg.NAME as GOODS_GROUP_NAME,
            gg.MARKING as GROUP_MARKING,
            g.MARKING as GOODS_MARKING,
            p.NAME as PROFIL_NAME,
            pp.PARTNAME as PART_TYPE,
            p.LENGTH_PROF,
            p.WIDTH_PROF,
            p.THICK_PROF,
            (itd.THICK * itd.QTY * grd.QTY) as TOTAL_LENGTH_NEEDED
        FROM GRORDERSDETAIL grd
        JOIN ORDERITEMS oi ON grd.ORDERITEMSID = oi.ORDERITEMSID
        JOIN ITEMSDETAIL itd ON oi.ORDERITEMSID = itd.ORDERITEMSID
        JOIN GROUPGOODS gg ON itd.GRGOODSID = gg.GRGOODSID
        LEFT JOIN GOODS g ON itd.GOODSID = g.GOODSID
        LEFT JOIN R_PROFILS p ON g.MARKING = p.MARKING AND p.RSYSTEMID = 27
        LEFT JOIN R_PROFPARTS pp ON p.PROFPARTID = pp.PARTID
        WHERE grd.GRORDERID IN ({placeholders})
          AND gg.DELETED = 0
          AND (g.DELETED = 0 OR g.DELETED IS NULL)
          AND (p.DELETED = 0 OR p.DELETED IS NULL)
          AND p.PROFILID IS NOT NULL
        ORDER BY grd.GRORDERID, grd.ORDERITEMSID, itd.ITEMSDETAILID
        """
        
        cur.execute(sql, grorder_ids)
        rows = cur.fetchall()
        
        for row in rows:
            profile = MoskitkaProfile(
                grorder_id=row[0],
                order_item_id=row[1],
                order_item_name=row[2] or "",
                grorder_qty=row[3] or 0,
                order_qty=row[4] or 0,
                order_width=row[5],
                order_height=row[6],
                item_detail_id=row[7],
                model_no=row[8] or 0,
                part_num=row[9],
                detail_width=row[10],
                detail_height=row[11],
                detail_length=row[12],
                detail_qty=row[13],
                izd_part=row[14],
                part_side=row[15],
                goods_group_name=row[16],
                group_marking=row[17],
                goods_marking=row[18],
                profil_name=row[19],
                part_type=row[20],
                length_prof=row[21],
                width_prof=row[22],
                thick_prof=row[23],
                total_length_needed=row[24]
            )
            profiles.append(profile)
        
        con.close()
        
        if ENABLE_LOGGING:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–∫–∞–∑–æ–≤: {grorder_ids}")
        
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫: {e}")
        raise
    
    return profiles

def enrich_optdetail_mos_fields(
    *,
    optimized_mos_id: int,
    orderid: int,
    itemlong: float | None = None,
    itemsdetailid: int | None = None,
    ug1: float | None = None,
    ug2: float | None = None,
    izdpart: str | None = None,
    partside: str | None = None,
    modelno: int | None = None,
    modelheight: int | None = None,
    modelwidth: int | None = None,
    flugelopentype: int | None = None,
    flugelcount: int | None = None,
    ishandle: int | None = None,
    handlepos: float | None = None,
    handleposfalts: float | None = None,
    flugelopentag: str | None = None,
) -> Dict[str, Any]:
    """
    –û–±–æ–≥–∞—Ç–∏—Ç—å –ø–æ–ª—è OPTDETAIL_MOS –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º orderid –∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏.
    
    –í–ê–ñ–ù–û: –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç orderid –ø–æ itemsdetailid –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω,
    –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π orderid.
    """
    try:
        if ENABLE_LOGGING:
            print(f"üîß DB: *** –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø *** –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–æ–ª–µ–π OPTDETAIL_MOS –¥–ª—è optimized_mos_id={optimized_mos_id}, orderid={orderid}")
        
        con = get_db_connection()
        cur = con.cursor()

        # –£–∑–Ω–∞–µ–º GOODSID –ø–æ —Ç–µ–∫—É—â–µ–º—É OPTIMIZED_MOS
        goods_id_for_bar = None
        grorders_mos_id = None
        try:
            cur.execute(
                "SELECT GOODSID, GRORDER_MOS_ID FROM OPTIMIZED_MOS WHERE OPTIMIZED_MOS_ID = ?",
                (optimized_mos_id,),
            )
            row_goods = cur.fetchone()
            goods_id_for_bar = int(row_goods[0]) if row_goods and row_goods[0] is not None else None
            grorders_mos_id = int(row_goods[1]) if row_goods and row_goods[1] is not None else None
            
            if ENABLE_LOGGING:
                print(f"üîß DB: –ù–∞–π–¥–µ–Ω GOODSID={goods_id_for_bar}, GRORDER_MOS_ID={grorders_mos_id}")
                
        except Exception as e:
            if ENABLE_LOGGING:
                print(f"‚ö†Ô∏è DB: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GOODSID –¥–ª—è optimized_mos_id={optimized_mos_id}: {e}")
            goods_id_for_bar = None
            grorders_mos_id = None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π orderid
        final_orderid = orderid  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π
        
        # 1) –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º ITEMSDETAIL –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø–æ–ª–µ–π
        try:
            if itemsdetailid is None and orderid and goods_id_for_bar:
                target_length = float(itemlong or 0)
                if ENABLE_LOGGING:
                    print(f"üîß DB: *** –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê *** –ü–æ–∏—Å–∫ ITEMSDETAIL –ø–æ ORDERID={orderid}, GOODSID={goods_id_for_bar}, –¥–ª–∏–Ω–∞={target_length}")
                
                # –ò—â–µ–º ITEMSDETAIL –ø–æ ORDERID –∏ GOODSID
                cur.execute(
                    (
                        "SELECT FIRST 1 itd.ITEMSDETAILID, itd.ANG1, itd.ANG2, itd.IZDPART, itd.PARTSIDE, "
                        "itd.MODELNO, oi.WIDTH AS O_WIDTH, oi.HEIGHT AS O_HEIGHT, itd.WIDTH AS D_WIDTH, itd.HEIGHT AS D_HEIGHT, itd.THICK "
                        "FROM ITEMSDETAIL itd "
                        "JOIN ORDERITEMS oi ON oi.ORDERITEMSID = itd.ORDERITEMSID "
                        "WHERE oi.ORDERID = ? AND itd.GOODSID = ? "
                        "ORDER BY ABS(COALESCE(itd.THICK, 0) - ?) ASC, itd.ITEMSDETAILID DESC"
                    ),
                    (int(orderid), goods_id_for_bar, target_length),
                )
                cand = cur.fetchone()
                if cand:
                    itemsdetailid = int(cand[0])
                    if ug1 is None:
                        ug1 = float(cand[1]) if cand[1] is not None else None
                    if ug2 is None:
                        ug2 = float(cand[2]) if cand[2] is not None else None
                    # –ü–æ–º–µ–Ω—è–ª–∏ –º–µ—Å—Ç–∞–º–∏: izdpart <- PARTSIDE, partside <- IZDPART
                    if (izdpart is None or (isinstance(izdpart, str) and izdpart.strip() == "")) and (cand[4] is not None and str(cand[4]).strip() != ""):
                        izdpart = cand[4]
                    if (partside is None or (isinstance(partside, str) and partside.strip() == "")) and (cand[3] is not None and str(cand[3]).strip() != ""):
                        partside = cand[3]
                    if modelno is None:
                        modelno = int(cand[5]) if cand[5] is not None else None
                    # HEIGHT/WIDTH: —Å–ø–µ—Ä–≤–∞ –∏–∑ ORDERITEMS, –∑–∞—Ç–µ–º –∏–∑ ITEMSDETAIL
                    if modelwidth is None:
                        modelwidth = int(cand[6]) if cand[6] is not None else (int(cand[8]) if cand[8] is not None else None)
                    if modelheight is None:
                        modelheight = int(cand[7]) if cand[7] is not None else (int(cand[9]) if cand[9] is not None else None)
                    
                    if ENABLE_LOGGING:
                        print(f"‚úÖ DB: –ù–∞–π–¥–µ–Ω ITEMSDETAIL –ø–æ ORDERID –∏ GOODSID: id={itemsdetailid}")

                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ ORDERID –∏ –¥–ª–∏–Ω–µ
                if itemsdetailid is None and itemlong is not None:
                    if ENABLE_LOGGING:
                        print(f"üîß DB: –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ ITEMSDETAIL —Ç–æ–ª—å–∫–æ –ø–æ ORDERID={orderid} –∏ –¥–ª–∏–Ω–µ={itemlong}")
                    
                    cur.execute(
                        (
                            "SELECT FIRST 1 itd.ITEMSDETAILID FROM ITEMSDETAIL itd "
                            "JOIN ORDERITEMS oi ON oi.ORDERITEMSID = itd.ORDERITEMSID "
                            "WHERE oi.ORDERID = ? "
                            "ORDER BY ABS(COALESCE(itd.THICK, 0) - ?) ASC, itd.ITEMSDETAILID DESC"
                        ),
                        (int(orderid), float(itemlong)),
                    )
                    cand_simple = cur.fetchone()
                    if cand_simple:
                        itemsdetailid = int(cand_simple[0])
                        if ENABLE_LOGGING:
                            print(f"‚úÖ DB: –ù–∞–π–¥–µ–Ω ITEMSDETAIL —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º: id={itemsdetailid}")

        except Exception as e:
            if ENABLE_LOGGING:
                print(f"‚ö†Ô∏è DB: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ITEMSDETAIL: {e}")

        # 2) –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π orderid –ø–æ itemsdetailid
        if itemsdetailid:
            correct_orderid = get_orderid_by_itemsdetailid(itemsdetailid)
            if correct_orderid:
                final_orderid = correct_orderid
                if ENABLE_LOGGING:
                    print(f"‚úÖ DB: *** –ò–°–ü–†–ê–í–õ–ï–ù–û *** –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π orderid –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ itemsdetailid={itemsdetailid}: {final_orderid}")
            else:
                if ENABLE_LOGGING:
                    print(f"‚ö†Ô∏è DB: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å orderid –ø–æ itemsdetailid={itemsdetailid}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π: {final_orderid}")
        else:
            if ENABLE_LOGGING:
                print(f"‚ö†Ô∏è DB: itemsdetailid –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π orderid: {final_orderid}")

        # 2) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ITEMSDETAIL, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if itemsdetailid is None:
            if ENABLE_LOGGING:
                print(f"üîß DB: ITEMSDETAIL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ goods_id_for_bar
            if goods_id_for_bar:
                try:
                    cur.execute(
                        "SELECT FIRST 1 g.marking, gg.thick FROM goods g JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid WHERE g.goodsid = ?",
                        (goods_id_for_bar,)
                    )
                    profile_info = cur.fetchone()
                    if profile_info:
                        marking = profile_info[0]
                        thick = profile_info[1]
                        if ENABLE_LOGGING:
                            print(f"üîß DB: –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: marking={marking}, thick={thick}")
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
                        if modelwidth is None:
                            modelwidth = int(thick) if thick else None
                        if modelheight is None:
                            modelheight = int(thick) if thick else None
                except Exception as e:
                    if ENABLE_LOGGING:
                        print(f"‚ö†Ô∏è DB: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ: {e}")

        con.close()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º orderid
        result = {
            "orderid": final_orderid,  # *** –ò–°–ü–†–ê–í–õ–ï–ù–û *** –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π orderid
            "itemsdetailid": itemsdetailid,
            "ug1": ug1,
            "ug2": ug2,
            "izdpart": izdpart,
            "partside": partside,
            "modelno": modelno,
            "modelheight": modelheight,
            "modelwidth": modelwidth,
            "flugelopentype": flugelopentype,
            "flugelcount": flugelcount,
            "ishandle": ishandle,
            "handlepos": handlepos,
            "handleposfalts": handleposfalts,
            "flugelopentag": flugelopentag,
        }
        
        if ENABLE_LOGGING:
            print(f"‚úÖ DB: *** –ò–°–ü–†–ê–í–õ–ï–ù–û *** –û–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: orderid={final_orderid}, itemsdetailid={itemsdetailid}, modelwidth={modelwidth}, modelheight={modelheight}")
        
        return result

    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå DB: –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø–æ–ª–µ–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "orderid": orderid,  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π orderid
            "itemsdetailid": itemsdetailid,
            "ug1": ug1,
            "ug2": ug2,
            "izdpart": izdpart,
            "partside": partside,
            "modelno": modelno,
            "modelheight": modelheight,
            "modelwidth": modelwidth,
            "flugelopentype": flugelopentype,
            "flugelcount": flugelcount,
            "ishandle": ishandle,
            "handlepos": handlepos,
            "handleposfalts": handleposfalts,
            "flugelopentag": flugelopentag,
        }

def test_db_connection():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        con = get_db_connection()
        cur = con.cursor()
        cur.execute("SELECT 1 FROM RDB$DATABASE")
        result = cur.fetchone()
        con.close()
        return result is not None
    except Exception:
        return False 


def insert_grorders_mos(name: str) -> GrordersMos:
    """
    –í—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É GRORDERS_MOS –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä GEN_GRORDERS_MOS_ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ ID
    """
    try:
        con = get_db_connection()
        cur = con.cursor()

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.begin()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π ID –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        cur.execute("SELECT GEN_ID(GEN_GRORDERS_MOS_ID, 1) FROM RDB$DATABASE")
        new_id_row = cur.fetchone()
        new_id = int(new_id_row[0]) if new_id_row and new_id_row[0] is not None else None

        # –ü—Ä–æ—Å—Ç–æ–π INSERT –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        insert_sql = """
        INSERT INTO GRORDERS_MOS (ID, NAME)
        VALUES (?, ?)
        """
        cur.execute(insert_sql, (new_id, name))

        # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.commit()
        con.close()

        return GrordersMos(id=new_id, name=name)
    except Exception as e:
        try:
            con.rollback()
        except Exception:
            pass
        if ENABLE_LOGGING:
            print(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ GRORDERS_MOS: {e}")
        raise


def insert_optimized_mos(
    *,
    grorder_mos_id: int,
    goodsid: int,
    qty: int,
    isbar: int,
    longprof: float | None = None,
    cutwidth: int | None = None,
    border: int | None = None,
    minrest: int | None = None,
    mintrash: int | None = None,
    map: str | None = None,
    ostat: float | None = None,
    sumprof: float | None = None,
    restpercent: float | None = None,
    trashpercent: float | None = None,
    beginindent: int | None = None,
    endindent: int | None = None,
    sumtrash: float | None = None,
) -> OptimizedMos:
    """
    –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ OPTIMIZED_MOS. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä GEN_OPTIMIZED_MOS_ID –∏ —è–≤–Ω—ã–π INSERT –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: GRORDER_MOS_ID, GOODSID, QTY, ISBAR
    """
    try:
        con = get_db_connection()
        cur = con.cursor()

        con.begin()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π ID
        cur.execute("SELECT GEN_ID(GEN_OPTIMIZED_MOS_ID, 1) FROM RDB$DATABASE")
        new_id_row = cur.fetchone()
        new_id = int(new_id_row[0]) if new_id_row and new_id_row[0] is not None else None

        insert_sql = (
            "INSERT INTO OPTIMIZED_MOS ("
            "OPTIMIZED_MOS_ID, GRORDER_MOS_ID, GOODSID, QTY, LONGPROF, CUTWIDTH, BORDER, MINREST, MINTRASH, MAP, ISFORPAIR, OSTAT, SUMPROF, RESTPERCENT, TRASHPERCENT, BEGININDENT, ENDINDENT, SUMTRASH, ISBAR"
            ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
        )

        cur.execute(
            insert_sql,
            (
                new_id,
                grorder_mos_id,
                goodsid,
                qty,
                longprof,
                cutwidth,
                border,
                minrest,
                mintrash,
                map,
                0,  # ISFORPAIR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–æ–µ
                ostat,
                sumprof,
                restpercent,
                trashpercent,
                beginindent,
                endindent,
                sumtrash,
                isbar,
            ),
        )

        con.commit()
        con.close()

        return OptimizedMos(
            id=new_id,
            grorder_mos_id=grorder_mos_id,
            goodsid=goodsid,
            qty=qty,
            longprof=longprof,
            cutwidth=cutwidth,
            border=border,
            minrest=minrest,
            mintrash=mintrash,
            map=map,
            isbar=isbar,
            ostat=ostat,
            sumprof=sumprof,
            restpercent=restpercent,
            trashpercent=trashpercent,
            beginindent=beginindent,
            endindent=endindent,
            sumtrash=sumtrash,
            warehouseremaindersid=None,  # –≠—Ç–æ –ø–æ–ª–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
        )
    except Exception as e:
        try:
            con.rollback()
        except Exception:
            pass
        if ENABLE_LOGGING:
            print(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ OPTIMIZED_MOS: {e}")
        raise


def insert_optdetail_mos(
    *,
    optimized_mos_id: int,
    orderid: int,
    qty: int,
    itemsdetailid: int | None = None,
    itemlong: float | None = None,
    ug1: float | None = None,
    ug2: float | None = None,
    num: int | None = None,
    subnum: int | None = None,
    long_al: float | None = None,
    izdpart: str | None = None,
    partside: str | None = None,
    modelno: int | None = None,
    modelheight: int | None = None,
    modelwidth: int | None = None,
    flugelopentype: int | None = None,
    flugelcount: int | None = None,
    ishandle: int | None = None,
    handlepos: float | None = None,
    handleposfalts: float | None = None,
    flugelopentag: str | None = None,
) -> OptDetailMos:
    """
    –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ OPTDETAIL_MOS. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä GEN_OPTDETAIL_MOS_ID –∏ –ø—Ä–æ—Å—Ç–æ–π INSERT.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: OPTIMIZED_MOS_ID, ORDERID, QTY
    
    –í–ê–ñ–ù–û: orderid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ORDERID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ORDERS,
    –∞ –Ω–µ GRORDERID. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π orderid –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    print(f"üîç DB FUNCTION: *** –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø *** insert_optdetail_mos –≤—ã–∑–≤–∞–Ω–∞ —Å orderid={orderid}")
    try:
        con = get_db_connection()
        cur = con.cursor()

        con.begin()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π ID
        cur.execute("SELECT GEN_ID(GEN_OPTDETAIL_MOS_ID, 1) FROM RDB$DATABASE")
        new_id_row = cur.fetchone()
        new_id = int(new_id_row[0]) if new_id_row and new_id_row[0] is not None else None

        insert_sql = (
            "INSERT INTO OPTDETAIL_MOS ("
            "OPTDETAIL_MOS_ID, OPTIMIZED_MOS_ID, ORDERID, ITEMSDETAILID, ITEMLONG, QTY, UG1, UG2, NUM, SUBNUM, LONG_AL, IZDPART, PARTSIDE, MODELNO, MODELHEIGHT, MODELWIDTH, FLUGELOPENTYPE, FLUGELCOUNT, ISHANDLE, HANDLEPOS, HANDLEPOSFALTS, FLUGELOPENTAG"
            ") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
        )

        cur.execute(
            insert_sql,
            (
                new_id,
                optimized_mos_id,
                orderid,
                itemsdetailid,
                itemlong,
                qty,
                ug1,
                ug2,
                num,
                subnum,
                long_al,
                izdpart,
                partside,
                modelno,
                modelheight,
                modelwidth,
                flugelopentype,
                flugelcount,
                ishandle,
                handlepos,
                handleposfalts,
                flugelopentag,
            ),
        )

        con.commit()
        con.close()

        return OptDetailMos(
            id=new_id,
            optimized_mos_id=optimized_mos_id,
            orderid=orderid,
            itemsdetailid=itemsdetailid,
            itemlong=itemlong,
            qty=qty,
            ug1=ug1,
            ug2=ug2,
            num=num,
            subnum=subnum,
            long_al=long_al,
            izdpart=izdpart,
            partside=partside,
            modelno=modelno,
            modelheight=modelheight,
            modelwidth=modelwidth,
            flugelopentype=flugelopentype,
            flugelcount=flugelcount,
            ishandle=ishandle,
            handlepos=handlepos,
            handleposfalts=handleposfalts,
            flugelopentag=flugelopentag,
        )
    except Exception as e:
        try:
            con.rollback()
        except Exception:
            pass
        if ENABLE_LOGGING:
            print(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ OPTDETAIL_MOS: {e}")
        raise


def delete_grorders_mos(grorders_mos_id: int) -> bool:
    """
    –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ GRORDERS_MOS –ø–æ ID. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.
    """
    try:
        con = get_db_connection()
        cur = con.cursor()

        con.begin()
        cur.execute("DELETE FROM GRORDERS_MOS WHERE ID = ?", (grorders_mos_id,))
        affected = cur.rowcount if hasattr(cur, "rowcount") else None
        con.commit()
        con.close()

        return bool(affected) if affected is not None else True
    except Exception as e:
        try:
            con.rollback()
        except Exception:
            pass
        if ENABLE_LOGGING:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ GRORDERS_MOS: {e}")
        raise


def delete_optimized_mos_by_grorders_mos_id(grorders_mos_id: int) -> bool:
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ OPTIMIZED_MOS –ø–æ GRORDER_MOS_ID.
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ OPTDETAIL_MOS, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.
    """
    try:
        con = get_db_connection()
        cur = con.cursor()

        con.begin()

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –¥–µ—Ç–∞–ª–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å optimized_mos –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ grorders_mos_id
        cur.execute(
            """
            DELETE FROM OPTDETAIL_MOS
            WHERE OPTIMIZED_MOS_ID IN (
                SELECT OPTIMIZED_MOS_ID FROM OPTIMIZED_MOS WHERE GRORDER_MOS_ID = ?
            )
            """,
            (grorders_mos_id,),
        )

        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ optimized_mos
        cur.execute(
            "DELETE FROM OPTIMIZED_MOS WHERE GRORDER_MOS_ID = ?",
            (grorders_mos_id,),
        )
        affected = cur.rowcount if hasattr(cur, "rowcount") else None

        con.commit()
        con.close()

        return bool(affected) if affected is not None else True
    except Exception as e:
        try:
            con.rollback()
        except Exception:
            pass
        if ENABLE_LOGGING:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ OPTIMIZED_MOS –ø–æ GRORDER_MOS_ID={grorders_mos_id}: {e}")
        raise


def adjust_materials_for_moskitka_optimization(grorders_mos_id: int, used_materials: list = None, business_remainders: list = None) -> dict:
    """
    –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Altawin –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫.
    
    Args:
        grorders_mos_id: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
        used_materials: –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ [{'goodsid': int, 'length': float, 'quantity': int, 'is_remainder': bool}]
        business_remainders: –°–ø–∏—Å–æ–∫ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ [{'goodsid': int, 'length': float, 'quantity': int}]
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    operation_start_time = time.time()
    
    try:
        print(f"üîß DB: –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ grorders_mos_id={grorders_mos_id}")
        print(f"üîß DB: –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"   used_materials: {len(used_materials) if used_materials else 0} –∑–∞–ø–∏—Å–µ–π")
        print(f"   business_remainders: {len(business_remainders) if business_remainders else 0} –∑–∞–ø–∏—Å–µ–π")
        
        if used_materials:
            print(f"üîß DB: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è used_materials:")
            for i, material in enumerate(used_materials):
                print(f"   [{i}] goodsid={material.get('goodsid')}, length={material.get('length')}, quantity={material.get('quantity')}, is_remainder={material.get('is_remainder')}")
        
        if business_remainders:
            print(f"üîß DB: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è business_remainders:")
            for i, remainder in enumerate(business_remainders):
                print(f"   [{i}] goodsid={remainder.get('goodsid')}, length={remainder.get('length')}, quantity={remainder.get('quantity')}")
        
        con = get_db_connection()
        cur = con.cursor()
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ grorderid –ø–æ grorders_mos_id
        grorder_ids = get_grorder_ids_by_grorders_mos_id(grorders_mos_id)
        if not grorder_ids:
            return {
                "success": False,
                "error": f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è grorders_mos_id={grorders_mos_id}"
            }
        
        print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ {len(grorder_ids)} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {grorder_ids}")
        
        # 2. –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–∏–ø–∞ "–ø—Ä–æ—Ñ–∏–ª–∏ –º–æ—Å–∫–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–∏" –∏–∑ –≤—Å–µ—Ö —Å–ø–∏—Å–∞–Ω–∏–π
        print(f"üîß DB: –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–∏–ø–∞ '–ø—Ä–æ—Ñ–∏–ª–∏ –º–æ—Å–∫–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–∏' –∏–∑ —Å–ø–∏—Å–∞–Ω–∏–π...")
        deleted_outlay_count = 0
        
        for grorder_id in grorder_ids:
            # –ò—â–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ grorder
            outlay_sql = """
            SELECT outlayid FROM outlay 
            WHERE grorderid = ? AND deleted = 0
            ORDER BY outlayid
            """
            cur.execute(outlay_sql, (grorder_id,))
            outlay_result = cur.fetchone()
            
            if outlay_result:
                outlay_id = outlay_result[0]
                print(f"üîß DB: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ outlayid={outlay_id} –¥–ª—è grorderid={grorder_id}")
                
                # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ (ggtypeid = 48)
                delete_outlay_detail_sql = """
                DELETE FROM outlaydetail WHERE outlaydetailid IN (
                    SELECT ot.outlaydetailid
                    FROM outlaydetail ot
                    JOIN goods g ON g.goodsid = ot.goodsid
                    JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                    WHERE ot.outlayid = ? AND gg.ggtypeid = 48
                )
                """
                cur.execute(delete_outlay_detail_sql, (outlay_id,))
                deleted_details = cur.rowcount
                deleted_outlay_count += deleted_details
                print(f"üîß DB: –£–¥–∞–ª–µ–Ω–æ {deleted_details} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫")
                
                # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
                delete_outlay_remainder_sql = """
                DELETE FROM outlayremainder WHERE outlayremainderid IN (
                    SELECT otr.outlayremainderid
                    FROM outlayremainder otr
                    JOIN goods g ON g.goodsid = otr.goodsid
                    JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                    WHERE otr.outlayid = ? AND gg.ggtypeid = 48
                )
                """
                cur.execute(delete_outlay_remainder_sql, (outlay_id,))
                deleted_remainders = cur.rowcount
                deleted_outlay_count += deleted_remainders
                print(f"üîß DB: –£–¥–∞–ª–µ–Ω–æ {deleted_remainders} –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∞–Ω–∏—è")
        
        print(f"üîß DB: –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {deleted_outlay_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Å–ø–∏—Å–∞–Ω–∏–π")
        
        # –ö–æ–º–º–∏—Ç–∏–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∞–Ω–∏–π
        con.commit()
        print(f"üîß DB: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∞–Ω–∏–π")
        
        # 3. –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç–∏–ø–∞ "–ø—Ä–æ—Ñ–∏–ª–∏ –º–æ—Å–∫–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–∏" –∏–∑ –≤—Å–µ—Ö –ø—Ä–∏—Ö–æ–¥–æ–≤
        print(f"üîß DB: –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–∏–ø–∞ '–ø—Ä–æ—Ñ–∏–ª–∏ –º–æ—Å–∫–∏—Ç–Ω–æ–π —Å–µ—Ç–∫–∏' –∏–∑ –ø—Ä–∏—Ö–æ–¥–æ–≤...")
        deleted_supply_count = 0
        
        for grorder_id in grorder_ids:
            # –ò—â–µ–º –ø—Ä–∏—Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ grorder
            supply_sql = """
            SELECT supplyid FROM supply 
            WHERE grorderid = ? AND supplytype = 1 AND deleted = 0
            ORDER BY supplyid
            """
            cur.execute(supply_sql, (grorder_id,))
            supply_result = cur.fetchone()
            
            if supply_result:
                supply_id = supply_result[0]
                print(f"üîß DB: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Ö–æ–¥ supplyid={supply_id} –¥–ª—è grorderid={grorder_id}")
                
                # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Ö–æ–¥–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
                delete_supply_detail_sql = """
                DELETE FROM supplydetail WHERE supplydetailid IN (
                    SELECT sd.supplydetailid
                    FROM supplydetail sd
                    JOIN goods g ON g.goodsid = sd.goodsid
                    JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                    WHERE sd.supplyid = ? AND gg.ggtypeid = 48
                )
                """
                cur.execute(delete_supply_detail_sql, (supply_id,))
                deleted_details = cur.rowcount
                deleted_supply_count += deleted_details
                print(f"üîß DB: –£–¥–∞–ª–µ–Ω–æ {deleted_details} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫")
                
                # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ –ø—Ä–∏—Ö–æ–¥–∞ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
                delete_supply_remainder_sql = """
                DELETE FROM supplyremainder WHERE supplyremainderid IN (
                    SELECT sr.supplyremainderid
                    FROM supplyremainder sr
                    JOIN goods g ON g.goodsid = sr.goodsid
                    JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                    WHERE sr.supplyid = ? AND gg.ggtypeid = 48
                )
                """
                cur.execute(delete_supply_remainder_sql, (supply_id,))
                deleted_remainders = cur.rowcount
                deleted_supply_count += deleted_remainders
                print(f"üîß DB: –£–¥–∞–ª–µ–Ω–æ {deleted_remainders} –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ –∏–∑ –ø—Ä–∏—Ö–æ–¥–∞")
        
        print(f"üîß DB: –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {deleted_supply_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ø—Ä–∏—Ö–æ–¥–æ–≤")
        
        # –ö–æ–º–º–∏—Ç–∏–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏—Ö–æ–¥–æ–≤
        con.commit()
        print(f"üîß DB: –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏—Ö–æ–¥–æ–≤")
        
        # 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö grorder
        print(f"üîß DB: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        grorder_mos_sql = "SELECT name FROM grorders_mos WHERE id = ?"
        cur.execute(grorder_mos_sql, (grorders_mos_id,))
        grorder_mos_result = cur.fetchone()
        grorder_mos_name = grorder_mos_result[0] if grorder_mos_result else f"–ú–æ—Å–∫–∏—Ç–Ω—ã–µ —Å–µ—Ç–∫–∏ {grorders_mos_id}"
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö grorder
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π GUID
        guid_sql = "SELECT guidhi, guidlo, guid FROM new_guid"
        cur.execute(guid_sql)
        guid_result = cur.fetchone()
        guidhi, guidlo, guid = guid_result
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        waybill = f"{grorders_mos_id}/{grorder_mos_name}"
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ
        create_outlay_sql = """
        INSERT INTO OUTLAY (
            OUTLAYID, WAYBILL, OUTLAYDATE, CUSTOMERID, OUTLAYTYPE, 
            GRORDERID, PARENTID, ISAPPROVED, RCOMMENT, WHLISTID, 
            RECCOLOR, RECFLAG, GUIDHI, GUIDLO, OWNERID, 
            DELETED, DATECREATED, DATEMODIFIED, DATEDELETED, JOBTASKID, GUID
        ) VALUES (
            gen_id(gen_outlay, 1), ?, CURRENT_DATE, NULL, 1, 
            NULL, NULL, 0, ?, 0, 
            NULL, NULL, ?, ?, 0, 
            0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, ?
        )
        """
        comment = f"–°–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫: {grorder_mos_name}"
        cur.execute(create_outlay_sql, (waybill, comment, guidhi, guidlo, guid))
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        outlay_id_sql = "SELECT gen_id(gen_outlay, 0) FROM rdb$database"
        cur.execute(outlay_id_sql)
        outlay_id = cur.fetchone()[0]
        print(f"üîß DB: –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ outlayid={outlay_id}")
        
        # 5. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        print(f"üîß DB: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥
        create_supply_sql = """
        INSERT INTO SUPPLY (
            SUPPLYID, WAYBILL, SUPPLYDATE, SUPPLIERID, SUPPLYTYPE, 
            GRORDERID, PARENTID, ISAPPROVED, RCOMMENT, WHLISTID, 
            RECCOLOR, RECFLAG, GUIDHI, GUIDLO, OWNERID, 
            DELETED, DATECREATED, DATEMODIFIED, DATEDELETED, JOBTASKID, GUID
        ) VALUES (
            gen_id(gen_supply, 1), ?, CURRENT_DATE, NULL, 1, 
            NULL, NULL, 0, ?, 0, 
            NULL, NULL, ?, ?, 0, 
            0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, ?
        )
        """
        supply_comment = f"–ü—Ä–∏—Ö–æ–¥ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫: {grorder_mos_name}"
        cur.execute(create_supply_sql, (grorder_mos_name, supply_comment, guidhi, guidlo, guid))
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
        supply_id_sql = "SELECT gen_id(gen_supply, 0) FROM rdb$database"
        cur.execute(supply_id_sql)
        supply_id = cur.fetchone()[0]
        print(f"üîß DB: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥ supplyid={supply_id}")
        
        # 6. –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        print(f"üîß DB: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏...")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        if used_materials:
            print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(used_materials)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∞–Ω–∏–µ...")
            
            for material in used_materials:
                goodsid = material.get('goodsid')
                length = material.get('length', 0)
                quantity = material.get('quantity', 0)
                is_remainder = material.get('is_remainder', False)
                
                if not goodsid or quantity <= 0:
                    continue
                
                if is_remainder:
                    # –≠—Ç–æ –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ OUTLAYREMAINDER
                    # –î–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —à—Ç—É–∫–∞—Ö
                    print(f"üîß DB: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫: goodsid={goodsid}, length={length}, quantity={quantity}, is_remainder={is_remainder}")
                    
                    insert_outlay_remainder_sql = """
                    INSERT INTO OUTLAYREMAINDER (
                        OUTLAYREMAINDERID, OUTLAYID, GOODSID, ISAPPROVED, 
                        THICK, WIDTH, HEIGHT, QTY, SELLERPRICE, SELLERCURRENCYID
                    ) VALUES (
                        gen_id(gen_outlayremainder, 1), ?, ?, 0, 
                        ?, 0, 0, ?, 0, 1
                    )
                    """
                    print(f"üîß DB: –í—ã–ø–æ–ª–Ω—è–µ–º SQL: INSERT INTO OUTLAYREMAINDER —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: outlay_id={outlay_id}, goodsid={goodsid}, length={int(length)}, quantity={quantity}")
                    cur.execute(insert_outlay_remainder_sql, (outlay_id, goodsid, int(length), quantity))
                    print(f"üîß DB: ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ OUTLAYREMAINDER goodsid={goodsid}, –¥–ª–∏–Ω–∞={length}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={quantity}—à—Ç")
                else:
                    # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º –≤ OUTLAYDETAIL
                    # –ü–æ–ª—É—á–∞–µ–º measureid –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    measure_sql = """
                    SELECT ggm.measureid FROM goods g
                    JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                    JOIN grgoodsmeasure ggm ON ggm.grgoodsid = gg.grgoodsid
                    WHERE g.goodsid = ? AND ggm.ismain = 1
                    """
                    cur.execute(measure_sql, (goodsid,))
                    measure_result = cur.fetchone()
                    measureid = measure_result[0] if measure_result else 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º thick –∏–∑ groupgoods –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    thick_sql = """
                    SELECT gg.thick FROM goods g
                    JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                    WHERE g.goodsid = ?
                    """
                    cur.execute(thick_sql, (goodsid,))
                    thick_result = cur.fetchone()
                    thick = thick_result[0] if thick_result else 6000  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 6000 –º–º
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª—ã—Å—Ç–æ–≤ * thick
                    correct_quantity = quantity * thick
                    
                    insert_outlay_detail_sql = """
                    INSERT INTO OUTLAYDETAIL (
                        OUTLAYDETAILID, OUTLAYID, GOODSID, QTY, MEASUREID, 
                        ISAPPROVED, SELLERPRICE, SELLERCURRENCYID
                    ) VALUES (
                        gen_id(gen_outlaydetail, 1), ?, ?, ?, ?, 
                        0, 0, 1
                    )
                    """
                    cur.execute(insert_outlay_detail_sql, (outlay_id, goodsid, correct_quantity, measureid))
                    print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª goodsid={goodsid}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={quantity}—à—Ç * {thick}–º–º = {correct_quantity}–º–º –≤ outlaydetail")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏—Ö–æ–¥ –¥–µ–ª–æ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        if business_remainders:
            print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(business_remainders)} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—Ä–∏—Ö–æ–¥...")
            
            for remainder in business_remainders:
                goodsid = remainder.get('goodsid')
                length = remainder.get('length', 0)
                quantity = remainder.get('quantity', 0)
                
                if not goodsid or quantity <= 0 or length <= 0:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
                price_sql = """
                SELECT COALESCE(g.price1, 0) as price
                FROM goods g 
                WHERE g.goodsid = ?
                """
                cur.execute(price_sql, (goodsid,))
                price_result = cur.fetchone()
                price = price_result[0] if price_result else 0
                
                # –ü–æ–ª—É—á–∞–µ–º thick –∏–∑ groupgoods –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                thick_sql = """
                SELECT gg.thick FROM goods g
                JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                WHERE g.goodsid = ?
                """
                cur.execute(thick_sql, (goodsid,))
                thick_result = cur.fetchone()
                thick = thick_result[0] if thick_result else 6000  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 6000 –º–º
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª—ã—Å—Ç–æ–≤ * thick
                correct_quantity = quantity * thick
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –ø—Ä–∏—Ö–æ–¥ (SUPPLYREMAINDER)
                insert_supply_remainder_sql = """
                INSERT INTO SUPPLYREMAINDER (
                    SUPPLYREMAINDERID, SUPPLYID, GOODSID, ISAPPROVED, 
                    THICK, WIDTH, HEIGHT, QTY, SELLERPRICE, SELLERCURRENCYID
                ) VALUES (
                    gen_id(gen_supplyremainder, 1), ?, ?, 0, 
                    ?, 0, 0, ?, ?, 1
                )
                """
                cur.execute(insert_supply_remainder_sql, (supply_id, goodsid, int(length), correct_quantity, price))
                print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ SUPPLYREMAINDER goodsid={goodsid}, –¥–ª–∏–Ω–∞={length}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={quantity}—à—Ç * {thick}–º–º = {correct_quantity}–º–º")
                

        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        con.commit()
        con.close()
        
        total_time = time.time() - operation_start_time
        print(f"‚úÖ DB: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return {
            "success": True,
            "message": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã",
            "outlay_id": outlay_id,
            "supply_id": supply_id,
            "deleted_outlay_count": deleted_outlay_count,
            "deleted_supply_count": deleted_supply_count,
            "grorder_ids": grorder_ids,
            "performance": {
                "total_time": round(total_time, 2)
            }
        }
        
    except Exception as e:
        total_time = time.time() - operation_start_time
        print(f"‚ùå DB: –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞ {total_time:.2f}—Å: {e}")
        import traceback
        print(f"‚ùå DB: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if 'con' in locals() and con:
                con.rollback()
                print(f"üîÑ DB: –í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                con.close()
        except Exception as rollback_error:
            print(f"‚ùå DB: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        
        try:
            if 'con' in locals() and not con.closed:
                con.rollback()
                con.close()
        except Exception:
            pass
            
        return {
            "success": False,
            "error": str(e),
            "performance": {
                "total_time": round(total_time, 2)
            }
        }

def get_orderid_by_itemsdetailid(itemsdetailid: int) -> int | None:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ORDERID –ø–æ ITEMSDETAILID
    
    Args:
        itemsdetailid: ID –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        
    Returns:
        ORDERID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ORDERS –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        sql = """
        SELECT oi.orderid
        FROM itemsdetail itd
        JOIN orderitems oi ON oi.orderitemsid = itd.orderitemsid
        WHERE itd.itemsdetailid = ?
        """
        
        if ENABLE_LOGGING:
            print(f"üîß DB: –ü–æ–ª—É—á–µ–Ω–∏–µ orderid –¥–ª—è itemsdetailid={itemsdetailid}")
        
        cur.execute(sql, (itemsdetailid,))
        result = cur.fetchone()
        con.close()
        
        if result:
            orderid = int(result[0])
            if ENABLE_LOGGING:
                print(f"‚úÖ DB: –ù–∞–π–¥–µ–Ω orderid={orderid} –¥–ª—è itemsdetailid={itemsdetailid}")
            return orderid
        else:
            if ENABLE_LOGGING:
                print(f"‚ö†Ô∏è DB: –ù–µ –Ω–∞–π–¥–µ–Ω orderid –¥–ª—è itemsdetailid={itemsdetailid}")
            return None
            
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå DB: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è orderid –¥–ª—è itemsdetailid={itemsdetailid}: {e}")
        return None

def get_warehouse_remainders_by_goodsid(goodsid: int) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ goodsid
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        sql = """
        SELECT
            g.marking AS g_marking,
            whm.goodsid,
            whm.thick,
            whm.qty - whm.reserveqty AS qty
        FROM warehouseremainder whm
        JOIN goods g ON g.goodsid = whm.goodsid
        JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
        JOIN measure m ON m.measureid = gg.measureid
        WHERE whm.goodsid = ?
        """
        
        cur.execute(sql, (goodsid,))
        rows = cur.fetchall()
        
        remainders = []
        for row in rows:
            remainder = {
                'marking': row[0],  # g_marking
                'goodsid': row[1],  # goodsid
                'thick': row[2],    # thick
                'qty': row[3]       # qty
            }
            remainders.append(remainder)
        
        con.close()
        
        if ENABLE_LOGGING:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(remainders)} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è goodsid {goodsid}")
            
        return remainders
        
    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        raise


def distribute_cell_numbers(grorder_mos_id: int) -> Dict[str, Any]:
    """
    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ altawin.
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ orderitemsid —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π –ø—Ä–æ–µ–º–∞ –ø–æ grorder_mos_id
    2. –ü—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º for –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–º—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
    3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ cell_number –≤ —Ç–∞–±–ª–∏—Ü–µ optdetail_mos
    
    Args:
        grorder_mos_id: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤
    """
    operation_start_time = time.time()
    
    try:
        if ENABLE_LOGGING:
            print(f"üîß DB: –ù–∞—á–∞–ª–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –¥–ª—è grorder_mos_id={grorder_mos_id}")
        
        con = get_db_connection()
        cur = con.cursor()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.begin()
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ orderitemsid —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π –ø—Ä–æ–µ–º–∞
        unique_items_sql = """
        SELECT DISTINCT
            vd.partside,
            vd.orderitemsid
        FROM voptdetail_mos vd
        WHERE vd.optimizedid IN (
            SELECT om.optimized_mos_id 
            FROM optimized_mos om 
            WHERE om.grorder_mos_id = ?
        )
        ORDER BY vd.orderitemsid, vd.partside
        """
        
        if ENABLE_LOGGING:
            print("üîß DB: –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤:")
            print(f"   SQL: {unique_items_sql}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä: grorder_mos_id={grorder_mos_id}")
        
        cur.execute(unique_items_sql, (grorder_mos_id,))
        unique_items = cur.fetchall()
        
        if not unique_items:
            if ENABLE_LOGGING:
                print(f"‚ö†Ô∏è DB: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤ –¥–ª—è grorder_mos_id={grorder_mos_id}")
            con.rollback()
            con.close()
            return {
                "success": False,
                "message": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫",
                "processed_items": 0,
                "performance": {
                    "total_time": round(time.time() - operation_start_time, 2)
                }
            }
        
        if ENABLE_LOGGING:
            print(f"‚úÖ DB: –ù–∞–π–¥–µ–Ω–æ {len(unique_items)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫")
            for i, item in enumerate(unique_items):
                print(f"   [{i+1}] partside='{item[0]}', orderitemsid={item[1]}")
        
        # 2. –ü—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º for –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ (–Ω–∞—á–∏–Ω–∞–µ–º —Å 1)
        processed_count = 0
        
        for i, (partside, orderitemsid) in enumerate(unique_items, start=1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 1
            if ENABLE_LOGGING:
                print(f"üîß DB: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–µ–º {i}/{len(unique_items)}: partside='{partside}', orderitemsid={orderitemsid}")
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–º–∞
            update_cell_sql = """
            UPDATE optdetail_mos odm 
            SET odm.cell_number = ? 
            WHERE (odm.itemsdetailid IN (
                SELECT itd.itemsdetailid 
                FROM itemsdetail itd 
                WHERE itd.orderitemsid = ?
            ))
            AND (odm.partside = ?)
            """
            
            if ENABLE_LOGGING:
                print(f"üîß DB: –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: cell_number={i}, orderitemsid={orderitemsid}, partside='{partside}'")
            
            cur.execute(update_cell_sql, (i, orderitemsid, partside))
            updated_rows = cur.rowcount if hasattr(cur, 'rowcount') else 0
            
            if ENABLE_LOGGING:
                print(f"‚úÖ DB: –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–µ–º–∞ —Å cell_number={i}")
            
            processed_count += 1
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        con.commit()
        con.close()
        
        total_time = time.time() - operation_start_time
        
        if ENABLE_LOGGING:
            print(f"‚úÖ DB: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤: {processed_count}")
        
        return {
            "success": True,
            "message": f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è {processed_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤",
            "processed_items": processed_count,
            "grorder_mos_id": grorder_mos_id,
            "performance": {
                "total_time": round(total_time, 2)
            }
        }
        
    except Exception as e:
        total_time = time.time() - operation_start_time
        
        if ENABLE_LOGGING:
            print(f"‚ùå DB: –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –∑–∞ {total_time:.2f}—Å: {e}")
            import traceback
            print(f"‚ùå DB: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if 'con' in locals() and con:
                con.rollback()
                print("üîÑ DB: –í—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
                con.close()
        except Exception as rollback_error:
            print(f"‚ùå DB: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        
        return {
            "success": False,
            "error": str(e),
            "processed_items": 0,
            "performance": {
                "total_time": round(total_time, 2)
            }
        }

# ========================================
# –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –§–ò–ë–ï–†–ì–õ–ê–°–°–ê
# ========================================

def get_fiberglass_details_by_grorder_mos_id(grorder_mos_id: int) -> List[FiberglassDetail]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –ø–æ grorder_mos_id
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å —É—á–µ—Ç–æ–º –ø–ª–æ—Å–∫–æ—Å—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å)
    """
    details = []

    try:
        con = get_db_connection()
        cur = con.cursor()

        # SQL –∑–∞–ø—Ä–æ—Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä gg.ggtypeid = 58 –¥–ª—è —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ "—Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å"
        sql = f"""
        SELECT
            gr.ordernames as gr_ordernames,
            gr.groupdate as groupdate,
            gr.name as gr_name,
            oi.orderitemsid,
            oi.name as oi_name,
            o.orderno,
            g.marking as g_marking,
            g.goodsid,
            grd.qty * itd.qty as total_qty,
            itd.width as detail_width,
            itd.height as detail_height,
            itd.thick,
            o.orderid,
            itd.itemsdetailid,
            od.modelno,
            od.partside,
            od.izdpart
        FROM grorders gr
        JOIN grorder_uf_values guv ON gr.grorderid = guv.grorderid
        JOIN grordersdetail grd ON grd.grorderid = gr.grorderid
        JOIN orderitems oi ON oi.orderitemsid = grd.orderitemsid
        JOIN orders o ON o.orderid = oi.orderid
        JOIN itemsdetail itd ON itd.orderitemsid = oi.orderitemsid
        JOIN goods g ON g.goodsid = itd.goodsid
        JOIN groupgoods gg ON gg.grgoodsid = itd.grgoodsid
        JOIN groupgoodstypes ggt ON ggt.ggtypeid = gg.ggtypeid
        LEFT JOIN optdetail_mos od ON oi.orderid = od.orderid AND itd.itemsdetailid = od.itemsdetailid
        WHERE guv.userfieldid = 8
        AND guv.var_str = '{grorder_mos_id}'
        AND gg.ggtypeid = 58
        ORDER BY oi.orderitemsid
        """

        if ENABLE_LOGGING:
            print(f"üîç DB: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è grorder_mos_id={grorder_mos_id}")
            print(f"üîç DB: SQL: {sql}")

        cur.execute(sql)
        rows = cur.fetchall()

        for row in rows:
            detail = FiberglassDetail(
                grorder_mos_id=grorder_mos_id,
                orderid=int(row[12]) if row[12] else 0,  # o.orderid
                orderitemsid=int(row[3]) if row[3] else 0,  # oi.orderitemsid
                itemsdetailid=int(row[13]) if row[13] else 0,  # itd.itemsdetailid
                item_name=str(row[4]) if row[4] else "",  # oi.name
                width=float(row[9]) if row[9] else 0.0,  # itd.width
                height=float(row[10]) if row[10] else 0.0,  # itd.height
                quantity=int(row[8]) if row[8] else 0,  # total_qty
                modelno=int(row[14]) if row[14] else None,  # od.modelno
                partside=str(row[15]) if row[15] else None,  # od.partside
                izdpart=str(row[16]) if row[16] else None,  # od.izdpart
                goodsid=int(row[7]) if row[7] else 0,  # g.goodsid
                marking=str(row[6]) if row[6] else ""  # g.marking
            )
            details.append(detail)

            if ENABLE_LOGGING:
                print(f"üîç DB: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–µ—Ç–∞–ª—å —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {detail.marking}, —Ä–∞–∑–º–µ—Ä {detail.width}x{detail.height}–º–º, –∫–æ–ª-–≤–æ {detail.quantity}")

        con.close()

    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {e}")
        raise

    if ENABLE_LOGGING:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(details)} –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –¥–ª—è grorder_mos_id={grorder_mos_id}")

    return details

def get_fiberglass_warehouse_materials(goodsids: List[int]) -> List[FiberglassSheet]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—å–Ω—ã–µ —Ä—É–ª–æ–Ω—ã —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ —Å–æ —Å–∫–ª–∞–¥–∞
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫: –æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ / (—à–∏—Ä–∏–Ω–∞ * –≤—ã—Å–æ—Ç–∞)
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    """
    materials = []

    if not goodsids:
        if ENABLE_LOGGING:
            print("‚ö†Ô∏è DB: goodsids –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return materials

    try:
        con = get_db_connection()
        cur = con.cursor()

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è IN —É—Å–ª–æ–≤–∏—è
        placeholders = ','.join(['?'] * len(goodsids))

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–ª—å–Ω—ã—Ö —Ä—É–ª–æ–Ω–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
        sql = f"""
        SELECT
            g.marking as g_marking,
            g.goodsid,
            gg.width,
            gg.height,
            wh.qty - wh.reserveqty as available_qty,
            m.amfactor
        FROM goods g
        JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
        JOIN grgoodsmeasure ggm ON ggm.grgoodsid = gg.grgoodsid
        JOIN measure m ON m.measureid = ggm.measureid
        JOIN groupgoodstypes ggt ON ggt.ggtypeid = gg.ggtypeid
        LEFT JOIN warehouse wh ON wh.goodsid = g.goodsid
        WHERE g.goodsid IN ({placeholders})
        AND ggm.ismain = 1
        AND gg.ggtypeid = 58
        AND gg.width > 0
        AND gg.height > 0
        AND (wh.qty - wh.reserveqty) > 0
        ORDER BY g.marking
        """

        if ENABLE_LOGGING:
            print(f"üîç DB: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è goodsids={goodsids}")
            print(f"üîç DB: SQL: {sql}")
            print(f"üîç DB: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {goodsids}")

        cur.execute(sql, goodsids)
        rows = cur.fetchall()

        if ENABLE_LOGGING:
            print(f"üîç DB: –ó–∞–ø—Ä–æ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤–µ—Ä–Ω—É–ª {len(rows)} —Å—Ç—Ä–æ–∫")
            for i, row in enumerate(rows):
                print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: goodsid={row[1]}, marking={row[0]}, width={row[2]}, height={row[3]}, qty={row[4]}")

        for row in rows:
            # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É–ª–æ–Ω–æ–≤
            available_qty = int(row[4]) if row[4] else 0
            width = float(row[2]) if row[2] else 0.0
            height = float(row[3]) if row[3] else 0.0
            amfactor = float(row[5]) if row[5] else 1.0

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª—ã—Ö —Ä—É–ª–æ–Ω–æ–≤: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ / (—à–∏—Ä–∏–Ω–∞ * –≤—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞)
            if width > 0 and height > 0:
                roll_area = width * height  # –ø–ª–æ—â–∞–¥—å –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞
                roll_count = int(available_qty / roll_area) if roll_area > 0 else 0

                if ENABLE_LOGGING:
                    print(f"   –†–∞—Å—á–µ—Ç —Ä—É–ª–æ–Ω–æ–≤: {available_qty} / ({width} * {height}) = {available_qty} / {roll_area} = {roll_count} —Ä—É–ª–æ–Ω–æ–≤")
            else:
                roll_count = 0
                if ENABLE_LOGGING:
                    print(f"   –ü—Ä–æ–ø—É—Å–∫: –Ω—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã width={width}, height={height}")

            if roll_count > 0:
                material = FiberglassSheet(
                    goodsid=int(row[1]) if row[1] else 0,
                    marking=str(row[0]) if row[0] else "",
                    width=width,
                    height=height,
                    is_remainder=False,
                    remainder_id=None,
                    quantity=roll_count,
                    area_mm2=width * height
                )
                materials.append(material)

                if ENABLE_LOGGING:
                    print(f"üîç DB: –ó–∞–≥—Ä—É–∂–µ–Ω —Ü–µ–ª—å–Ω—ã–π —Ä—É–ª–æ–Ω: {material.marking}, {material.width}x{material.height}–º–º, –∫–æ–ª-–≤–æ {material.quantity} —Ä—É–ª–æ–Ω–æ–≤")
            else:
                if ENABLE_LOGGING:
                    roll_area = width * height if width > 0 and height > 0 else 0
                    print(f"   –ü—Ä–æ–ø—É—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {row[0]}, roll_count = {roll_count} (available_qty={available_qty}, roll_area={roll_area})")

        con.close()

    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {e}")
        raise

    if ENABLE_LOGGING:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(materials)} —Ü–µ–ª—å–Ω—ã—Ö —Ä—É–ª–æ–Ω–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞")

    return materials

def get_fiberglass_warehouse_remainders(goodsids: List[int]) -> List[FiberglassSheet]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ —Å–æ —Å–∫–ª–∞–¥–∞
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    """
    remainders = []

    if not goodsids:
        if ENABLE_LOGGING:
            print("‚ö†Ô∏è DB: goodsids –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤")
        return remainders

    try:
        con = get_db_connection()
        cur = con.cursor()

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è IN —É—Å–ª–æ–≤–∏—è
        placeholders = ','.join(['?'] * len(goodsids))

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
        sql = f"""
        SELECT
            g.marking as g_marking,
            whm.goodsid,
            whm.width,
            whm.height,
            whm.qty - whm.reserveqty as qty,
            whm.whremainderid,
            (whm.width * whm.height) as area_mm2
        FROM warehouseremainder whm
        JOIN goods g ON g.goodsid = whm.goodsid
        JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
        JOIN groupgoodstypes ggt ON ggt.ggtypeid = gg.ggtypeid
        WHERE whm.goodsid IN ({placeholders})
        AND gg.ggtypeid = 58
        AND (whm.qty - whm.reserveqty) > 0
        ORDER BY area_mm2 DESC
        """

        if ENABLE_LOGGING:
            print(f"üîç DB: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è goodsids={goodsids}")
            print(f"üîç DB: SQL: {sql}")
            print(f"üîç DB: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {goodsids}")

        cur.execute(sql, goodsids)
        rows = cur.fetchall()

        if ENABLE_LOGGING:
            print(f"üîç DB: –ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤–µ—Ä–Ω—É–ª {len(rows)} —Å—Ç—Ä–æ–∫")
            for i, row in enumerate(rows):
                print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: goodsid={row[1]}, marking={row[0]}, width={row[2]}, height={row[3]}, qty={row[4]}")

        for row in rows:
            remainder = FiberglassSheet(
                goodsid=int(row[1]) if row[1] else 0,
                marking=str(row[0]) if row[0] else "",
                width=float(row[2]) if row[2] else 0.0,
                height=float(row[3]) if row[3] else 0.0,
                is_remainder=True,
                remainder_id=int(row[5]) if row[5] else None,
                quantity=int(row[4]) if row[4] else 1,
                area_mm2=float(row[6]) if row[6] else 0.0
            )
            remainders.append(remainder)

            if ENABLE_LOGGING:
                print(f"üîç DB: –ó–∞–≥—Ä—É–∂–µ–Ω –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫: {remainder.marking}, {remainder.width}x{remainder.height}–º–º, –ø–ª–æ—â–∞–¥—å {remainder.area_mm2:.0f}–º–º¬≤")

        con.close()

    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {e}")
        raise

    if ENABLE_LOGGING:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(remainders)} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞")

    return remainders

def load_fiberglass_data(grorder_mos_id: int) -> FiberglassLoadDataResponse:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –ø–æ grorder_mos_id
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–µ—Ç–∞–ª–∏, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –æ–¥–∏–Ω –º–µ—Ç–æ–¥
    """
    try:
        if ENABLE_LOGGING:
            print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –¥–ª—è grorder_mos_id={grorder_mos_id}")

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
        details = get_fiberglass_details_by_grorder_mos_id(grorder_mos_id)

        if not details:
            if ENABLE_LOGGING:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –¥–ª—è grorder_mos_id={grorder_mos_id}")
            return FiberglassLoadDataResponse(
                details=[],
                materials=[],
                remainders=[],
                total_details=0,
                total_materials=0,
                total_remainders=0
            )

        # 2. –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ goodsid –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        goodsids = list(set(detail.goodsid for detail in details if detail.goodsid))

        if ENABLE_LOGGING:
            print(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(goodsids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {goodsids}")

        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏
        materials = get_fiberglass_warehouse_materials(goodsids)
        remainders = get_fiberglass_warehouse_remainders(goodsids)

        response = FiberglassLoadDataResponse(
            details=details,
            materials=materials,
            remainders=remainders,
            total_details=len(details),
            total_materials=len(materials),
            total_remainders=len(remainders)
        )

        if ENABLE_LOGGING:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            print(f"   - –î–µ—Ç–∞–ª–µ–π: {response.total_details}")
            print(f"   - –¶–µ–ª—å–Ω—ã—Ö —Ä—É–ª–æ–Ω–æ–≤: {response.total_materials}")
            print(f"   - –î–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {response.total_remainders}")

        return response

    except Exception as e:
        if ENABLE_LOGGING:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {e}")
        raise

