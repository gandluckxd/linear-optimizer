#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Linear Optimizer
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import sys
import traceback

def run_complete_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ LINEAR OPTIMIZER")
    print("=" * 60)
    
    try:
        # –≠—Ç–∞–ø 1: –ò–º–ø–æ—Ä—Ç—ã
        print("\n1Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        from core.models import Profile, Stock, CutPlan, OptimizationResult
        from core.optimizer import LinearOptimizer, OptimizationSettings
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        profiles = [
            Profile(id=1, order_id=1, element_name="–†–∞–º–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç", profile_code="P001", length=1500, quantity=3),
            Profile(id=2, order_id=1, element_name="–†–∞–º–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å", profile_code="P001", length=2000, quantity=2),
            Profile(id=3, order_id=1, element_name="–ò–º–ø–æ—Å—Ç", profile_code="P001", length=800, quantity=4),
        ]
        
        stocks = [
            Stock(id=1, profile_id=1, length=6000, quantity=2),
            Stock(id=2, profile_id=1, length=3000, quantity=1),
        ]
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ö–ª—ã—Å—Ç–æ–≤: {len(stocks)}")
        
        # –≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        print("\n3Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞...")
        settings = OptimizationSettings(
            blade_width=5.0,
            min_remainder_length=300.0,
            max_waste_percent=20.0
        )
        optimizer = LinearOptimizer(settings)
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        print("\n4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        def progress_callback(percent):
            if percent % 20 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 20%
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}%")
        
        result = optimizer.optimize(profiles, stocks, progress_fn=progress_callback)
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result.success}")
        print(f"   –ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(result.cut_plans)}")
        print(f"   –û—Ç—Ö–æ–¥—ã: {result.total_waste_percent:.1f}%")
        
        # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø–ª–∞–Ω–æ–≤
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø–ª–∞–Ω–æ–≤...")
        for i, plan in enumerate(result.cut_plans):
            print(f"\n   –ü–ª–∞–Ω {i+1}:")
            print(f"     –•–ª—ã—Å—Ç {plan.stock_id}: {plan.stock_length}–º–º")
            print(f"     –†–∞—Å–ø–∏–ª—ã: {plan.cuts}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            used_length = plan.get_used_length()
            total_pieces = plan.get_total_pieces_length() 
            cuts_count = plan.get_cuts_count()
            is_valid = plan.validate()
            
            print(f"     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {used_length:.0f}–º–º")
            print(f"     –°—É–º–º–∞ –¥–µ—Ç–∞–ª–µ–π: {total_pieces:.0f}–º–º")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤: {cuts_count}")
            print(f"     –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if is_valid else '‚ùå'}")
            
            if not is_valid:
                print(f"     ‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù–ò–ï: {used_length - plan.stock_length:.0f}–º–º")
        
        # –≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = result.get_statistics()
        print(f"   –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, value in stats.items():
            print(f"     {key}: {value}")
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –≠—Ç–∞–ø 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GUI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)...")
        try:
            from PyQt5.QtWidgets import QApplication, QTableWidget
            from gui.table_widgets import fill_optimization_results_table, _create_text_item
            
            # –°–æ–∑–¥–∞–µ–º QApplication –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not QApplication.instance():
                app = QApplication([])
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            table = QTableWidget()
            table.setColumnCount(5)
            table.setHorizontalHeaderLabels(["ID —Ö–ª—ã—Å—Ç–∞", "–î–ª–∏–Ω–∞", "–†–∞—Å–ø–∏–ª—ã", "–û—Ç—Ö–æ–¥—ã", "% –æ—Ç—Ö–æ–¥–æ–≤"])
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            fill_optimization_results_table(table, result.cut_plans)
            
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: {table.rowCount()} —Å—Ç—Ä–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            if table.rowCount() > 0:
                print("   –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:")
                for col in range(min(3, table.columnCount())):
                    item = table.item(0, col)
                    if item:
                        print(f"     –°—Ç–æ–ª–±–µ—Ü {col}: {item.text()}")
            
        except ImportError:
            print("‚ö†Ô∏è PyQt5 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º GUI —Ç–µ—Å—Ç—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ GUI —Ç–µ—Å—Ç–∞—Ö: {e}")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = run_complete_test()
    
    if success:
        print("\n‚úÖ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û –ö –†–ê–ë–û–¢–ï!")
        print("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        sys.exit(1)