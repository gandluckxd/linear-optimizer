"""
–û–∫–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
"""

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton,
    QTableWidget, QTableWidgetItem, QGroupBox, QTabWidget, QFormLayout,
    QSpinBox, QDoubleSpinBox, QCheckBox, QTextEdit, QSplitter, QHeaderView,
    QMessageBox, QProgressBar, QFrame, QComboBox, QApplication
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QThread, QMutex
from PyQt5.QtGui import QFont, QIcon
import sys
import requests
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class FiberglassDataLoadThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –∏–∑ API"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    debug_step = pyqtSignal(str)
    error_occurred = pyqtSignal(str, str)  # title, message
    data_loaded = pyqtSignal(dict)  # loaded_data
    finished_loading = pyqtSignal()
    
    def __init__(self, grorder_mos_id, api_base_url="http://localhost:8001"):
        super().__init__()
        self.grorder_mos_id = grorder_mos_id
        self.api_base_url = api_base_url
        self.mutex = QMutex()
    
    def run(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞"""
        try:
            self.debug_step.emit(f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –¥–ª—è grorder_mos_id={self.grorder_mos_id}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            url = f"{self.api_base_url}/api/fiberglass/load-data"
            payload = {"grorder_mos_id": self.grorder_mos_id}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(url, json=payload, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                
                self.debug_step.emit(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
                self.debug_step.emit(f"   - –î–µ—Ç–∞–ª–µ–π: {data.get('total_details', 0)}")
                self.debug_step.emit(f"   - –¶–µ–ª—å–Ω—ã—Ö —Ä—É–ª–æ–Ω–æ–≤: {data.get('total_materials', 0)}")
                self.debug_step.emit(f"   - –î–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {data.get('total_remainders', 0)}")
                
                self.data_loaded.emit(data)
                
            else:
                error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                self.error_occurred.emit("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", error_msg)
                
        except requests.exceptions.ConnectionError:
            self.error_occurred.emit("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É")
        except requests.exceptions.Timeout:
            self.error_occurred.emit("–¢–∞–π–º–∞—É—Ç", "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
        except Exception as e:
            self.error_occurred.emit("–û—à–∏–±–∫–∞", str(e))
        finally:
            self.finished_loading.emit()

class FiberglassOptimizationWindow(QWidget):
    """–û–∫–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        self.current_data = None
        self.load_thread = None
        
        self.setup_ui()
        self.setup_connections()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞")
        self.setGeometry(100, 100, 1400, 800)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout(self)
        
        # === –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
        control_panel = self.create_control_panel()
        main_layout.addWidget(control_panel)
        
        # === –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï ===
        data_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–∞–Ω–Ω—ã–µ
        left_panel = self.create_data_panel()
        data_splitter.addWidget(left_panel)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        right_panel = self.create_results_panel()
        data_splitter.addWidget(right_panel)
        
        data_splitter.setSizes([800, 600])
        main_layout.addWidget(data_splitter)
        
        # === –°–¢–ê–¢–£–° –ë–ê–† ===
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        main_layout.addWidget(self.status_label)
        
    def create_control_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        group = QGroupBox("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        layout = QHBoxLayout(group)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ grorder_mos_id
        layout.addWidget(QLabel("GRORDER_MOS_ID:"))
        self.grorder_mos_id_input = QLineEdit()
        self.grorder_mos_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è...")
        layout.addWidget(self.grorder_mos_id_input)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        self.load_btn = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.load_btn.setStyleSheet("QPushButton { background-color: #4CAF50; color: white; font-weight: bold; }")
        layout.addWidget(self.load_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimize_btn = QPushButton("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
        self.optimize_btn.setEnabled(False)
        self.optimize_btn.setStyleSheet("QPushButton { background-color: #2196F3; color: white; font-weight: bold; }")
        layout.addWidget(self.optimize_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF
        self.export_pdf_btn = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç PDF")
        self.export_pdf_btn.setEnabled(False)
        self.export_pdf_btn.setStyleSheet("QPushButton { background-color: #FF9800; color: white; font-weight: bold; }")
        layout.addWidget(self.export_pdf_btn)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        return group
        
    def create_data_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –í–∫–ª–∞–¥–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        self.data_tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ "–î–µ—Ç–∞–ª–∏"
        self.details_table = self.create_details_table()
        self.data_tabs.addTab(self.details_table, "–î–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è")
        
        # –í–∫–ª–∞–¥–∫–∞ "–¶–µ–ª—å–Ω—ã–µ —Ä—É–ª–æ–Ω—ã"
        self.materials_table = self.create_materials_table()
        self.data_tabs.addTab(self.materials_table, "–¶–µ–ª—å–Ω—ã–µ —Ä—É–ª–æ–Ω—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ "–î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"
        self.remainders_table = self.create_remainders_table()
        self.data_tabs.addTab(self.remainders_table, "–î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏")
        
        layout.addWidget(self.data_tabs)
        
        # –õ–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        log_group = QGroupBox("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
        log_layout = QVBoxLayout(log_group)
        
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(150)
        self.log_text.setReadOnly(True)
        log_layout.addWidget(self.log_text)
        
        layout.addWidget(log_group)
        
        return widget
        
    def create_results_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        settings_group = self.create_optimization_settings()
        layout.addWidget(settings_group)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        results_layout = QVBoxLayout(results_group)
        
        self.results_text = QTextEdit()
        self.results_text.setReadOnly(True)
        self.results_text.setPlaceholderText("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å...")
        results_layout.addWidget(self.results_text)
        
        layout.addWidget(results_group)
        
        return widget
        
    def create_optimization_settings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        layout = QFormLayout(group)
        
        # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª–∏—Å—Ç–∞
        layout.addRow(QLabel("=== –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª–∏—Å—Ç–∞ ==="))
        
        self.sheet_margin_top = QSpinBox()
        self.sheet_margin_top.setRange(0, 100)
        self.sheet_margin_top.setValue(15)
        self.sheet_margin_top.setSuffix(" –º–º")
        layout.addRow("–°–≤–µ—Ä—Ö—É:", self.sheet_margin_top)
        
        self.sheet_margin_bottom = QSpinBox()
        self.sheet_margin_bottom.setRange(0, 100)
        self.sheet_margin_bottom.setValue(15)
        self.sheet_margin_bottom.setSuffix(" –º–º")
        layout.addRow("–°–Ω–∏–∑—É:", self.sheet_margin_bottom)
        
        self.sheet_margin_left = QSpinBox()
        self.sheet_margin_left.setRange(0, 100)
        self.sheet_margin_left.setValue(15)
        self.sheet_margin_left.setSuffix(" –º–º")
        layout.addRow("–°–ª–µ–≤–∞:", self.sheet_margin_left)
        
        self.sheet_margin_right = QSpinBox()
        self.sheet_margin_right.setRange(0, 100)
        self.sheet_margin_right.setValue(15)
        self.sheet_margin_right.setSuffix(" –º–º")
        layout.addRow("–°–ø—Ä–∞–≤–∞:", self.sheet_margin_right)
        
        # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞
        layout.addRow(QLabel("=== –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ ==="))
        
        self.remainder_margin_top = QSpinBox()
        self.remainder_margin_top.setRange(0, 100)
        self.remainder_margin_top.setValue(15)
        self.remainder_margin_top.setSuffix(" –º–º")
        layout.addRow("–°–≤–µ—Ä—Ö—É:", self.remainder_margin_top)
        
        self.remainder_margin_bottom = QSpinBox()
        self.remainder_margin_bottom.setRange(0, 100)
        self.remainder_margin_bottom.setValue(15)
        self.remainder_margin_bottom.setSuffix(" –º–º")
        layout.addRow("–°–Ω–∏–∑—É:", self.remainder_margin_bottom)
        
        self.remainder_margin_left = QSpinBox()
        self.remainder_margin_left.setRange(0, 100)
        self.remainder_margin_left.setValue(15)
        self.remainder_margin_left.setSuffix(" –º–º")
        layout.addRow("–°–ª–µ–≤–∞:", self.remainder_margin_left)
        
        self.remainder_margin_right = QSpinBox()
        self.remainder_margin_right.setRange(0, 100)
        self.remainder_margin_right.setValue(15)
        self.remainder_margin_right.setSuffix(" –º–º")
        layout.addRow("–°–ø—Ä–∞–≤–∞:", self.remainder_margin_right)
        
        # –î—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        layout.addRow(QLabel("=== –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ==="))
        
        self.blade_width = QSpinBox()
        self.blade_width.setRange(0, 20)
        self.blade_width.setValue(1)
        self.blade_width.setSuffix(" –º–º")
        layout.addRow("–®–∏—Ä–∏–Ω–∞ –Ω–æ–∂–∞:", self.blade_width)
        
        self.max_waste_percent = QSpinBox()
        self.max_waste_percent.setRange(1, 50)
        self.max_waste_percent.setValue(5)
        self.max_waste_percent.setSuffix(" %")
        layout.addRow("–î–æ–ø—É—Å—Ç–∏–º—ã–π % –æ—Ç—Ö–æ–¥–∞:", self.max_waste_percent)
        
        self.min_remainder_width = QSpinBox()
        self.min_remainder_width.setRange(100, 1000)
        self.min_remainder_width.setValue(500)
        self.min_remainder_width.setSuffix(" –º–º")
        layout.addRow("–ú–∏–Ω. —à–∏—Ä–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞:", self.min_remainder_width)
        
        self.min_remainder_height = QSpinBox()
        self.min_remainder_height.setRange(100, 1000)
        self.min_remainder_height.setValue(500)
        self.min_remainder_height.setSuffix(" –º–º")
        layout.addRow("–ú–∏–Ω. –≤—ã—Å–æ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞:", self.min_remainder_height)
        
        self.use_simplified_optimization = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        self.use_simplified_optimization.setChecked(True)
        layout.addRow(self.use_simplified_optimization)
        
        return group
        
    def create_details_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π"""
        table = QTableWidget()
        
        headers = [
            "ID –∑–∞–∫–∞–∑–∞", "–ò–∑–¥–µ–ª–∏–µ", "–®–∏—Ä–∏–Ω–∞ (–º–º)", "–í—ã—Å–æ—Ç–∞ (–º–º)", 
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ú–æ–¥–µ–ª—å ‚Ññ", "–ü—Ä–æ—ë–º", "–ß–∞—Å—Ç—å", "–ú–∞—Ç–µ—Ä–∏–∞–ª"
        ]
        
        table.setColumnCount(len(headers))
        table.setHorizontalHeaderLabels(headers)
        table.horizontalHeader().setStretchLastSection(True)
        table.setAlternatingRowColors(True)
        table.setSelectionBehavior(QTableWidget.SelectRows)
        
        return table
        
    def create_materials_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ü–µ–ª—å–Ω—ã—Ö —Ä—É–ª–æ–Ω–æ–≤"""
        table = QTableWidget()
        
        headers = [
            "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–®–∏—Ä–∏–Ω–∞ (–º–º)", "–î–ª–∏–Ω–∞ (–º–º)", 
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤", "–ü–ª–æ—â–∞–¥—å (–º¬≤)"
        ]
        
        table.setColumnCount(len(headers))
        table.setHorizontalHeaderLabels(headers)
        table.horizontalHeader().setStretchLastSection(True)
        table.setAlternatingRowColors(True)
        table.setSelectionBehavior(QTableWidget.SelectRows)
        
        return table
        
    def create_remainders_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        table = QTableWidget()
        
        headers = [
            "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–®–∏—Ä–∏–Ω–∞ (–º–º)", "–í—ã—Å–æ—Ç–∞ (–º–º)", 
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü–ª–æ—â–∞–¥—å (–º–º¬≤)", "ID –æ—Å—Ç–∞—Ç–∫–∞"
        ]
        
        table.setColumnCount(len(headers))
        table.setHorizontalHeaderLabels(headers)
        table.horizontalHeader().setStretchLastSection(True)
        table.setAlternatingRowColors(True)
        table.setSelectionBehavior(QTableWidget.SelectRows)
        
        return table
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.load_btn.clicked.connect(self.load_data)
        self.optimize_btn.clicked.connect(self.optimize_cutting)
        self.export_pdf_btn.clicked.connect(self.export_pdf)
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞"""
        grorder_mos_id_text = self.grorder_mos_id_input.text().strip()
        
        if not grorder_mos_id_text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ GRORDER_MOS_ID")
            return
            
        try:
            grorder_mos_id = int(grorder_mos_id_text)
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "GRORDER_MOS_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º progress bar
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.load_btn.setEnabled(False)
        self.optimize_btn.setEnabled(False)
        self.export_pdf_btn.setEnabled(False)
        
        # –û—á–∏—â–∞–µ–º –ª–æ–≥
        self.log_text.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        self.load_thread = FiberglassDataLoadThread(grorder_mos_id)
        self.load_thread.debug_step.connect(self.add_log_message)
        self.load_thread.error_occurred.connect(self.show_error)
        self.load_thread.data_loaded.connect(self.on_data_loaded)
        self.load_thread.finished_loading.connect(self.on_loading_finished)
        self.load_thread.start()
        
    def add_log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.append(f"[{timestamp}] {message}")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
        cursor = self.log_text.textCursor()
        cursor.movePosition(cursor.End)
        self.log_text.setTextCursor(cursor)
        
    def show_error(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
        QMessageBox.critical(self, title, message)
        self.add_log_message(f"‚ùå {title}: {message}")
        
    def on_data_loaded(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.current_data = data
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        self.fill_details_table(data.get("details", []))
        self.fill_materials_table(data.get("materials", []))
        self.fill_remainders_table(data.get("remainders", []))
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimize_btn.setEnabled(True)
        
        self.add_log_message("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã")
        
    def on_loading_finished(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.progress_bar.setVisible(False)
        self.load_btn.setEnabled(True)
        
    def fill_details_table(self, details):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π"""
        table = self.details_table
        table.setRowCount(len(details))
        
        for row, detail in enumerate(details):
            table.setItem(row, 0, QTableWidgetItem(str(detail.get("orderid", ""))))
            table.setItem(row, 1, QTableWidgetItem(detail.get("item_name", "")))
            table.setItem(row, 2, QTableWidgetItem(f"{detail.get('width', 0):.1f}"))
            table.setItem(row, 3, QTableWidgetItem(f"{detail.get('height', 0):.1f}"))
            table.setItem(row, 4, QTableWidgetItem(str(detail.get("quantity", 0))))
            table.setItem(row, 5, QTableWidgetItem(str(detail.get("modelno", "") or "")))
            table.setItem(row, 6, QTableWidgetItem(detail.get("partside", "") or ""))
            table.setItem(row, 7, QTableWidgetItem(detail.get("izdpart", "") or ""))
            table.setItem(row, 8, QTableWidgetItem(detail.get("marking", "")))
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        table.resizeColumnsToContents()
        
    def fill_materials_table(self, materials):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ü–µ–ª—å–Ω—ã—Ö —Ä—É–ª–æ–Ω–æ–≤"""
        table = self.materials_table
        table.setRowCount(len(materials))
        
        for row, material in enumerate(materials):
            width = material.get("width", 0)
            height = material.get("height", 0)
            quantity = material.get("quantity", 0)
            area_m2 = (width * height * quantity) / 1_000_000  # –ü–µ—Ä–µ–≤–æ–¥ –≤ –º¬≤
            
            table.setItem(row, 0, QTableWidgetItem(material.get("marking", "")))
            table.setItem(row, 1, QTableWidgetItem(f"{width:.0f}"))
            table.setItem(row, 2, QTableWidgetItem(f"{height:.0f}"))
            table.setItem(row, 3, QTableWidgetItem(str(quantity)))
            table.setItem(row, 4, QTableWidgetItem(f"{area_m2:.2f}"))
            
        table.resizeColumnsToContents()
        
    def fill_remainders_table(self, remainders):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        table = self.remainders_table
        table.setRowCount(len(remainders))
        
        for row, remainder in enumerate(remainders):
            table.setItem(row, 0, QTableWidgetItem(remainder.get("marking", "")))
            table.setItem(row, 1, QTableWidgetItem(f"{remainder.get('width', 0):.0f}"))
            table.setItem(row, 2, QTableWidgetItem(f"{remainder.get('height', 0):.0f}"))
            table.setItem(row, 3, QTableWidgetItem(str(remainder.get("quantity", 0))))
            table.setItem(row, 4, QTableWidgetItem(f"{remainder.get('area_mm2', 0):.0f}"))
            table.setItem(row, 5, QTableWidgetItem(str(remainder.get("remainder_id", "") or "")))
            
        table.resizeColumnsToContents()
        
    def optimize_cutting(self):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–æ—è"""
        if not self.current_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–∑–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.add_log_message("üîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–æ—è...")
        self.results_text.setText("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_pdf_btn.setEnabled(True)
        
    def export_pdf(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ PDF"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ PDF
        self.add_log_message("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF...")
        QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç PDF", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    def get_optimization_settings(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        return {
            "sheet_margin_top": self.sheet_margin_top.value(),
            "sheet_margin_bottom": self.sheet_margin_bottom.value(),
            "sheet_margin_left": self.sheet_margin_left.value(),
            "sheet_margin_right": self.sheet_margin_right.value(),
            "remainder_margin_top": self.remainder_margin_top.value(),
            "remainder_margin_bottom": self.remainder_margin_bottom.value(),
            "remainder_margin_left": self.remainder_margin_left.value(),
            "remainder_margin_right": self.remainder_margin_right.value(),
            "blade_width": self.blade_width.value(),
            "max_waste_percent": self.max_waste_percent.value(),
            "min_remainder_width": self.min_remainder_width.value(),
            "min_remainder_height": self.min_remainder_height.value(),
            "use_simplified_optimization": self.use_simplified_optimization.isChecked()
        }

def main():
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–∫–Ω–∞"""
    app = QApplication(sys.argv)
    
    window = FiberglassOptimizationWindow()
    window.show()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
