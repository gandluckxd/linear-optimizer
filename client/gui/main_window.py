"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Linear Optimizer
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Glass Optimizer
"""

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QListWidget,
    QTableWidget, QTableWidgetItem, QCheckBox, QSpinBox, QGroupBox,
    QPushButton, QFormLayout, QLineEdit,
    QTabWidget, QComboBox, QDialog, QProgressBar, QMessageBox, QHeaderView,
    QSplitter, QFrame, QTextEdit, QSlider, QMainWindow, QMenuBar, QStatusBar,
    QAction, QApplication, QFileDialog, QScrollArea, QGraphicsScene, QGraphicsView
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QThread
from PyQt5.QtGui import QFont, QIcon, QShowEvent, QPixmap, QPainter
import sys
# import threading  # –£–±—Ä–∞–ª–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º QThread
from datetime import datetime
import functools
import requests
import os
import json
import logging
from typing import Dict


# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from core.api_client import get_api_client
from core.optimizer import LinearOptimizer, CuttingStockOptimizer, OptimizationSettings, SolverType
from core.fiberglass_optimizer import optimize as optimize_fiberglass

from core.models import Profile, Stock, OptimizationResult, StockRemainder, StockMaterial, FiberglassDetail, FiberglassSheet
from .table_widgets import (
    _create_text_item, _create_numeric_item, setup_table_columns,
    fill_profiles_table, fill_stock_table, fill_optimization_results_table,
    fill_stock_remainders_table, fill_stock_materials_table, fill_fabric_details_table,
    fill_fabric_remainders_table, fill_fabric_materials_table,
    update_table_column_widths, clear_table, enable_table_sorting,
    copy_table_to_clipboard, copy_table_as_csv
)
from .dialogs import DebugDialog, ProgressDialog, OptimizationSettingsDialog, ApiSettingsDialog

from .config import MAIN_WINDOW_STYLE, TAB_STYLE, SPECIAL_BUTTON_STYLES, WIDGET_CONFIGS, COLORS
from .visualization_tab import VisualizationTab

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class DataLoadThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
    debug_step = pyqtSignal(str)
    error_occurred = pyqtSignal(str, str, str)  # title, message, icon
    success_occurred = pyqtSignal()
    data_loaded = pyqtSignal(list, dict, list, dict)  # profiles, stock_data, fabric_details, fabric_stock_data
    finished_loading = pyqtSignal()
    
    def __init__(self, api_client, order_ids, grorders_mos_id=None):
        super().__init__()
        self.api_client = api_client
        self.order_ids = order_ids if isinstance(order_ids, list) else [order_ids]
        self.grorders_mos_id = grorders_mos_id
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.debug_step.emit(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(self.order_ids)} —Å–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
            all_profiles = []
            for i, order_id in enumerate(self.order_ids):
                self.debug_step.emit(f"üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} ({i+1}/{len(self.order_ids)})...")
                profiles = self.api_client.get_profiles(order_id)
                all_profiles.extend(profiles)
                self.debug_step.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            
            self.debug_step.emit(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
            profile_codes = list(set(profile.profile_code for profile in all_profiles))
            self.debug_step.emit(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(profile_codes)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {profile_codes}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞
            self.debug_step.emit("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞...")
            stock_remainders = self.api_client.get_stock_remainders(profile_codes)
            self.debug_step.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stock_remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ —Å–∫–ª–∞–¥–∞
            self.debug_step.emit("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞...")
            stock_materials = self.api_client.get_stock_materials(profile_codes)
            self.debug_step.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stock_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
            if stock_materials:
                self.debug_step.emit("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
                for material in stock_materials:
                    self.debug_step.emit(f"  - {material.profile_code}: {material.quantity_pieces} —Ö–ª—ã—Å—Ç–æ–≤ –ø–æ {material.length}–º–º")
            else:
                self.debug_step.emit("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∏ –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª!")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–µ–Ω (—Ñ–∏–±—Ä–≥–ª–∞—Å—Å)
            self.debug_step.emit("ü™ü –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º grorders_mos_id, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞
            grorders_mos_id = self.grorders_mos_id
            if grorders_mos_id:
                self.debug_step.emit(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º grorders_mos_id={grorders_mos_id} –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω")
            else:
                self.debug_step.emit("‚ö†Ô∏è grorders_mos_id –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω")

            fabric_details = []
            fabric_remainders = []
            fabric_materials = []

            if grorders_mos_id:
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª–æ—Ç–µ–Ω
                    self.debug_step.emit(f"üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª–æ—Ç–µ–Ω –¥–ª—è grorders_mos_id={grorders_mos_id}...")
                    fabric_details = self.api_client.get_fiberglass_details(grorders_mos_id)
                    print(f"üîß DEBUG: API –≤–µ—Ä–Ω—É–ª {len(fabric_details)} –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª–æ—Ç–µ–Ω")
                    print(f"üîß DEBUG: fabric_details —Ç–∏–ø: {type(fabric_details)}")
                    if fabric_details and len(fabric_details) > 0:
                        print(f"üîß DEBUG: –ü–µ—Ä–≤–∞—è –¥–µ—Ç–∞–ª—å: {fabric_details[0]}")
                        print(f"üîß DEBUG: –ü–µ—Ä–≤–∞—è –¥–µ—Ç–∞–ª—å –∞—Ç—Ä–∏–±—É—Ç—ã: {dir(fabric_details[0])}")
                    self.debug_step.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fabric_details)} –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª–æ—Ç–µ–Ω")

                    if fabric_details:
                        self.debug_step.emit("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω:")
                        for detail in fabric_details:
                            self.debug_step.emit(f"  - {detail.item_name}: {detail.width}–º–º x {detail.height}–º–º, –∫–æ–ª-–≤–æ: {detail.quantity}")

                        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ goodsids –∏–∑ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞
                        temp_goodsids = list(set(detail.goodsid for detail in fabric_details if detail.goodsid))
                        fabric_codes = list(set(detail.marking for detail in fabric_details if detail.marking))
                        self.debug_step.emit(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(temp_goodsids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö goodsids: {temp_goodsids}")
                        self.debug_step.emit(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(fabric_codes)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω: {fabric_codes}")

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞
                        self.debug_step.emit("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞...")
                        try:
                            fabric_remainders = self.api_client.get_fiberglass_remainders(temp_goodsids)
                            self.debug_step.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fabric_remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω")
                        except Exception as e:
                            self.debug_step.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω: {e}")
                            fabric_remainders = []

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞
                        self.debug_step.emit("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞...")
                        try:
                            fabric_materials = self.api_client.get_fiberglass_materials(temp_goodsids)
                            self.debug_step.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fabric_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω")
                        except Exception as e:
                            self.debug_step.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω: {e}")
                            fabric_materials = []

                        if fabric_materials:
                            self.debug_step.emit("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω:")
                            for material in fabric_materials:
                                self.debug_step.emit(f"  - {getattr(material, 'marking', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {getattr(material, 'quantity', 1)} –ø–æ–ª–æ—Ç–µ–Ω {getattr(material, 'width', 0)}–º–º x {getattr(material, 'height', 0)}–º–º")
                        else:
                            self.debug_step.emit("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∏ –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–ª–æ—Ç–µ–Ω!")
                    else:
                        self.debug_step.emit("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª–æ—Ç–µ–Ω –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è!")

                except Exception as e:
                    self.debug_step.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–æ—Ç–µ–Ω: {e}")
            else:
                self.debug_step.emit("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å grorders_mos_id –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
            self.data_loaded.emit(
                all_profiles,
                {'remainders': stock_remainders, 'materials': stock_materials},
                fabric_details,
                {'remainders': fabric_remainders, 'materials': fabric_materials}
            )
            self.debug_step.emit("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.success_occurred.emit()
            
        except Exception as e:
            self.debug_step.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            self.error_occurred.emit("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", str(e), "critical")
        finally:
            self.finished_loading.emit()


class OptimizationThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –≥–ª–∞–≤–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
    debug_step = pyqtSignal(str)
    optimization_result = pyqtSignal(object)  # OptimizationResult
    optimization_error = pyqtSignal(str)
    progress_updated = pyqtSignal(int)  # –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    finished_optimization = pyqtSignal()
    
    def __init__(self, optimizer, profiles, stocks, settings):
        super().__init__()
        self.optimizer = optimizer
        self.profiles = profiles
        self.stocks = stocks
        self.settings = settings
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            self.debug_step.emit("üîß DEBUG: –ü–æ—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω")
            
            def progress_callback(percent):
                """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
                self.progress_updated.emit(int(percent))
                self.debug_step.emit(f"üîß DEBUG: –ü—Ä–æ–≥—Ä–µ—Å—Å {percent}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if not self.profiles:
                self.optimization_error.emit("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return
                
            if not self.stocks:
                self.optimization_error.emit("–ù–µ—Ç —Ö–ª—ã—Å—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return
            
            self.debug_step.emit("üîß DEBUG: –í—ã–∑—ã–≤–∞–µ–º optimizer.optimize()")
            
            # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            result = self.optimizer.optimize(
                profiles=self.profiles,
                stocks=self.stocks,
                settings=self.settings,
                progress_fn=progress_callback
            )
            
            self.debug_step.emit(f"üîß DEBUG: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            if result and result.success:
                self.optimization_result.emit(result)
                self.debug_step.emit(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {len(result.cut_plans)} –ø–ª–∞–Ω–æ–≤")
            else:
                error_msg = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                if result and hasattr(result, 'message'):
                    error_msg = result.message
                self.debug_step.emit(f"‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞: {error_msg}")
                self.optimization_error.emit(error_msg)
                
        except Exception as e:
            import traceback
            error_msg = f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}"
            self.debug_step.emit(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {error_msg}")
            self.debug_step.emit(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            self.optimization_error.emit(error_msg)
        finally:
            self.debug_step.emit("üîß DEBUG: –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            self.finished_optimization.emit()


class LinearOptimizerWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Linear Optimizer"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è thread-safe –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    debug_step_signal = pyqtSignal(str)
    error_signal = pyqtSignal(str, str, str)  # title, message, icon
    success_signal = pyqtSignal()
    data_loaded_signal = pyqtSignal(list, dict, list, dict)  # profiles, stock_data, fabric_details, fabric_stock_data
    restore_button_signal = pyqtSignal()
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_result_signal = pyqtSignal(object)  # OptimizationResult
    optimization_error_signal = pyqtSignal(str)
    close_progress_signal = pyqtSignal()

    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    update_visualization_signal = pyqtSignal(object)  # FiberglassOptimizationResult
    
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.api_client = get_api_client()
        self.optimizer = LinearOptimizer()
        self.current_order_id = None
        self.profiles = []
        self.stocks = []  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.stock_remainders = []  # –û—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–æ —Å–∫–ª–∞–¥–∞
        self.stock_materials = []   # –¶–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–æ —Å–∫–ª–∞–¥–∞
        self.fabric_details = []    # –î–µ—Ç–∞–ª–∏ –ø–æ–ª–æ—Ç–µ–Ω –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è
        self.fabric_remainders = [] # –û—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞
        self.fabric_materials = []  # –¶–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞
        self.optimization_result = None
        self.fabric_optimization_result = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞

        self.current_settings = OptimizationSettings()


        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.optimization_params = {
            'blade_width': 5,
            'min_remainder_length': 300,
            'max_waste_percent': 15,
            'pair_optimization': True,
            'use_remainders': True,
            'min_trash_mm': 50,
            'begin_indent': 10,
            'end_indent': 10,
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
            'planar_min_remainder_width': 500.0,
            'planar_min_remainder_height': 500.0,
            'planar_cut_width': 1.0,
            'sheet_indent': 15.0,
            'remainder_indent': 15.0,
            'planar_max_waste_percent': 5.0,
            'use_warehouse_remnants': True,
            'allow_rotation': True
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.debug_dialog = None
        self.progress_dialog = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤
        self.data_load_thread = None
        self.optimization_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.init_ui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.setWindowTitle("Linear Optimizer - –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞")
        self.setMinimumSize(1400, 900)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è thread-safe –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        self.debug_step_signal.connect(self._add_debug_step_safe)
        self.error_signal.connect(self._show_error_safe)
        self.success_signal.connect(self._show_success_safe)
        self.data_loaded_signal.connect(self._update_tables_safe)
        self.restore_button_signal.connect(self._restore_button_safe)
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimization_result_signal.connect(self._handle_optimization_result)
        self.optimization_error_signal.connect(self._handle_optimization_error)
        self.close_progress_signal.connect(self._close_progress_dialog)

        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.update_visualization_signal.connect(self._update_visualization_tab)
        
        print("üîß DEBUG: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Linear Optimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

    def showEvent(self, event):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ showEvent –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        super().showEvent(event)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ (–¥–ª—è Windows)
        try:
            import ctypes
            from ctypes import wintypes
            import platform
            
            # –ü–æ–ª—É—á–∞–µ–º handle –æ–∫–Ω–∞
            hwnd = int(self.winId())
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Windows –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            version = platform.version()
            version_parts = version.split('.')
            build_number = int(version_parts[2]) if len(version_parts) > 2 else 0
            
            # –î–ª—è Windows 10 1903+ (build 18362+) –∏ Windows 11
            if build_number >= 18362:
                # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É (Windows 11)
                DWMWA_USE_IMMERSIVE_DARK_MODE = 20
                value = ctypes.c_int(1)
                result = ctypes.windll.dwmapi.DwmSetWindowAttribute(
                    hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE, 
                    ctypes.byref(value), ctypes.sizeof(value)
                )
                
                # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
                if result != 0:
                    DWMWA_USE_IMMERSIVE_DARK_MODE = 19
                    result = ctypes.windll.dwmapi.DwmSetWindowAttribute(
                        hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE, 
                        ctypes.byref(value), ctypes.sizeof(value)
                    )
                
                if result == 0:
                    print(f"üîß DEBUG: –¢–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {DWMWA_USE_IMMERSIVE_DARK_MODE})")
                else:
                    print(f"üîß DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∫–æ–¥ –æ—à–∏–±–∫–∏: {result})")
            else:
                print("üîß DEBUG: –í–µ—Ä—Å–∏—è Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω")
                
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–µ Windows –∏–ª–∏ –æ—à–∏–±–∫–∞), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            print(f"üîß DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}")
            pass

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –∫–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        self.setStyleSheet(MAIN_WINDOW_STYLE)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet(TAB_STYLE)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        self.create_order_data_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.create_results_tab()

        # –í–∫–ª–∞–¥–∫–∞ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è
        self.create_visualization_tab()



        main_layout.addWidget(self.tabs)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        new_action = QAction("–ù–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", self)
        new_action.setShortcut("Ctrl+N")
        new_action.triggered.connect(self.new_optimization)
        file_menu.addAction(new_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # –ú–µ–Ω—é –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_menu = menubar.addMenu("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        optimization_params_action = QAction("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", self)
        optimization_params_action.setShortcut("Ctrl+P")
        optimization_params_action.triggered.connect(self.show_optimization_settings)
        params_menu.addAction(optimization_params_action)
        
        # –ú–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_menu = menubar.addMenu("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        api_settings_action = QAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", self)
        api_settings_action.triggered.connect(self.show_api_settings)
        settings_menu.addAction(api_settings_action)



    def create_order_data_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        order_tab = QWidget()
        layout = QVBoxLayout(order_tab)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        top_group = self.create_order_info_group()
        layout.addWidget(top_group)
        
        # –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—Ñ–∏–ª–∏ –∏ –ø–æ–ª–æ—Ç–Ω–∞)
        middle_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–æ—Ñ–∏–ª–∏
        left_group = self.create_profiles_section()
        middle_splitter.addWidget(left_group)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ø–æ–ª–æ—Ç–Ω–∞
        right_group = self.create_fabric_section()
        middle_splitter.addWidget(right_group)
        
        middle_splitter.setSizes([500, 900])
        layout.addWidget(middle_splitter)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()
        
        self.optimize_button = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        self.optimize_button.clicked.connect(self.on_optimize_clicked)
        self.optimize_button.setEnabled(False)
        self.optimize_button.setStyleSheet(SPECIAL_BUTTON_STYLES["optimize"])
        buttons_layout.addWidget(self.optimize_button)

        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        self.tabs.addTab(order_tab, "üìä –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞")

    def create_order_info_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")
        layout = QVBoxLayout(group)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
        input_layout = QHBoxLayout()
        
        input_layout.addWidget(QLabel("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫:"))
        self.order_id_input = QLineEdit()
        self.order_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ grorders_mos_id (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
        self.order_id_input.setMinimumWidth(300)
        self.order_id_input.setMaximumWidth(400)
        input_layout.addWidget(self.order_id_input)
        
        self.load_data_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.load_data_button.clicked.connect(self.on_load_data_clicked)
        input_layout.addWidget(self.load_data_button)
        
        input_layout.addStretch()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        self.order_info_label = QLabel("<–∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω>")
        self.order_info_label.setStyleSheet(WIDGET_CONFIGS["info_label"])
        input_layout.addWidget(self.order_info_label)
        
        layout.addLayout(input_layout)
        
        return group

    def create_profiles_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π (–ø—Ä–æ—Ñ–∏–ª–∏ + —Å–∫–ª–∞–¥—ã –ø—Ä–æ—Ñ–∏–ª–µ–π)"""
        main_widget = QWidget()
        layout = QVBoxLayout(main_widget)
        
        # –ì—Ä—É–ø–ø–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞
        profiles_group = QGroupBox("–ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞")
        profiles_layout = QVBoxLayout(profiles_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profiles_table = QTableWidget()
        setup_table_columns(self.profiles_table, [
            '–≠–ª–µ–º–µ–Ω—Ç', '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ—Ñ–∏–ª—è', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        ])
        
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        enable_table_sorting(self.profiles_table, True)
        self.profiles_table.setMinimumHeight(200)
        profiles_layout.addWidget(self.profiles_table)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü —Å–∫–ª–∞–¥–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π
        splitter = QSplitter(Qt.Vertical)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ
        remainders_group = QGroupBox("–°–∫–ª–∞–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        remainders_layout = QVBoxLayout(remainders_group)
        
        self.stock_remainders_table = QTableWidget()
        setup_table_columns(self.stock_remainders_table, [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–æ–∫'
        ])
        enable_table_sorting(self.stock_remainders_table, True)
        self.stock_remainders_table.setMinimumHeight(150)
        remainders_layout.addWidget(self.stock_remainders_table)
        
        # –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ
        materials_group = QGroupBox("–°–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        materials_layout = QVBoxLayout(materials_group)
        
        self.stock_materials_table = QTableWidget()
        setup_table_columns(self.stock_materials_table, [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç'
        ])
        enable_table_sorting(self.stock_materials_table, True)
        self.stock_materials_table.setMinimumHeight(150)
        materials_layout.addWidget(self.stock_materials_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(remainders_group)
        splitter.addWidget(materials_group)
        splitter.setSizes([150, 150])
        
        layout.addWidget(profiles_group)
        layout.addWidget(splitter)
        
        return main_widget

    def create_fabric_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–ª–æ—Ç–µ–Ω –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫"""
        main_widget = QWidget()
        layout = QVBoxLayout(main_widget)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–ª–æ—Ç–µ–Ω –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è
        fabric_group = QGroupBox("–ü–æ–ª–æ—Ç–Ω–∞ –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è")
        fabric_layout = QVBoxLayout(fabric_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª–æ—Ç–µ–Ω
        self.fabric_table = QTableWidget()
        setup_table_columns(self.fabric_table, [
            '–≠–ª–µ–º–µ–Ω—Ç', '–ê—Ä—Ç–∏–∫—É–ª –ø–æ–ª–æ—Ç–Ω–∞', '–®–∏—Ä–∏–Ω–∞ (–º–º)', '–í—ã—Å–æ—Ç–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        ])
        
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        enable_table_sorting(self.fabric_table, True)
        self.fabric_table.setMinimumHeight(200)
        fabric_layout.addWidget(self.fabric_table)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü —Å–∫–ª–∞–¥–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω
        splitter = QSplitter(Qt.Vertical)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ
        fabric_remainders_group = QGroupBox("–°–∫–ª–∞–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω")
        fabric_remainders_layout = QVBoxLayout(fabric_remainders_group)
        
        self.fabric_remainders_table = QTableWidget()
        setup_table_columns(self.fabric_remainders_table, [
            '–ê—Ä—Ç–∏–∫—É–ª', '–®–∏—Ä–∏–Ω–∞ (–º–º)', '–í—ã—Å–æ—Ç–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        ])
        enable_table_sorting(self.fabric_remainders_table, True)
        self.fabric_remainders_table.setMinimumHeight(150)
        fabric_remainders_layout.addWidget(self.fabric_remainders_table)
        
        # –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ
        fabric_materials_group = QGroupBox("–°–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω")
        fabric_materials_layout = QVBoxLayout(fabric_materials_group)
        
        self.fabric_materials_table = QTableWidget()
        setup_table_columns(self.fabric_materials_table, [
            '–ê—Ä—Ç–∏–∫—É–ª', '–®–∏—Ä–∏–Ω–∞ (–º–º)', '–í—ã—Å–æ—Ç–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        ])
        enable_table_sorting(self.fabric_materials_table, True)
        self.fabric_materials_table.setMinimumHeight(150)
        fabric_materials_layout.addWidget(self.fabric_materials_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(fabric_remainders_group)
        splitter.addWidget(fabric_materials_group)
        splitter.setSizes([150, 150])
        
        layout.addWidget(fabric_group)
        layout.addWidget(splitter)
        
        return main_widget

    def create_stock_groups(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Å–∫–ª–∞–¥–æ–≤ (–æ—Å—Ç–∞—Ç–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_widget = QWidget()
        layout = QVBoxLayout(main_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü —Å–∫–ª–∞–¥–æ–≤
        splitter = QSplitter(Qt.Vertical)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ
        remainders_group = QGroupBox("–°–∫–ª–∞–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        remainders_layout = QVBoxLayout(remainders_group)
        
        self.stock_remainders_table = QTableWidget()
        setup_table_columns(self.stock_remainders_table, [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–æ–∫'
        ])
        enable_table_sorting(self.stock_remainders_table, True)
        self.stock_remainders_table.setMinimumHeight(200)
        remainders_layout.addWidget(self.stock_remainders_table)
        
        # –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ
        materials_group = QGroupBox("–°–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        materials_layout = QVBoxLayout(materials_group)
        
        self.stock_materials_table = QTableWidget()
        setup_table_columns(self.stock_materials_table, [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç'
        ])
        enable_table_sorting(self.stock_materials_table, True)
        self.stock_materials_table.setMinimumHeight(200)
        materials_layout.addWidget(self.stock_materials_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(remainders_group)
        splitter.addWidget(materials_group)
        splitter.setSizes([300, 300])
        
        layout.addWidget(splitter)
        
        return main_widget



    def create_results_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        results_tab = QWidget()
        layout = QVBoxLayout(results_tab)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–≤–µ—Ä—Ö—É
        stats_group = self.create_statistics_group()
        layout.addWidget(stats_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_group = QGroupBox("–ü–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞")
        results_layout = QVBoxLayout(results_group)
        
        self.results_table = QTableWidget()
        setup_table_columns(self.results_table, [
            '–ê—Ä—Ç–∏–∫—É–ª', '–î–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª—ã—Å—Ç–æ–≤ —Ç–∞–∫–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –Ω–∞ —Ö–ª—ã—Å—Ç–µ', '–†–∞—Å–ø–∏–ª', '–î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ (–º–º)', '–î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ (%)', '–û—Ç—Ö–æ–¥ (–º–º)', '–û—Ç—Ö–æ–¥ (%)'
        ])
        
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        enable_table_sorting(self.results_table, True)
        self.results_table.setMinimumHeight(400)
        results_layout.addWidget(self.results_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        copy_buttons_layout = QHBoxLayout()
        copy_buttons_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        self.copy_table_button = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        self.copy_table_button.setStyleSheet(SPECIAL_BUTTON_STYLES["copy"])
        self.copy_table_button.clicked.connect(self.on_copy_table_clicked)
        self.copy_table_button.setToolTip("–ö–æ–ø–∏—Ä—É–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø–∏–ª–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        copy_buttons_layout.addWidget(self.copy_table_button)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
        self.copy_csv_button = QPushButton("üìä –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ CSV")
        self.copy_csv_button.setStyleSheet(SPECIAL_BUTTON_STYLES["copy_csv"])
        self.copy_csv_button.clicked.connect(self.on_copy_csv_clicked)
        self.copy_csv_button.setToolTip("–ö–æ–ø–∏—Ä—É–µ—Ç –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø–∏–ª–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")
        copy_buttons_layout.addWidget(self.copy_csv_button)
        
        copy_buttons_layout.addStretch()
        results_layout.addLayout(copy_buttons_layout)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        self.tabs.addTab(results_tab, "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")





    def create_visualization_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        print("üîß DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        self.visualization_tab = VisualizationTab()
        self.tabs.addTab(self.visualization_tab, "üëÅÔ∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è")
        print(f"üîß DEBUG: –í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞: {self.visualization_tab}")

    def create_statistics_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        group = QGroupBox("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        layout = QVBoxLayout(group)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_layout = QHBoxLayout()
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        left_layout = QFormLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_style = WIDGET_CONFIGS["stats_labels"]["default"]
        
        self.stats_total_stocks = QLabel("0")
        self.stats_total_stocks.setStyleSheet(stats_style)
        left_layout.addRow("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ö–ª—ã—Å—Ç–æ–≤:", self.stats_total_stocks)
        
        self.stats_total_cuts = QLabel("0")
        self.stats_total_cuts.setStyleSheet(stats_style)
        left_layout.addRow("–í—Å–µ–≥–æ —Ä–∞—Å–ø–∏–ª–æ–≤:", self.stats_total_cuts)
        
        self.stats_total_length = QLabel("0 –º")
        self.stats_total_length.setStyleSheet(stats_style)
        left_layout.addRow("–û–±—â–∞—è –¥–ª–∏–Ω–∞:", self.stats_total_length)
        
        # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π
        self.stats_distributed_pieces = QLabel("0/0")
        self.stats_distributed_pieces.setStyleSheet(stats_style)
        left_layout.addRow("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π:", self.stats_distributed_pieces)
        
        stats_layout.addLayout(left_layout)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        right_layout = QFormLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤ (–∫—Ä–∞—Å–Ω—ã–π)
        waste_style = WIDGET_CONFIGS["stats_labels"]["waste"]
        
        self.stats_waste_length = QLabel("0 –º")
        self.stats_waste_length.setStyleSheet(waste_style)
        right_layout.addRow("–û—Ç—Ö–æ–¥—ã:", self.stats_waste_length)
        
        self.stats_waste_percent = QLabel("0.00 %")
        self.stats_waste_percent.setStyleSheet(waste_style)
        right_layout.addRow("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤:", self.stats_waste_percent)
        
        self.stats_efficiency = QLabel("0.00 %")
        self.stats_efficiency.setStyleSheet(WIDGET_CONFIGS["stats_labels"]["remnants"])
        right_layout.addRow("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", self.stats_efficiency)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        self.stats_remainders_length = QLabel("0 –º")
        self.stats_remainders_length.setStyleSheet(WIDGET_CONFIGS["stats_labels"]["remnants"])
        right_layout.addRow("–î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:", self.stats_remainders_length)
        
        self.stats_remainders_percent = QLabel("0.00 %")
        self.stats_remainders_percent.setStyleSheet(WIDGET_CONFIGS["stats_labels"]["remnants"])
        right_layout.addRow("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤:", self.stats_remainders_percent)
        
        stats_layout.addLayout(right_layout)
        layout.addLayout(stats_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Altawin (MOS)
        upload_layout = QHBoxLayout()
        upload_layout.addStretch()
        
        # –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Altawin
        self.adjust_materials_checkbox = QCheckBox("–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Altawin")
        self.adjust_materials_checkbox.setChecked(False)
        self.adjust_materials_checkbox.setStyleSheet("QCheckBox { color: #e0e0e0; font-weight: bold; }")
        upload_layout.addWidget(self.adjust_materials_checkbox)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Altawin (MOS)
        self.upload_mos_to_altawin_button = QPushButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Altawin (MOS)")
        self.upload_mos_to_altawin_button.setStyleSheet(SPECIAL_BUTTON_STYLES["upload"])
        self.upload_mos_to_altawin_button.clicked.connect(self.on_upload_mos_clicked)
        self.upload_mos_to_altawin_button.setEnabled(False)
        upload_layout.addWidget(self.upload_mos_to_altawin_button)
        
        upload_layout.addStretch()
        
        layout.addLayout(upload_layout)
        
        return group

    # ========== –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ==========
    
    def on_load_data_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å API"""
        order_ids_text = self.order_id_input.text().strip()
        if not order_ids_text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ grorders_mos_id")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ grorderid –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É grorders_mos_id —á–µ—Ä–µ–∑ API
        try:
            mos_id = int(order_ids_text)
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "grorders_mos_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            return

        try:
            grorder_ids = self.api_client.get_grorders_by_mos_id(mos_id)
            if not grorder_ids:
                QMessageBox.warning(self, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "–ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É grorders_mos_id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö grorderid")
                return
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å grorderid: {str(e)}")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.load_data_button.setEnabled(False)
        self.load_data_button.setText("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏
        self.debug_dialog = DebugDialog(self)
        self.debug_dialog.show()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if self.data_load_thread and self.data_load_thread.isRunning():
            self.data_load_thread.terminate()
            self.data_load_thread.wait()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        self.data_load_thread = DataLoadThread(self.api_client, grorder_ids, mos_id)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Ç–æ–∫–∞ –∫ –º–µ—Ç–æ–¥–∞–º –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.data_load_thread.debug_step.connect(self._add_debug_step_safe)
        self.data_load_thread.error_occurred.connect(self._show_error_safe)
        self.data_load_thread.success_occurred.connect(self._show_success_safe)
        self.data_load_thread.data_loaded.connect(self._update_tables_safe)
        self.data_load_thread.finished_loading.connect(self._restore_button_safe)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        self.data_load_thread.start()

    # ========== –ú–ï–¢–û–î–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ==========
    
    def on_optimize_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("üîß DEBUG: === –ù–ê–ß–ê–õ–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===")
        print(f"üîß DEBUG: self.profiles: {len(self.profiles) if self.profiles else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"üîß DEBUG: self.fabric_details: {len(self.fabric_details) if self.fabric_details else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if not self.profiles:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞")
            return
            
        if not hasattr(self, 'stocks') or not self.stocks:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ö–ª—ã—Å—Ç–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ")
            return
        
        print(f"üîß DEBUG: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å {len(self.profiles)} –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏ {len(self.stocks)} —Ö–ª—ã—Å—Ç–∞–º–∏ (–¥–æ —Ñ–∏–ª—å—Ç—Ä–∞)")
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(False)
        self.optimize_button.setText("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
        
        # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if hasattr(self, 'visualization_tab'):
            self.visualization_tab.clear_visualization()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_dialog = ProgressDialog(self)
        self.progress_dialog.show()
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.current_settings.blade_width = self.optimization_params['blade_width']
        self.current_settings.min_remainder_length = self.optimization_params['min_remainder_length']
        self.current_settings.min_trash_mm = self.optimization_params['min_trash_mm']
        self.current_settings.begin_indent = self.optimization_params['begin_indent']
        self.current_settings.end_indent = self.optimization_params['end_indent']
        self.current_settings.max_waste_percent = self.optimization_params['max_waste_percent']
        self.current_settings.pair_optimization = self.optimization_params['pair_optimization']
        self.current_settings.use_remainders = self.optimization_params['use_remainders']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ö–ª—ã—Å—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        stocks_for_optimization = self.stocks
        try:
            if not self.current_settings.use_remainders:
                stocks_for_optimization = [s for s in self.stocks if not bool(getattr(s, 'is_remainder', False))]
        except Exception:
            stocks_for_optimization = self.stocks
        print(f"üîß DEBUG: –ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ {len(stocks_for_optimization)} —Ö–ª—ã—Å—Ç–æ–≤ (use_remainders={self.current_settings.use_remainders})")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –æ–Ω –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if self.optimization_thread and self.optimization_thread.isRunning():
            self.optimization_thread.terminate()
            self.optimization_thread.wait()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimization_thread = OptimizationThread(
            self.optimizer, 
            self.profiles, 
            stocks_for_optimization, 
            self.current_settings
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Ç–æ–∫–∞ –∫ –º–µ—Ç–æ–¥–∞–º –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.optimization_thread.debug_step.connect(self._add_debug_step_safe)
        self.optimization_thread.optimization_result.connect(self._handle_optimization_result)
        self.optimization_thread.optimization_error.connect(self._handle_optimization_error)
        self.optimization_thread.progress_updated.connect(self._update_progress)
        self.optimization_thread.finished_optimization.connect(self._close_progress_dialog)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.optimization_thread.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        print(f"üîß DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ fabric_details: {self.fabric_details}")
        if self.fabric_details:
            print(f"üîß DEBUG: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ —Å {len(self.fabric_details)} –¥–µ—Ç–∞–ª—è–º–∏")
            self._run_fiberglass_optimization()
        else:
            print("üîß DEBUG: fabric_details –ø—É—Å—Ç–æ–π, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")

    def _run_fiberglass_optimization(self):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞"""
        print("üîß DEBUG: === –ù–ê–ß–ê–õ–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –§–ò–ë–ï–†–ì–õ–ê–°–°–ê ===")
        print(f"üîß DEBUG: self.fabric_details: {self.fabric_details}")
        print(f"üîß DEBUG: len(self.fabric_details): {len(self.fabric_details) if self.fabric_details else 'N/A'}")
        print(f"üîß DEBUG: self.fabric_materials: {self.fabric_materials}")
        print(f"üîß DEBUG: self.fabric_remainders: {self.fabric_remainders}")

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
            print("üîß DEBUG: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ FiberglassDetail –≤ —Å–ª–æ–≤–∞—Ä–∏")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FiberglassDetail –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
            details_dict = []
            for detail in self.fabric_details:
                detail_dict = {
                    'orderitemsid': str(detail.orderitemsid),
                    'width': detail.width,
                    'height': detail.height,
                    'g_marking': detail.marking,
                    'total_qty': detail.quantity,
                    'goodsid': detail.goodsid,
                    'gp_marking': detail.marking,
                    'oi_name': detail.item_name,
                    'orderno': detail.orderno,  # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
                    'item_name': detail.item_name,  # –ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è
                    'izdpart': detail.izdpart  # –ù–æ–º–µ—Ä —á–∞—Å—Ç–∏ –∏–∑–¥–µ–ª–∏—è
                }
                details_dict.append(detail_dict)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FiberglassSheet –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏
            materials_dict = []
            for material in self.fabric_materials:
                material_dict = {
                    'id': str(material.goodsid),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º goodsid –∫–∞–∫ ID
                    'width': material.width,
                    'height': material.height,
                    'g_marking': material.marking,
                    'cost': 1500.0,  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    'goodsid': material.goodsid,
                    'quantity': material.quantity
                }
                materials_dict.append(material_dict)

            remainders_dict = []
            for remainder in self.fabric_remainders:
                remainder_dict = {
                    'id': str(remainder.remainder_id if remainder.remainder_id else remainder.goodsid),
                    'width': remainder.width,
                    'height': remainder.height,
                    'g_marking': remainder.marking,
                    'cost': 800.0,  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    'goodsid': remainder.goodsid,
                    'quantity': remainder.quantity
                }
                remainders_dict.append(remainder_dict)

            fabric_params = {
                'planar_min_remainder_width': self.optimization_params.get('planar_min_remainder_width', 500.0),
                'planar_min_remainder_height': self.optimization_params.get('planar_min_remainder_height', 500.0),
                'planar_cut_width': self.optimization_params.get('planar_cut_width', 1.0),
                'sheet_indent': self.optimization_params.get('sheet_indent', 15.0),
                'remainder_indent': self.optimization_params.get('remainder_indent', 15.0),
                'planar_max_waste_percent': self.optimization_params.get('planar_max_waste_percent', 5.0),
                'use_warehouse_remnants': self.optimization_params.get('use_warehouse_remnants', True),
                'allow_rotation': self.optimization_params.get('allow_rotation', True)
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
            def progress_callback(percent):
                """–ö–æ–ª–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞"""
                self._add_debug_step_safe(f"–§–∏–±–µ—Ä–≥–ª–∞—Å—Å: {percent:.1f}%")

            self.debug_step_signal.emit("ü™ü –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞...")

            print("üîß DEBUG: –í—ã–∑—ã–≤–∞–µ–º optimize_fiberglass —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            print(f"  - details: {len(details_dict)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"  - materials: {len(materials_dict)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"  - remainders: {len(remainders_dict)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"  - params: {fabric_params}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–¥–∏–Ω—É—é –∫–∞—Ä—Ç—É —è—á–µ–µ–∫ –ü–ï–†–ï–î –≤—ã–∑–æ–≤–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            cell_map = self._generate_cell_map()
            if not cell_map:
                self.debug_step_signal.emit("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É —è—á–µ–µ–∫ –¥–ª—è —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞.")

            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
            self.fabric_optimization_result = optimize_fiberglass(
                details=details_dict,
                materials=materials_dict,
                remainders=remainders_dict,
                params=fabric_params,
                progress_fn=progress_callback,
                cell_map=cell_map  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Ä—Ç—É —è—á–µ–µ–∫
            )

            print(f"üîß DEBUG: optimize_fiberglass –≤–µ—Ä–Ω—É–ª: {self.fabric_optimization_result}")
            print(f"üîß DEBUG: –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(self.fabric_optimization_result)}")
            if self.fabric_optimization_result:
                print(f"üîß DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç success: {getattr(self.fabric_optimization_result, 'success', 'NO ATTR')}")
                print(f"üîß DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç layouts: {getattr(self.fabric_optimization_result, 'layouts', 'NO ATTR')}")
                if hasattr(self.fabric_optimization_result, 'layouts') and self.fabric_optimization_result.layouts:
                    print(f"üîß DEBUG: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ layouts: {len(self.fabric_optimization_result.layouts)}")

            if self.fabric_optimization_result and self.fabric_optimization_result.success:
                self.debug_step_signal.emit("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if hasattr(self.fabric_optimization_result, 'layouts') and self.fabric_optimization_result.layouts:
                    total_remnants = sum(len(layout.get_remnants()) for layout in self.fabric_optimization_result.layouts)
                    total_waste = sum(len(layout.get_waste()) for layout in self.fabric_optimization_result.layouts)
                    total_details = sum(len(layout.get_placed_details()) for layout in self.fabric_optimization_result.layouts)
                    print(f"üîß DEBUG: –î–µ—Ç–∞–ª–∏: {total_details}, –û—Å—Ç–∞—Ç–∫–∏: {total_remnants}, –û—Ç—Ö–æ–¥—ã: {total_waste}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π layout –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                    for i, layout in enumerate(self.fabric_optimization_result.layouts):
                        remnants = layout.get_remnants()
                        if remnants:
                            print(f"üîß DEBUG: Layout {i+1} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(remnants)} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:")
                            for remnant in remnants:
                                print(f"    - –û—Å—Ç–∞—Ç–æ–∫: {remnant.width:.0f}x{remnant.height:.0f}–º–º, —Ç–∏–ø: {remnant.item_type}")

                # –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                self.debug_step_signal.emit(f"üîÑ –ò—Å–ø—É—Å–∫–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å {len(self.fabric_optimization_result.layouts) if self.fabric_optimization_result.layouts else 0} —Ä—É–ª–æ–Ω–∞–º–∏")
                self.update_visualization_signal.emit(self.fabric_optimization_result)
            else:
                error_msg = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
                if self.fabric_optimization_result and hasattr(self.fabric_optimization_result, 'message'):
                    error_msg = self.fabric_optimization_result.message
                self.debug_step_signal.emit(f"‚ùå {error_msg}")
                # –î–∞–∂–µ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
                self.update_visualization_signal.emit(self.fabric_optimization_result)

        except Exception as e:
            self.debug_step_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {str(e)}")
            import traceback
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {traceback.format_exc()}")

    def _update_visualization_tab(self, result):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            self.debug_step_signal.emit("üîß _update_visualization_tab –≤—ã–∑–≤–∞–Ω")
            if hasattr(self, 'visualization_tab') and self.visualization_tab is not None:
                self.debug_step_signal.emit("‚úÖ visualization_tab –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º set_optimization_result")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º QTimer –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤
                from PyQt5.QtCore import QTimer
                QTimer.singleShot(100, lambda: self._safe_set_visualization_result(result))
            else:
                self.debug_step_signal.emit("‚ùå visualization_tab –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                print(f"Available attributes: {[attr for attr in dir(self) if 'visual' in attr.lower()]}")
        except Exception as e:
            self.debug_step_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")

    def _safe_set_visualization_result(self, result):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            if hasattr(self, 'visualization_tab') and self.visualization_tab is not None:
                self.visualization_tab.set_optimization_result(result)
                if result and hasattr(result, 'layouts') and result.layouts:
                    self.debug_step_signal.emit(f"‚úÖ –í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(result.layouts)} —Ä—É–ª–æ–Ω–æ–≤")
                else:
                    self.debug_step_signal.emit("‚ÑπÔ∏è –í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            else:
                self.debug_step_signal.emit("‚ùå visualization_tab –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º –≤—ã–∑–æ–≤–µ")
        except Exception as e:
            self.debug_step_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –≤ _safe_set_visualization_result: {str(e)}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")

    def on_save_settings_clicked(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª
        settings = {
            'blade_width': self.blade_width.value(),
            'min_remainder_length': self.min_remainder_length.value(),
            'max_waste_percent': self.max_waste_percent.value(),
            'pair_optimization': self.pair_optimization.isChecked(),
            'use_remainders': self.use_remainders.isChecked()
        }
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ò–ì–ù–ê–õ–û–í ==========
    
    def _add_debug_step(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –æ—Ç–ª–∞–¥–∫–∏"""
        print(f"üîß DEBUG: {message}")
        self.debug_step_signal.emit(message)
    
    def _add_debug_step_safe(self, message):
        """Thread-safe –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –æ—Ç–ª–∞–¥–∫–∏"""
        if self.debug_dialog:
            self.debug_dialog.add_step(message)
    
    def _show_error_safe(self, title, message, icon):
        """Thread-safe –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        print(f"‚ùå {title}: {message}")
        QMessageBox.critical(self, title, message)
    
    def _show_success_safe(self):
        """Thread-safe –ø–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞"""
        if self.debug_dialog:
            QTimer.singleShot(2000, self.debug_dialog.close)
    
    def _update_tables_safe(self, profiles, stock_data, fabric_details, fabric_stock_data):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.profiles = profiles
            self.stock_remainders = stock_data.get('remainders', [])
            self.stock_materials = stock_data.get('materials', [])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–æ—Ç–µ–Ω
            print(f"üîß DEBUG: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º fabric_details. –ë—ã–ª–æ: {len(getattr(self, 'fabric_details', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            self.fabric_details = fabric_details  # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º self.fabric_details!
            self.current_fabric_details = fabric_details
            print(f"üîß DEBUG: –ü–æ—Å–ª–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è: {len(self.fabric_details)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ self.fabric_details")
            print(f"üîß DEBUG: self.fabric_details is None: {self.fabric_details is None}")
            if self.fabric_details:
                print(f"üîß DEBUG: –¢–∏–ø self.fabric_details: {type(self.fabric_details)}")
            self.fabric_remainders = fabric_stock_data.get('remainders', [])
            self.fabric_materials = fabric_stock_data.get('materials', [])
            self.current_fabric_remainders = fabric_stock_data.get('remainders', [])
            self.current_fabric_materials = fabric_stock_data.get('materials', [])




            
            # –ü–∞—Ä—Å–∏–º ID –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            order_ids_text = self.order_id_input.text().strip()
            order_ids = []
            if order_ids_text:
                for order_id_str in order_ids_text.split(','):
                    order_id = order_id_str.strip()
                    if order_id and order_id.isdigit():
                        order_ids.append(int(order_id))
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ stocks –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self.stocks = []
            stock_id = 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            for remainder in self.stock_remainders:
                # –î–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ–∑–¥–∞–µ–º –û–¢–î–ï–õ–¨–ù–´–ô –æ–±—ä–µ–∫—Ç Stock –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ª–∫–∏
                # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!
                for i in range(remainder.quantity_pieces):
                    stock = Stock(
                        id=stock_id,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ª–∫–∏
                        profile_id=1,  # –ë–∞–∑–æ–≤—ã–π ID
                        length=remainder.length,
                        quantity=1,  # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∫–∞–∂–¥–∞—è –ø–∞–ª–∫–∞ = 1 —à—Ç—É–∫–∞
                        location="–û—Å—Ç–∞—Ç–∫–∏",
                        is_remainder=True
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç profile_code –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ
                    stock.profile_code = remainder.profile_code
                    # –î–æ–±–∞–≤–ª—è–µ–º warehouseremaindersid –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    stock.warehouseremaindersid = getattr(remainder, 'warehouseremaindersid', None)
                    # –î–æ–±–∞–≤–ª—è–µ–º groupgoods_thick –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
                    stock.groupgoods_thick = getattr(remainder, 'groupgoods_thick', 6000)
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                    stock.instance_id = i + 1
                    self.stocks.append(stock)
                    stock_id += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            for material in self.stock_materials:
                stock = Stock(
                    id=stock_id,
                    profile_id=1,  # –ë–∞–∑–æ–≤—ã–π ID
                    length=material.length,
                    quantity=material.quantity_pieces,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–æ–∫ —ç—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                    location="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
                    is_remainder=False
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç profile_code –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ
                stock.profile_code = material.profile_code
                # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ –∏–º–µ—é—Ç warehouseremaindersid
                stock.warehouseremaindersid = None
                # –î–æ–±–∞–≤–ª—è–µ–º groupgoods_thick –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
                stock.groupgoods_thick = getattr(material, 'groupgoods_thick', 6000)
                self.stocks.append(stock)
                stock_id += 1
            
            print(f"üîß DEBUG: –°–æ–∑–¥–∞–Ω–æ {len(self.stocks)} —Ö–ª—ã—Å—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
            fill_profiles_table(self.profiles_table, [p.__dict__ for p in profiles])
            fill_stock_remainders_table(self.stock_remainders_table, [r.__dict__ for r in self.stock_remainders])
            fill_stock_materials_table(self.stock_materials_table, [m.__dict__ for m in self.stock_materials])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª–æ—Ç–µ–Ω
            # –î–ª—è –ø–æ–ª–æ—Ç–µ–Ω –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π, –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            fill_fabric_details_table(self.fabric_table, [f.__dict__ for f in fabric_details])
            fill_fabric_remainders_table(self.fabric_remainders_table, [r.__dict__ for r in self.fabric_remainders])
            fill_fabric_materials_table(self.fabric_materials_table, [m.__dict__ for m in self.fabric_materials])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö
            total_stock_items = len(self.stock_remainders) + len(self.stock_materials)
            total_fabric_stock_items = len(self.fabric_remainders) + len(self.fabric_materials)
            if len(order_ids) == 1:
                order_info = f"–ó–∞–∫–∞–∑ {order_ids[0]}: {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π, {len(fabric_details)} –ø–æ–ª–æ—Ç–µ–Ω, {total_stock_items} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π, {total_fabric_stock_items} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω"
            else:
                order_info = f"–ó–∞–∫–∞–∑—ã {', '.join(map(str, order_ids))}: {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π, {len(fabric_details)} –ø–æ–ª–æ—Ç–µ–Ω, {total_stock_items} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π, {total_fabric_stock_items} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω"
            
            self.order_info_label.setText(order_info)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self.optimize_button.setEnabled(True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            QTimer.singleShot(500, lambda: [
                update_table_column_widths(self.profiles_table),
                update_table_column_widths(self.stock_remainders_table),
                update_table_column_widths(self.stock_materials_table),
                update_table_column_widths(self.fabric_table),
                update_table_column_widths(self.fabric_remainders_table),
                update_table_column_widths(self.fabric_materials_table)
            ])
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def _restore_button_safe(self):
        """Thread-safe –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
        self.load_data_button.setEnabled(True)
        self.load_data_button.setText("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    def _handle_optimization_result(self, result):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            self.optimization_result = result
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.optimize_button.setEnabled(True)
            self.optimize_button.setText("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_statistics(result)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if result.cut_plans:
                fill_optimization_results_table(self.results_table, result.cut_plans)
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin (MOS)
            self.upload_mos_to_altawin_button.setEnabled(True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            if hasattr(self, 'fabric_optimization_result') and self.fabric_optimization_result:
                self.update_visualization_signal.emit(self.fabric_optimization_result)
            else:
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –Ω–µ—Ç, –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–∫–ª–∞–¥–∫–∏
                self.update_visualization_signal.emit(None)

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.tabs.setCurrentIndex(1)
            
            cut_plans_count = len(result.cut_plans) if result.cut_plans else 0
            print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ö–ª—ã—Å—Ç–æ–≤: {cut_plans_count}")
            
            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
            if result.message:
                if "–ù–ï–•–í–ê–¢–ö–ê –ú–ê–¢–ï–†–ò–ê–õ–û–í" in result.message:
                    QMessageBox.warning(
                        self,
                        "–ù–µ—Ö–≤–∞—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ",
                        result.message
                    )
                elif "–¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏" in result.message:
                    QMessageBox.critical(
                        self,
                        "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞",
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ª–æ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏:\n\n{result.message}\n\n"
                        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤\n"
                        f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π warehouseremaindersid\n"
                        f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã"
                    )
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            self._handle_optimization_error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
    
    def _handle_optimization_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(True)
        self.optimize_button.setText("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {error_msg}")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n\n{error_msg}")
    
    def _update_progress(self, percent):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if self.progress_dialog:
            self.progress_dialog.set_progress(percent)
    
    def _close_progress_dialog(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            if self.progress_dialog:
                self.progress_dialog.force_close()
                self.progress_dialog = None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    def _update_statistics(self, result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats = result.get_statistics()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
            total_remainders = 0
            total_length = stats.get('total_length', 0)
            
            for plan in result.cut_plans:
                remainder = getattr(plan, 'remainder', None)
                if remainder and remainder > 0:
                    total_remainders += remainder
            
            remainders_percent = (total_remainders / total_length * 100) if total_length > 0 else 0
            
            self.stats_total_stocks.setText(str(stats.get('total_stocks', 0)))
            self.stats_total_cuts.setText(str(stats.get('total_cuts', 0)))
            self.stats_total_length.setText(f"{stats.get('total_length', 0) / 1000:.1f} –º")
            self.stats_waste_length.setText(f"{stats.get('total_waste', 0) / 1000:.1f} –º")
            self.stats_waste_percent.setText(f"{stats.get('waste_percent', 0):.2f} %")
            self.stats_efficiency.setText(f"{100 - stats.get('waste_percent', 0):.2f} %")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            self.stats_remainders_length.setText(f"{total_remainders / 1000:.1f} –º")
            self.stats_remainders_percent.setText(f"{remainders_percent:.2f} %")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            total_pieces_needed = int(stats.get('total_pieces_needed', 0))
            total_pieces_placed = int(stats.get('total_pieces_placed', 0))
            
                        # –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º –∑–∞–Ω–æ–≤–æ
            if total_pieces_needed == 0 and self.profiles:
                try:
                    total_pieces_needed = sum(int(getattr(p, 'quantity', 0)) for p in self.profiles)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ needed pieces: {e}")
                    total_pieces_needed = 0

            if total_pieces_placed == 0 and getattr(result, 'cut_plans', None):
                try:
                    total_pieces_placed = 0
                    for plan in result.cut_plans:
                        plan_count = int(getattr(plan, 'count', 1))
                        plan_pieces = plan.get_cuts_count()
                        total_pieces_placed += plan_pieces * plan_count
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ placed pieces: {e}")
                    total_pieces_placed = 0

            self.stats_distributed_pieces.setText(f"{total_pieces_placed}/{total_pieces_needed}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.stats_total_stocks.setText("0")
            self.stats_total_cuts.setText("0")
            self.stats_total_length.setText("0.0 –º")
            self.stats_waste_length.setText("0.0 –º")
            self.stats_waste_percent.setText("0.00 %")
            self.stats_efficiency.setText("100.00 %")
            self.stats_remainders_length.setText("0.0 –º")
            self.stats_remainders_percent.setText("0.00 %")
            self.stats_distributed_pieces.setText("0/0")

    # ========== –ú–ï–¢–û–î–´ –ú–ï–ù–Æ ==========
    
    def new_optimization(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        self.order_id_input.clear()
        clear_table(self.profiles_table)
        clear_table(self.stock_remainders_table)
        clear_table(self.stock_materials_table)
        clear_table(self.fabric_table)
        clear_table(self.fabric_remainders_table)
        clear_table(self.fabric_materials_table)
        clear_table(self.results_table)
        self.optimization_result = None

        self.upload_mos_to_altawin_button.setEnabled(False)
        self.optimize_button.setEnabled(False)
        self.order_info_label.setText("<–∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω>")



        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.tabs.setCurrentIndex(0)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.adjust_materials_checkbox.setChecked(False)

    def on_upload_mos_clicked(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ OPTIMIZED_MOS/OPTDETAIL_MOS"""
        if not self.optimization_result:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        order_ids_text = self.order_id_input.text().strip()
        try:
            grorders_mos_id = int(order_ids_text)
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "grorders_mos_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ Altawin
        adjust_materials = self.adjust_materials_checkbox.isChecked()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_message = (
            "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã MOS?\n\n"
            f"GRORDERS_MOS_ID: {grorders_mos_id}\n"
            f"–ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(self.optimization_result.cut_plans)}"
        )
        
        if adjust_materials:
            confirm_message += "\n\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–∏—Ö–æ–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Altawin!"
            confirm_message += "\n–≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."

        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ (MOS)",
            confirm_message,
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply != QMessageBox.Yes:
            return

        try:
            self.status_bar.showMessage("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã MOS...")
            self.upload_mos_to_altawin_button.setEnabled(False)

            # –®–ê–ì 1: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã OPTIMIZED_MOS –∏ OPTDETAIL_MOS
            self.status_bar.showMessage("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã MOS...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏–ª–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            blade_width = int(self.optimization_params.get('blade_width', 5))
            min_remainder = int(self.optimization_params.get('min_remainder_length', 300))

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            upload_success = self.api_client.upload_mos_data(
                grorders_mos_id=grorders_mos_id,
                result=self.optimization_result,
                profiles=self.profiles,
                blade_width_mm=blade_width,
                min_remainder_mm=min_remainder,
                begin_indent_mm=int(self.optimization_params.get('begin_indent', 10)),
                end_indent_mm=int(self.optimization_params.get('end_indent', 10)),
                min_trash_mm=int(self.optimization_params.get('min_trash_mm', 50)),
            )

            if not upload_success:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã MOS")
                self.status_bar.showMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return

            self.status_bar.showMessage("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
            
            # –®–ê–ì 2: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if adjust_materials:
                try:
                    self.status_bar.showMessage("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Altawin...")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –∏ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
                    used_materials = []
                    business_remainders = []
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    print(f"üîß DEBUG: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(self.optimization_result.cut_plans)} –ø–ª–∞–Ω–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
                    print("üîß DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç count –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞:")
                    for i, plan in enumerate(self.optimization_result.cut_plans):
                        count = getattr(plan, 'count', 1)
                        print(f"   –ü–ª–∞–Ω {i+1}: count={count}")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ç–∏–ø—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    # –ö–ª—é—á: (goodsid, length, is_remainder) - —É–±–∏—Ä–∞–µ–º warehouseremaindersid –∏–∑ –∫–ª—é—á–∞
                    materials_by_size = {}  # –ö–ª—é—á: (goodsid, length, is_remainder)
                    
                    for plan_index, plan in enumerate(self.optimization_result.cut_plans):
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–ª—ã—Å—Ç–µ
                        stock_length = getattr(plan, 'stock_length', 0)
                        is_remainder = getattr(plan, 'is_remainder', False)
                        warehouseremaindersid = getattr(plan, 'warehouseremaindersid', None)
                        plan_count = getattr(plan, 'count', 1)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª—ã—Å—Ç–æ–≤ –≤ –ø–ª–∞–Ω–µ
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º goodsid (–∏—Å–ø–æ–ª—å–∑—É–µ–º profile_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞)
                        goodsid = None
                        if plan.cuts and len(plan.cuts) > 0:
                            goodsid = plan.cuts[0].get('profile_id')
                        
                        print(f"üîß DEBUG: –ü–ª–∞–Ω {plan_index + 1}: goodsid={goodsid}, length={stock_length}, is_remainder={is_remainder}, warehouseremaindersid={warehouseremaindersid}, count={plan_count}")
                        
                        if goodsid:
                            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ë–ï–ó warehouseremaindersid
                            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ö–ª—ã—Å—Ç—ã –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞
                            material_key = (goodsid, stock_length, is_remainder)
                            
                            if material_key not in materials_by_size:
                                materials_by_size[material_key] = {
                                    'goodsid': goodsid,
                                    'length': stock_length,
                                    'quantity': 0,  # –ë—É–¥–µ–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                    'is_remainder': is_remainder,
                                    'warehouseremaindersid': warehouseremaindersid  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                }
                            
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª—ã—Å—Ç–æ–≤ –≤ –ø–ª–∞–Ω–µ
                            materials_by_size[material_key]['quantity'] += plan_count
                            print(f"üîß DEBUG: –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–ª—é—á–∞ {material_key}: —Ç–µ–ø–µ—Ä—å {materials_by_size[material_key]['quantity']}—à—Ç (–¥–æ–±–∞–≤–ª–µ–Ω–æ {plan_count}—à—Ç)")
                    
                    # –¢–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º used_materials —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                    print("üîß DEBUG: –ò—Ç–æ–≥–æ–≤–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
                    for key, data in materials_by_size.items():
                        print(f"   –ö–ª—é—á {key}: goodsid={data['goodsid']}, length={data['length']}, quantity={data['quantity']}—à—Ç, is_remainder={data['is_remainder']}")
                    
                    used_materials = []
                    for material_data in materials_by_size.values():
                        # –ü–æ–ª—É—á–∞–µ–º groupgoods_thick –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                        profile_code = None
                        for profile in self.profiles:
                            if profile.id == material_data['goodsid']:
                                profile_code = profile.profile_code
                                break
                        
                        groupgoods_thick = 6000  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 6000 –º–º
                        if profile_code:
                            for profile in self.profiles:
                                if profile.profile_code == profile_code:
                                    groupgoods_thick = getattr(profile, 'groupgoods_thick', 6000)
                                    break
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        material_data['groupgoods_thick'] = groupgoods_thick
                        
                        if material_data['is_remainder'] and material_data['warehouseremaindersid']:
                            print(f"üîß DEBUG: –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {material_data['warehouseremaindersid']}: quantity={material_data['quantity']}—à—Ç")
                        else:
                            print(f"üîß DEBUG: –¶–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç: quantity={material_data['quantity']}—à—Ç")
                        
                        used_materials.append(material_data)
                        
                    # –¢–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º business_remainders —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É
                    remainders_by_size = {}  # –ö–ª—é—á: (goodsid, length)
                    
                    for plan in self.optimization_result.cut_plans:
                        remainder = getattr(plan, 'remainder', None)
                        if remainder and remainder > 0:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º goodsid (–∏—Å–ø–æ–ª—å–∑—É–µ–º profile_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞)
                            goodsid = None
                            if plan.cuts and len(plan.cuts) > 0:
                                goodsid = plan.cuts[0].get('profile_id')
                            
                            if goodsid:
                                remainder_key = (goodsid, remainder)
                                if remainder_key not in remainders_by_size:
                                    remainders_by_size[remainder_key] = {
                                        'goodsid': goodsid,
                                        'length': remainder,
                                        'quantity': 0
                                    }
                                remainders_by_size[remainder_key]['quantity'] += 1
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                    business_remainders = list(remainders_by_size.values())
                    
                    print(f"üîß DEBUG: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(used_materials)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ {len(business_remainders)} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤")
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ business_remainders
                    print("üîß DEBUG: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è business_remainders:")
                    for remainder in business_remainders:
                        print(f"   goodsid={remainder['goodsid']}, length={remainder['length']}, quantity={remainder['quantity']}—à—Ç")
                    
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ used_materials
                    print("üîß DEBUG: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è used_materials:")
                    for material in used_materials:
                        print(f"   goodsid={material['goodsid']}, length={material['length']}, quantity={material['quantity']}—à—Ç, groupgoods_thick={material.get('groupgoods_thick', 'N/A')}, is_remainder={material.get('is_remainder', False)}, warehouseremaindersid={material.get('warehouseremaindersid', 'N/A')}")
                    
                    print("üîß DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:")
                    print(f"   grorders_mos_id: {grorders_mos_id}")
                    print(f"   used_materials: {len(used_materials)} –∑–∞–ø–∏—Å–µ–π")
                    print(f"   business_remainders: {len(business_remainders)} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ù–û–í–û–ï: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
                    used_fiberglass_sheets = []
                    new_fiberglass_remainders = []

                    if self.fabric_optimization_result and self.fabric_optimization_result.layouts:
                        print("üîß DEBUG: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
                        # 1. –°–æ–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏
                        for layout in self.fabric_optimization_result.layouts:
                            sheet = layout.sheet
                            used_sheet_data = {
                                "goodsid": sheet.goodsid,
                                "marking": sheet.marking,
                                "width": sheet.width,
                                "height": sheet.height,
                                "is_remainder": sheet.is_remainder,
                                "remainder_id": sheet.remainder_id,
                                "quantity": 1 # –ö–∞–∂–¥—ã–π layout - —ç—Ç–æ –æ–¥–∏–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ª–∏—Å—Ç/–æ—Å—Ç–∞—Ç–æ–∫
                            }
                            used_fiberglass_sheets.append(used_sheet_data)

                        # 2. –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
                        for layout in self.fabric_optimization_result.layouts:
                             for item in layout.get_remnants():
                                new_remainder_data = {
                                    "goodsid": layout.sheet.goodsid, # goodsid –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–∏—Å—Ç–∞
                                    "marking": layout.sheet.marking,
                                    "width": item.width,
                                    "height": item.height,
                                    "quantity": 1 # –ö–∞–∂–¥—ã–π –æ—Å—Ç–∞—Ç–æ–∫ - —ç—Ç–æ –æ–¥–Ω–∞ —à—Ç—É–∫–∞
                                }
                                new_fiberglass_remainders.append(new_remainder_data)
                        
                        print(f"   used_fiberglass_sheets: {len(used_fiberglass_sheets)} –∑–∞–ø–∏—Å–µ–π")
                        print(f"   new_fiberglass_remainders: {len(new_fiberglass_remainders)} –∑–∞–ø–∏—Å–µ–π")

                    result = self.api_client.adjust_materials_altawin(
                        grorders_mos_id, 
                        used_materials, 
                        business_remainders,
                        used_fiberglass_sheets,
                        new_fiberglass_remainders
                    )
                    
                    if result.get('success'):
                        outlay_id = result.get('outlay_id')
                        supply_id = result.get('supply_id')
                        
                        self.status_bar.showMessage(f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
                        info_msg = (
                            f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                            f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {outlay_id}\n"
                            f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥: {supply_id}\n\n"
                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–ø—Ä–æ—Ñ–∏–ª–∏) –≤ —Å–ø–∏—Å–∞–Ω–∏–µ: {len(used_materials)}\n"
                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–ø—Ä–æ—Ñ–∏–ª–∏) –≤ –ø—Ä–∏—Ö–æ–¥: {len(business_remainders)}\n"
                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å) –≤ —Å–ø–∏—Å–∞–Ω–∏–µ: {len(used_fiberglass_sheets)}\n"
                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å) –≤ –ø—Ä–∏—Ö–æ–¥: {len(new_fiberglass_remainders)}"
                        )
                        QMessageBox.information(self, "–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", info_msg)
                    else:
                        error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                        QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {error_msg}")
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                        
                except Exception as e:
                    QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {str(e)}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
                    self.status_bar.showMessage("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ –æ—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

            # –®–ê–ì 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫
            self._auto_distribute_cells(grorders_mos_id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_msg = "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—ã OPTIMIZED_MOS –∏ OPTDETAIL_MOS"
            if adjust_materials:
                success_msg += "\n\n‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ Altawin —Ç–∞–∫–∂–µ –±—ã–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã"
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", success_msg)
            self.status_bar.showMessage("MOS –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MOS: {str(e)}")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MOS –¥–∞–Ω–Ω—ã—Ö")
        finally:
            self.upload_mos_to_altawin_button.setEnabled(True)
    
    def _auto_distribute_cells(self, grorders_mos_id):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            self.status_bar.showMessage("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —è—á–µ–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cell_map = self._generate_cell_map()

            if not cell_map:
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫.")
                self.status_bar.showMessage("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫")
                return

            # –í—ã–∑—ã–≤–∞–µ–º API —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
            result = self.api_client.distribute_cell_numbers(grorders_mos_id, cell_map=cell_map)

            if result.get("success"):
                processed_items = result.get("processed_items", 0)
                total_time = result.get("performance", {}).get("total_time", 0)
                
                print(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –¥–ª—è {processed_items} –ø—Ä–æ–µ–º–æ–≤ –∑–∞ {total_time} —Å–µ–∫.")
                self.status_bar.showMessage(f"–Ø—á–µ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã ({processed_items} –ø—Ä–æ–µ–º–æ–≤)")
                
            else:
                error_msg = result.get("error", result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫:\n{error_msg}")
                self.status_bar.showMessage("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫")
                
        except Exception as e:
            QMessageBox.critical(self, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è—á–µ–µ–∫:\n{str(e)}")
            self.status_bar.showMessage("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫")

    def _generate_cell_map(self) -> Dict[str, int]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        
        –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã (orderitemsid, izdpart) –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞,
        —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏.
        
        Returns:
            Dict[str, int]: –ö–∞—Ä—Ç–∞, –≥–¥–µ –∫–ª—é—á - f"{orderitemsid}_{izdpart}", –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏.
        """
        unique_items = set()

        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π
        if self.profiles:
            for profile in self.profiles:
                if hasattr(profile, 'orderitemsid') and profile.orderitemsid is not None:
                    # izdpart –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—ã—Ç—å None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                    izdpart = getattr(profile, 'izdpart', '') or ''
                    unique_items.add((profile.orderitemsid, izdpart))

        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
        if self.fabric_details:
            for detail in self.fabric_details:
                if hasattr(detail, 'orderitemsid') and detail.orderitemsid is not None:
                    izdpart = getattr(detail, 'izdpart', '') or ''
                    unique_items.add((detail.orderitemsid, izdpart))

        if not unique_items:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —è—á–µ–µ–∫.")
            return {}

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ orderitemsid, –∑–∞—Ç–µ–º –ø–æ izdpart
        sorted_items = sorted(list(unique_items), key=lambda x: (x[0], x[1]))

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É: {–∫–ª—é—á: –Ω–æ–º–µ—Ä_—è—á–µ–π–∫–∏}
        cell_map = {f"{orderitemsid}_{izdpart}": i + 1 for i, (orderitemsid, izdpart) in enumerate(sorted_items)}

        if cell_map:
            print(f"‚úÖ –ö–∞—Ä—Ç–∞ —è—á–µ–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞, {len(cell_map)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, (key, value) in enumerate(cell_map.items()):
                if i >= 5: break
                print(f"   - {key}: {value}")

        return cell_map


    def on_distribute_cells_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫"""
        order_ids_text = self.order_id_input.text().strip()
        if not order_ids_text:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ grorders_mos_id")
            return

        try:
            grorders_mos_id = int(order_ids_text)
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "grorders_mos_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫",
            f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è—á–µ–π–∫–∏ –¥–ª—è grorders_mos_id: {grorders_mos_id}?\n\n"
            f"–≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ –¥–ª—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤.",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No,
        )

        if reply != QMessageBox.Yes:
            return

        try:
            self.status_bar.showMessage("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫...")
            
            # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫
            result = self.api_client.distribute_cell_numbers(grorders_mos_id)
            
            if result.get("success"):
                processed_items = result.get("processed_items", 0)
                total_time = result.get("performance", {}).get("total_time", 0)
                
                success_msg = (
                    f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤: {processed_items}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time} —Å–µ–∫"
                )
                
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", success_msg)
                self.status_bar.showMessage(f"–Ø—á–µ–π–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã ({processed_items} –ø—Ä–æ–µ–º–æ–≤)")
                
            else:
                error_msg = result.get("error", result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫:\n{error_msg}")
                self.status_bar.showMessage("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫")
                
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫:\n{str(e)}")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫")
        finally:
            pass







    def show_optimization_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        dialog = OptimizationSettingsDialog(self, self.optimization_params)
        if dialog.exec_() == QDialog.Accepted:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            self.optimization_params = dialog.get_settings()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self.current_settings.blade_width = self.optimization_params['blade_width']
            self.current_settings.min_remainder_length = self.optimization_params['min_remainder_length'] 
            self.current_settings.max_waste_percent = self.optimization_params['max_waste_percent']
            self.current_settings.pair_optimization = self.optimization_params['pair_optimization']
            self.current_settings.use_remainders = self.optimization_params['use_remainders']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            QMessageBox.information(self, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 
                "–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
    
    def show_api_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
        dialog = ApiSettingsDialog(self, {})
        if dialog.exec_() == QDialog.Accepted:
            settings = dialog.get_settings()
            # TODO: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
            QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
            "Linear Optimizer v1.0\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ Glass Optimizer\n\n"
            "¬© 2024 Your Company")

    def set_order_id(self, order_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∑–∞–∫–∞–∑–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        self.order_id_input.setText(str(order_id))
        self.on_load_data_clicked()
    
    def set_order_ids(self, order_ids: list):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID –∑–∞–∫–∞–∑–æ–≤"""
        order_ids_str = ", ".join(map(str, order_ids))
        self.order_id_input.setText(order_ids_str)
        self.on_load_data_clicked()

    def on_copy_table_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            if copy_table_to_clipboard(self.results_table):
                self.status_bar.showMessage("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
                QMessageBox.information(self, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –µ—ë –≤ Excel, Word –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç.")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
            self.status_bar.showMessage("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")

    def on_copy_csv_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"""
        try:
            if copy_table_as_csv(self.results_table):
                self.status_bar.showMessage("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∫–∞–∫ CSV")
                QMessageBox.information(self, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ CSV", "–¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –µ—ë –≤ Excel, –≥–¥–µ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—Å—è –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º.")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ CSV. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ CSV: {str(e)}")
            self.status_bar.showMessage("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∫–∞–∫ CSV")









    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        reply = QMessageBox.question(self, '–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã', 
                                   '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
                                   QMessageBox.Yes | QMessageBox.No, 
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()