#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–¥–µ–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

def test_step(step_name, test_func):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–≥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"üîç {step_name}...")
    try:
        result = test_func()
        print(f"‚úÖ {step_name} - –£–°–ü–ï–•")
        return True, result
    except Exception as e:
        print(f"‚ùå {step_name} - –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print(f"   –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return False, None

def main():
    print("üîß –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ LINEAR OPTIMIZER")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
    success, _ = test_step("–ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π", lambda: __import__('core.models', fromlist=['Profile', 'Stock', 'CutPlan', 'OptimizationResult']))
    if not success:
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
    def create_models():
        from core.models import Profile, Stock
        profile = Profile(id=1, order_id=1, element_name="–¢–µ—Å—Ç", profile_code="P001", length=1000, quantity=1)
        stock = Stock(id=1, profile_id=1, length=2000, quantity=1)
        return profile, stock
    
    success, models = test_step("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", create_models)
    if not success:
        return False
    
    # –®–∞–≥ 3: –ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    success, _ = test_step("–ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞", lambda: __import__('core.optimizer', fromlist=['SimpleOptimizer']))
    if not success:
        return False
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    def create_optimizer():
        from core.optimizer import SimpleOptimizer
        return SimpleOptimizer()
    
    success, optimizer = test_step("–°–æ–∑–¥–∞–Ω–∏–µ SimpleOptimizer", create_optimizer)
    if not success:
        return False
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    def run_optimization():
        profile, stock = models
        return optimizer.optimize([profile], [stock])
    
    success, result = test_step("–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", run_optimization)
    if not success:
        return False
    
    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    def check_result():
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–µ–Ω: {result.success}")
        print(f"   –ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(result.cut_plans)}")
        if result.cut_plans:
            plan = result.cut_plans[0]
            print(f"   –ü–ª–∞–Ω: –¥–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞={plan.stock_length}, –æ—Ç—Ö–æ–¥—ã={plan.waste}")
            print(f"   –†–∞—Å–ø–∏–ª—ã: {plan.cuts}")
        return True
    
    success, _ = test_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", check_result)
    if not success:
        return False
    
    # –®–∞–≥ 7: –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ CutPlan
    def test_cutplan_methods():
        if result.cut_plans:
            plan = result.cut_plans[0]
            used_length = plan.get_used_length()
            total_pieces = plan.get_total_pieces_length()
            cuts_count = plan.get_cuts_count()
            is_valid = plan.validate()
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {used_length}")
            print(f"   –û–±—â–∞—è –¥–ª–∏–Ω–∞ –∫—É—Å–∫–æ–≤: {total_pieces}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤: {cuts_count}")
            print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {is_valid}")
        return True
    
    success, _ = test_step("–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ CutPlan", test_cutplan_methods)
    if not success:
        return False
    
    # –®–∞–≥ 8: –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def test_statistics():
        stats = result.get_statistics()
        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        return True
    
    success, _ = test_step("–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", test_statistics)
    if not success:
        return False
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    return True

if __name__ == "__main__":
    try:
        if main():
            print("\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ GUI.")
        else:
            print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ.")
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()