#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import traceback
import os

def safe_test(name, test_func):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    print(f"\nüîç {name}")
    print("-" * 40)
    try:
        result = test_func()
        print(f"‚úÖ {name} - –£–°–ü–ï–•")
        return True, result
    except Exception as e:
        print(f"‚ùå {name} - –û–®–ò–ë–ö–ê: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False, None

def test_basic_imports():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    from core.models import Profile, Stock, CutPlan, OptimizationResult
    from core.optimizer import SimpleOptimizer, LinearOptimizer, OptimizationSettings
    return "–ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã"

def test_data_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    from core.models import Profile, Stock
    
    profile = Profile(
        id=1, 
        order_id=1, 
        element_name="–¢–µ—Å—Ç–æ–≤–∞—è –¥–µ—Ç–∞–ª—å", 
        profile_code="TEST001", 
        length=1500.0, 
        quantity=2
    )
    
    stock = Stock(
        id=1,
        profile_id=1,
        length=3500.0,
        quantity=1
    )
    
    return profile, stock

def test_simple_optimization():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    from core.optimizer import SimpleOptimizer
    from core.models import Profile, Stock
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    profiles = [
        Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å1", profile_code="P001", length=1000, quantity=1),
        Profile(id=2, order_id=1, element_name="–î–µ—Ç–∞–ª—å2", profile_code="P001", length=800, quantity=1)
    ]
    
    stocks = [
        Stock(id=1, profile_id=1, length=2500, quantity=1)
    ]
    
    optimizer = SimpleOptimizer()
    result = optimizer.optimize(profiles, stocks)
    
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –ü–ª–∞–Ω–æ–≤: {len(result.cut_plans)}")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
    
    return result

def test_linear_optimizer():
    """–¢–µ—Å—Ç LinearOptimizer"""
    from core.optimizer import LinearOptimizer
    from core.models import Profile, Stock
    
    profiles = [
        Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å", profile_code="P001", length=1200, quantity=1)
    ]
    
    stocks = [
        Stock(id=1, profile_id=1, length=2000, quantity=1)
    ]
    
    optimizer = LinearOptimizer()
    result = optimizer.optimize(profiles, stocks)
    
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –ü–ª–∞–Ω–æ–≤: {len(result.cut_plans)}")
    
    return result

def test_cutplan_methods():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ CutPlan"""
    from core.models import CutPlan
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω
    cuts = [
        {'profile_id': 1, 'length': 1000, 'quantity': 2},
        {'profile_id': 2, 'length': 500, 'quantity': 1}
    ]
    
    plan = CutPlan(
        stock_id=1,
        stock_length=3000,
        cuts=cuts,
        waste=485,
        waste_percent=16.2
    )
    
    used_length = plan.get_used_length()
    total_pieces = plan.get_total_pieces_length()
    cuts_count = plan.get_cuts_count()
    is_valid = plan.validate()
    
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_length}–º–º")
    print(f"   –û–±—â–∞—è –¥–ª–∏–Ω–∞ –∫—É—Å–∫–æ–≤: {total_pieces}–º–º")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤: {cuts_count}")
    print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {is_valid}")
    
    return plan

def test_gui_imports():
    """–¢–µ—Å—Ç GUI –∏–º–ø–æ—Ä—Ç–æ–≤"""
    try:
        from PyQt5.QtWidgets import QApplication
        from PyQt5.QtCore import Qt
        from gui.table_widgets import fill_optimization_results_table
        return "GUI –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã"
    except ImportError as e:
        print(f"   –ü—Ä–æ–±–ª–µ–º–∞ —Å GUI: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–î–ï–ù–ò–Ø LINEAR OPTIMIZER")
    print("=" * 60)
    
    tests = [
        ("–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã", test_basic_imports),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_data_creation),
        ("–ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", test_simple_optimization),
        ("LinearOptimizer", test_linear_optimizer),
        ("–ú–µ—Ç–æ–¥—ã CutPlan", test_cutplan_methods),
        ("GUI –∏–º–ø–æ—Ä—Ç—ã", test_gui_imports),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        success, result = safe_test(test_name, test_func)
        results.append((test_name, success, result))
        
        if not success:
            print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø–∞–¥–µ–Ω–∏—è!")
    
    print("\nüìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 60)
    
    failed_tests = []
    for test_name, success, _ in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
        if not success:
            failed_tests.append(test_name)
    
    if failed_tests:
        print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´: {', '.join(failed_tests)}")
        print("–≠—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    else:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ GUI –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    return len(failed_tests) == 0

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        traceback.print_exc()
        sys.exit(1)