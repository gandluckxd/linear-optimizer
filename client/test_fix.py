#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
"""

from core.optimizer import SimpleOptimizer, OptimizationSettings
from core.models import Profile, Stock

def test_problem_case():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π: —Ö–ª—ã—Å—Ç 4460–º–º, –¥–æ–ª–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è:
    # 4 –¥–µ—Ç–∞–ª–∏ –ø–æ 1110–º–º = 4440–º–º + 3 –ø—Ä–æ–ø–∏–ª–∞ –ø–æ 5–º–º = 4455–º–º 
    # –ò—Ç–æ–≥–æ: 4455–º–º < 4460–º–º ‚úÖ
    profiles = [
        Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å 1110", profile_code="P001", length=1110, quantity=4),
    ]
    
    stocks = [
        Stock(id=1, profile_id=1, length=4460, quantity=1),
    ]
    
    print(f"üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –•–ª—ã—Å—Ç: {stocks[0].length}–º–º")
    for profile in profiles:
        print(f"   –ü—Ä–æ—Ñ–∏–ª—å: {profile.length}–º–º x {profile.quantity}—à—Ç = {profile.length * profile.quantity}–º–º")
        print(f"   + –ü—Ä–æ–ø–∏–ª—ã: {(profile.quantity - 1) * 5}–º–º (—à–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–∞ 5–º–º)")
        print(f"   = –û–±—â–∞—è –¥–ª–∏–Ω–∞: {profile.length * profile.quantity + (profile.quantity - 1) * 5}–º–º")
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    settings = OptimizationSettings(
        blade_width=5.0,
        min_remainder_length=300.0,
        max_waste_percent=15.0
    )
    
    optimizer = SimpleOptimizer(settings)
    
    print(f"\nüîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    result = optimizer.optimize(profiles, stocks)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(result.cut_plans)}")
    print(f"   –û–±—â–∏–µ –æ—Ç—Ö–æ–¥—ã: {result.total_waste_percent:.1f}%")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
    
    if result.cut_plans:
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–∞–Ω–æ–≤:")
        for i, plan in enumerate(result.cut_plans):
            analysis = optimizer._analyze_cut_plan(plan)
            print(f"\n   –ü–ª–∞–Ω {i+1} (–•–ª—ã—Å—Ç {plan.stock_id}):")
            print(f"     –î–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞: {plan.stock_length:.0f}–º–º")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π: {analysis['cuts_count']}—à—Ç")
            print(f"     –°—É–º–º–∞ –¥–ª–∏–Ω –¥–µ—Ç–∞–ª–µ–π: {analysis['total_pieces_length']:.0f}–º–º")
            print(f"     –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–æ–≤: {analysis['saw_width_total']:.0f}–º–º")
            print(f"     –û–±—â–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {analysis['used_length']:.0f}–º–º")
            print(f"     –û—Ç—Ö–æ–¥—ã: {plan.waste:.0f}–º–º ({plan.waste_percent:.1f}%)")
            print(f"     –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {'‚úÖ –î–ê' if analysis['is_valid'] else '‚ùå –ù–ï–¢'}")
            
            if not analysis['is_valid']:
                print(f"     ‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù–ò–ï: {analysis['used_length'] - analysis['stock_length']:.0f}–º–º")
            else:
                print(f"     ‚úÖ –°–≤–æ–±–æ–¥–Ω–æ: {analysis['stock_length'] - analysis['used_length']:.0f}–º–º")
            
            print(f"     –î–µ—Ç–∞–ª–∏: {analysis['cuts_detail']}")
    
    return result

def test_multiple_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    print(f"\n\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:")
    print("=" * 60)
    
    test_cases = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π",
            "profiles": [Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å", profile_code="P001", length=1000, quantity=2)],
            "stocks": [Stock(id=1, profile_id=1, length=2100, quantity=1)]
        },
        {
            "name": "–ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π",
            "profiles": [Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å", profile_code="P001", length=1000, quantity=3)],
            "stocks": [Stock(id=1, profile_id=1, length=3010, quantity=1)]  # 3000 + 10 –ø—Ä–æ–ø–∏–ª–æ–≤ = 3010
        },
        {
            "name": "–ù–µ–≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π",
            "profiles": [Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å", profile_code="P001", length=1000, quantity=3)],
            "stocks": [Stock(id=1, profile_id=1, length=3000, quantity=1)]  # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–ø–∏–ª–æ–≤
        }
    ]
    
    optimizer = SimpleOptimizer()
    
    for i, case in enumerate(test_cases):
        print(f"\nüìã –¢–µ—Å—Ç {i+1}: {case['name']}")
        result = optimizer.optimize(case['profiles'], case['stocks'])
        
        if result.cut_plans:
            plan = result.cut_plans[0]
            analysis = optimizer._analyze_cut_plan(plan)
            print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if analysis['is_valid'] else '‚ùå'}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {analysis['used_length']:.0f}–º–º –∏–∑ {analysis['stock_length']:.0f}–º–º")
        else:
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–µ—Ç –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞")

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞—è
    result = test_problem_case()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_multiple_cases()
    
    print(f"\nüéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
    if result.success and result.cut_plans:
        all_valid = all(plan.validate(5.0) for plan in result.cut_plans)
        if all_valid:
            print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –†–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã")
    else:
        print("‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")