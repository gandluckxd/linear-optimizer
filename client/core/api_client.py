"""
API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Linear Optimizer API
"""

import requests
from typing import List, Dict
from core.models import Profile, Stock, OptimizationResult, StockRemainder, StockMaterial, FiberglassDetail, FiberglassSheet, FiberglassLoadDataResponse

class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"""
    
    def __init__(self, base_url: str = "http://localhost:8001"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"""
        try:
            response = self.session.get(f"{self.base_url}/api/test-connection", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def get_profiles(self, order_id: int) -> List[Profile]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/profiles",
                json={"order_id": order_id},
                timeout=120
            )
            response.raise_for_status()
            
            profiles = []
            for data in response.json():
                profile = Profile(
                    id=data['id'],
                    order_id=data['order_id'],
                    element_name=data['element_name'],
                    profile_code=data['profile_code'],
                    length=data['length'],
                    quantity=data['quantity'],
                    orderitemsid=data.get('orderitemsid'),
                    izdpart=data.get('izdpart'),
                    itemsdetailid=data.get('itemsdetailid')
                )
                profiles.append(profile)
            
            return profiles
            
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}")
    
    def get_stock(self, profile_id: int) -> List[Stock]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∫–ª–∞–¥–µ"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/stock",
                json={"profile_id": profile_id},
                timeout=120
            )
            response.raise_for_status()
            
            stocks = []
            for data in response.json():
                stock = Stock(
                    id=data['id'],
                    profile_id=data['profile_id'],
                    length=data['length'],
                    quantity=data['quantity'],
                    location=data.get('location', ''),
                    is_remainder=data.get('is_remainder', False),
                    warehouseremaindersid=data.get('warehouseremaindersid', None)
                )
                stocks.append(stock)
            
            return stocks
            
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {str(e)}")
    
    def get_stock_remainders(self, profile_codes: List[str]) -> List[StockRemainder]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/stock-remainders",
                json={"profile_codes": profile_codes},
                timeout=120
            )
            response.raise_for_status()
            
            remainders = []
            for data in response.json():
                remainder = StockRemainder(
                    profile_code=data['profile_code'],
                    length=data['length'],
                    quantity_pieces=data['quantity_pieces']
                )
                remainders.append(remainder)
            
            return remainders
            
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {str(e)}")
    
    def get_stock_materials(self, profile_codes: List[str]) -> List[StockMaterial]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ —Å–∫–ª–∞–¥–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/stock-materials",
                json={"profile_codes": profile_codes},
                timeout=120
            )
            response.raise_for_status()
            
            materials = []
            for data in response.json():
                material = StockMaterial(
                    profile_code=data['profile_code'],
                    length=data['length'],
                    quantity_pieces=data['quantity_pieces']
                )
                materials.append(material)
            
            return materials
            
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {str(e)}")

    def get_fiberglass_details(self, grorder_mos_id: int) -> List[FiberglassDetail]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª–æ—Ç–µ–Ω —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/fiberglass/get-details",
                json={"grorder_mos_id": grorder_mos_id},
                timeout=120
            )
            response.raise_for_status()

            details = []
            for data in response.json():
                detail = FiberglassDetail(
                    grorder_mos_id=data['grorder_mos_id'],
                    orderid=data['orderid'],
                    orderitemsid=data['orderitemsid'],
                    itemsdetailid=data['itemsdetailid'],
                    item_name=data['item_name'],
                    width=data['width'],
                    height=data['height'],
                    quantity=data['quantity'],
                    modelno=data.get('modelno'),
                    partside=data.get('partside'),
                    izdpart=data.get('izdpart'),
                    goodsid=data['goodsid'],
                    marking=data['marking'],
                    orderno=data.get('orderno', '')
                )
                details.append(detail)

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"üîç API: –ü–æ–ª—É—á–µ–Ω–∞ –¥–µ—Ç–∞–ª—å –∏–∑ API: {detail.marking}")
                print(f"üîç API:   partside='{detail.partside}', izdpart='{detail.izdpart}'")

            return details

        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª–æ—Ç–µ–Ω: {str(e)}")

    def get_fiberglass_remainders(self, goodsids: List[int]) -> List[FiberglassSheet]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/fiberglass/get-remainders",
                json={"goodsids": goodsids},
                timeout=120
            )
            response.raise_for_status()

            remainders = []
            for data in response.json():
                remainder = FiberglassSheet(
                    goodsid=data['goodsid'],
                    marking=data['marking'],
                    width=data['width'],
                    height=data['height'],
                    is_remainder=data['is_remainder'],
                    remainder_id=data.get('remainder_id'),
                    quantity=data['quantity'],
                    area_mm2=data.get('area_mm2')
                )
                remainders.append(remainder)

            return remainders

        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω: {str(e)}")

    def get_fiberglass_materials(self, goodsids: List[int]) -> List[FiberglassSheet]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª–æ—Ç–µ–Ω —Å–æ —Å–∫–ª–∞–¥–∞"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/fiberglass/get-materials",
                json={"goodsids": goodsids},
                timeout=120
            )
            response.raise_for_status()

            materials = []
            data_list = response.json()
            print(f"üì¶ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª {len(data_list)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

            for data in data_list:
                material = FiberglassSheet(
                    goodsid=data['goodsid'],
                    marking=data['marking'],
                    width=data['width'],
                    height=data['height'],
                    is_remainder=data['is_remainder'],
                    remainder_id=data.get('remainder_id'),
                    quantity=data['quantity'],
                    area_mm2=data.get('area_mm2')
                )
                materials.append(material)
                print(f"  - {material.marking}: {material.width}x{material.height}–º–º = {material.quantity} —Ä—É–ª–æ–Ω–æ–≤")

            return materials

        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–ª–æ—Ç–µ–Ω: {str(e)}")

    def load_fiberglass_data(self, grorder_mos_id: int) -> FiberglassLoadDataResponse:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞ –ø–æ grorder_mos_id"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/fiberglass/load-data",
                json={"grorder_mos_id": grorder_mos_id},
                timeout=120
            )
            response.raise_for_status()

            data = response.json()
            return FiberglassLoadDataResponse(
                details=data['details'],
                materials=data['materials'],
                remainders=data['remainders'],
                total_details=data['total_details'],
                total_materials=data['total_materials'],
                total_remainders=data['total_remainders']
            )

        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞: {str(e)}")

    def get_grorders_by_mos_id(self, grorders_mos_id: int) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ grorderid –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫"""
        try:
            response = self.session.post(
                f"{self.base_url}/api/grorders-by-mos-id",
                json={"grorders_mos_id": grorders_mos_id},
                timeout=120
            )
            response.raise_for_status()
            data = response.json()
            if not isinstance(data, list):
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ grorderid")
            return [int(x) for x in data]
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è grorderid –ø–æ mos_id: {str(e)}")
    
    def upload_optimization_result(self, order_id: int, result: OptimizationResult,
                                 save_to_order: bool = True,
                                 create_cutting_list: bool = True) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
            data = {
                "optimization_result": {
                    "order_id": order_id,
                    "cut_plans": [
                        {
                            "stock_id": plan.stock_id,
                            "stock_length": plan.stock_length,
                            "cuts": plan.cuts,
                            "waste": plan.waste,
                            "waste_percent": plan.waste_percent,
                            "remainder": plan.remainder
                        }
                        for plan in result.cut_plans
                    ],
                    "total_waste": result.total_waste,
                    "total_waste_percent": result.total_waste_percent,
                    "profiles_cut": sum(sum(cut['quantity'] for cut in plan.cuts) 
                                      for plan in result.cut_plans),
                    "stocks_used": len(result.cut_plans),
                    "created_at": result.created_at.isoformat()
                },
                "save_to_order": save_to_order,
                "create_cutting_list": create_cutting_list
            }
            
            response = self.session.post(
                f"{self.base_url}/api/upload-result",
                json=data,
                timeout=120
            )
            response.raise_for_status()
            
            return True
            
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")

    # ===== –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ OPTIMIZED_MOS –∏ OPTDETAIL_MOS =====

    def delete_optimized_mos_by_grorders_mos_id(self, grorders_mos_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ OPTIMIZED_MOS/OPTDETAIL_MOS –ø–æ GRORDER_MOS_ID"""
        try:
            print(f"üîß API Client: –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö MOS –¥–ª—è grorders_mos_id={grorders_mos_id}")
            
            response = self.session.delete(
                f"{self.base_url}/api/optimized-mos/by-grorders-mos-id/{grorders_mos_id}",
                timeout=120
            )
            
            if response.status_code == 200:
                print(f"‚úÖ API Client: –î–∞–Ω–Ω—ã–µ MOS —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è grorders_mos_id={grorders_mos_id}")
                return True
            elif response.status_code == 404:
                print(f"‚ö†Ô∏è API Client: –î–∞–Ω–Ω—ã–µ MOS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è grorders_mos_id={grorders_mos_id} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω—ã)")
                return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            else:
                print(f"‚ùå API Client: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOS: HTTP {response.status_code}")
                response.raise_for_status()
                return True
                
        except requests.RequestException as e:
            print(f"‚ùå API Client: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOS: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOS: {str(e)}")

    def create_optimized_mos(self, payload: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ OPTIMIZED_MOS"""
        try:
            print(f"üîß API Client: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTIMIZED_MOS: grorder_mos_id={payload.get('grorder_mos_id')}, goodsid={payload.get('goodsid')}")
            
            response = self.session.post(
                f"{self.base_url}/api/optimized-mos",
                json=payload,
                timeout=120
            )
            response.raise_for_status()
            
            result = response.json()
            print(f"‚úÖ API Client: OPTIMIZED_MOS —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: id={result.get('id')}")
            return result
            
        except requests.RequestException as e:
            print(f"‚ùå API Client: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTIMIZED_MOS: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTIMIZED_MOS: {str(e)}")

    def create_optdetail_mos_bulk(self, payloads: List[Dict]) -> List[Dict]:
        """–ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ OPTDETAIL_MOS"""
        try:
            if not payloads:
                return []
            
            print(f"üîß API Client: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ {len(payloads)} –∑–∞–ø–∏—Å–µ–π OPTDETAIL_MOS")
            
            response = self.session.post(
                f"{self.base_url}/api/optdetail-mos/bulk",
                json=payloads,
                timeout=300  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            )
            response.raise_for_status()
            
            result = response.json()
            print(f"‚úÖ API Client: –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ OPTDETAIL_MOS –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–æ–∑–¥–∞–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π.")
            return result
            
        except requests.RequestException as e:
            print(f"‚ùå API Client: –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: {str(e)}")


    def create_optdetail_mos(self, payload: Dict) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ OPTDETAIL_MOS"""
        try:
            print(f"üîß API Client: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: optimized_mos_id={payload.get('optimized_mos_id')}, orderid={payload.get('orderid')}")
            
            response = self.session.post(
                f"{self.base_url}/api/optdetail-mos",
                json=payload,
                timeout=120
            )
            response.raise_for_status()
            
            result = response.json()
            print(f"‚úÖ API Client: OPTDETAIL_MOS —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: id={result.get('id')}")
            return result
            
        except requests.RequestException as e:
            print(f"‚ùå API Client: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: {str(e)}")

    def upload_mos_data(
        self,
        grorders_mos_id: int,
        result: OptimizationResult,
        profiles: List[Profile],
        blade_width_mm: int = 5,
        min_remainder_mm: int = 300,
        begin_indent_mm: int = 0,
        end_indent_mm: int = 0,
        min_trash_mm: int = 50,
    ) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã OPTIMIZED_MOS –∏ OPTDETAIL_MOS.

        Args:
            grorders_mos_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            profiles: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ goodsid->orderid)
            blade_width_mm: –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–∞ (CUTWIDTH)
            min_remainder_mm: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (MINREST)
            isbar: –ü—Ä–∏–∑–Ω–∞–∫ ISBAR
        """
        try:
            print(f"üîß API Client: *** –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø *** –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è grorders_mos_id={grorders_mos_id}")
            print(f"üîß API Client: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(result.cut_plans) if result.cut_plans else 0}")
            print(f"üîß API Client: *** –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú ORDERID ***")
            
            if not result or not getattr(result, 'cut_plans', None):
                raise Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏")

            # –¢–µ–ø–µ—Ä—å order_id –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –ø—Ä—è–º–æ –≤ cuts, –ø–æ—ç—Ç–æ–º—É –º–∞–ø–ø–∏–Ω–≥ –Ω–µ –Ω—É–∂–µ–Ω
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            profile_orderids = set(p.order_id for p in profiles)
            print(f"üîß API Client: –ü—Ä–æ—Ñ–∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç {len(profiles)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(profile_orderids)} –∑–∞–∫–∞–∑–æ–≤")
            print(f"üîß API Client: –°–ø–∏—Å–æ–∫ orderid –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö: {sorted(profile_orderids)}")
            print(f"üîß API Client: –¢–µ–ø–µ—Ä—å order_id –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –ø—Ä—è–º–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            print(f"üîß API Client: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è grorders_mos_id={grorders_mos_id}")
            self.delete_optimized_mos_by_grorders_mos_id(grorders_mos_id)
            print(f"‚úÖ API Client: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

            # –û—Å–Ω–æ–≤–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞
            total_optimized_mos = 0
            optdetail_payloads = [] # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π
            
            for plan_index, plan in enumerate(result.cut_plans):
                print(f"üîß API Client: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞ {plan_index + 1}/{len(result.cut_plans)}")
                
                cuts = plan.cuts or []
                if not cuts:
                    print(f"‚ö†Ô∏è API Client: –ü–ª–∞–Ω {plan_index + 1} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–∏–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π goodsid –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É –∫—É—Å–∫–æ–≤ –≤ –ø–ª–∞–Ω–µ
                goodsid_counter: Dict[int, int] = {}
                for cut in cuts:
                    pid = int(cut.get('profile_id', 0)) if isinstance(cut, dict) else 0
                    if pid:
                        goodsid_counter[pid] = goodsid_counter.get(pid, 0) + int(cut.get('quantity', 0) or 0)
                main_goodsid = 0
                if goodsid_counter:
                    main_goodsid = max(goodsid_counter.items(), key=lambda x: x[1])[0]
                
                print(f"üîß API Client: –û—Å–Ω–æ–≤–Ω–æ–π goodsid –¥–ª—è –ø–ª–∞–Ω–∞ {plan_index + 1}: {main_goodsid}")

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Ä–∞—Å–ø–∏–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OPTIMIZED.MAP:
                # –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω (–º–º) —Å –æ–¥–Ω–∏–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –∑–Ω–∞–∫–æ–º,
                # –∫–∞–∂–¥–∞—è –¥–ª–∏–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è qty —Ä–∞–∑, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ';'
                pieces_list = []
                for c in cuts:
                    length_val = float(c.get('length', 0) or 0)
                    qty_val = int(c.get('quantity', 0) or 0)
                    for _ in range(max(0, qty_val)):
                        pieces_list.append(f"{length_val:.1f}")
                cut_map = ";".join(pieces_list)

                sumprof = sum(float(c.get('length', 0)) * int(c.get('quantity', 0) or 0) for c in cuts)
                remainder = getattr(plan, 'remainder', None)
                waste = getattr(plan, 'waste', 0) or 0
                stock_length = float(getattr(plan, 'stock_length', 0) or 0)
                ostat = float(remainder) if remainder and remainder > 0 else float(waste)
                restpercent = (float(remainder) / stock_length * 100) if remainder and stock_length > 0 else 0.0
                trashpercent = float(getattr(plan, 'waste_percent', 0) or 0)

                # –°–æ–∑–¥–∞–µ–º OPTIMIZED_MOS: –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —Ö–ª—ã—Å—Ç (count)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ISBAR –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: 1 –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Å—Ç–∞—Ç–æ–∫, –∏–Ω–∞—á–µ 0
                isbar_value = 1 if bool(getattr(plan, 'is_remainder', False)) else 0
                # BORDER = beginindent + endindent
                border_value = int((begin_indent_mm or 0) + (end_indent_mm or 0))
                plan_count = int(getattr(plan, 'count', 1) or 1)

                print(f"üîß API Client: –°–æ–∑–¥–∞–Ω–∏–µ {plan_count} –∑–∞–ø–∏—Å–µ–π OPTIMIZED_MOS –¥–ª—è –ø–ª–∞–Ω–∞ {plan_index + 1}")

                for bar_index in range(1, plan_count + 1):
                    optimized_payload = {
                        "grorder_mos_id": int(grorders_mos_id),
                        "goodsid": int(main_goodsid or 0),
                        "qty": 1,  # –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –æ–¥–∏–Ω —Ö–ª—ã—Å—Ç
                        "isbar": isbar_value,
                        "longprof": stock_length,
                        "cutwidth": int(blade_width_mm),
                        "border": border_value,
                        "minrest": int(min_remainder_mm),
                        "mintrash": int(min_trash_mm),
                        "map": cut_map,
                        "ostat": float(ostat),
                        "sumprof": float(sumprof),
                        "restpercent": float(restpercent),
                        "trashpercent": float(trashpercent),
                        "beginindent": int(begin_indent_mm or 0),
                        "endindent": int(end_indent_mm or 0),
                        "sumtrash": float(waste) if waste else None,
                    }

                    print(f"üîß API Client: –°–æ–∑–¥–∞–Ω–∏–µ OPTIMIZED_MOS {bar_index}/{plan_count} –¥–ª—è –ø–ª–∞–Ω–∞ {plan_index + 1}")
                    optimized_resp = self.create_optimized_mos(optimized_payload)
                    optimized_mos_id = int(optimized_resp.get("id"))
                    total_optimized_mos += 1
                    print(f"‚úÖ API Client: OPTIMIZED_MOS —Å–æ–∑–¥–∞–Ω —Å ID {optimized_mos_id}")

                    # –î–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–ª—ã—Å—Ç–∞
                    subnum_counter = 1
                    
                    for c in cuts:
                        length_val = float(c.get('length', 0) or 0)
                        qty_val = int(c.get('quantity', 0) or 0)
                        pid = int(c.get('profile_id', 0) or 0)
                        
                        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ cut
                        print(f"üîç API Client: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ cut: {c}")
                        
                        # *** –ò–°–ü–†–ê–í–õ–ï–ù–û *** order_id –±–µ—Ä–µ—Ç—Å—è –ø—Ä—è–º–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                        # –≠—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ORDERID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ORDERS, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ OPTDETAIL_MOS
                        final_orderid = int(c.get('order_id', 0) or 0)

                        if qty_val <= 0 or length_val <= 0:
                            continue

                        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        if final_orderid == 0:
                            print(f"‚ö†Ô∏è API Client: –î–ª—è –¥–µ—Ç–∞–ª–∏ goodsid={pid} –Ω–µ –Ω–∞–π–¥–µ–Ω order_id –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!")
                        
                        print(f"üîß API Client: –î–µ—Ç–∞–ª—å {subnum_counter}: goodsid={pid}, orderid={final_orderid}, –¥–ª–∏–Ω–∞={length_val}, –∫–æ–ª-–≤–æ={qty_val}")

                        detail_payload = {
                            "optimized_mos_id": optimized_mos_id,
                            "orderid": final_orderid,
                            "qty": int(qty_val),
                            "itemsdetailid": c.get('itemsdetailid'),
                            "itemlong": float(length_val),
                            "ug1": None,
                            "ug2": None,
                            "num": bar_index,  # –Ω–æ–º–µ—Ä —Ö–ª—ã—Å—Ç–∞ –≤ –ø–ª–∞–Ω–µ
                            "subnum": subnum_counter,
                            "long_al": float(length_val) + float(blade_width_mm),
                            "izdpart": c.get('izdpart'),
                            "partside": None,
                            "modelno": None,
                            "modelheight": None,
                            "modelwidth": None,
                            "flugelopentype": None,
                            "flugelcount": None,
                            "ishandle": None,
                            "handlepos": None,
                            "handleposfalts": None,
                            "flugelopentag": None,
                        }
                        optdetail_payloads.append(detail_payload)
                        subnum_counter += 1
            
            # –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            if optdetail_payloads:
                print(f"üîß API Client: –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ {len(optdetail_payloads)} –∑–∞–ø–∏—Å–µ–π OPTDETAIL_MOS.")
                self.create_optdetail_mos_bulk(optdetail_payloads)
            else:
                print("‚ö†Ô∏è API Client: –ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ OPTDETAIL_MOS.")


            print(f"‚úÖ API Client: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚úÖ API Client: –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π OPTIMIZED_MOS: {total_optimized_mos}")
            print(f"‚úÖ API Client: –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π OPTDETAIL_MOS: {len(optdetail_payloads)}")
            
            return True

        except Exception as e:
            print(f"‚ùå API Client: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö MOS: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö MOS: {str(e)}")

    def distribute_cell_numbers(self, grorders_mos_id: int, cell_map: Dict[str, int] = None) -> dict:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ altawin.
        
        Args:
            grorders_mos_id: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
            cell_map (Dict[str, int], optional): –ö–∞—Ä—Ç–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫.
                                                –ö–ª—é—á: f"{orderitemsid}_{izdpart}", –ó–Ω–∞—á–µ–Ω–∏–µ: cell_number.
                                                –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤
        """
        try:
            print(f"üîß API Client: distribute_cell_numbers –≤—ã–∑–≤–∞–Ω –¥–ª—è grorders_mos_id={grorders_mos_id}")
            
            payload = {
                "grorder_mos_id": grorders_mos_id
            }
            if cell_map:
                payload["cell_map"] = cell_map
                print(f"üîß API Client: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∫–∞—Ä—Ç–æ–π —è—á–µ–µ–∫ ({len(cell_map)} –∑–∞–ø–∏—Å–µ–π).")
            
            response = self.session.post(f"{self.base_url}/api/distribute-cell-numbers", json=payload)
            response.raise_for_status()
            
            result = response.json()
            
            if result.get("success"):
                print(f"‚úÖ API Client: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è—á–µ–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result.get('processed_items', 0)} –ø—Ä–æ–µ–º–æ–≤")
            else:
                print(f"‚ùå API Client: –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫: {result.get('error', result.get('message'))}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå API Client: –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫: {str(e)}")

    def adjust_materials_altawin(self, grorders_mos_id: int, used_materials: list = None, business_remainders: list = None, used_fiberglass_sheets: list = None, new_fiberglass_remainders: list = None) -> dict:
        """
        –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Altawin –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
        
        Args:
            grorders_mos_id: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –º–æ—Å–∫–∏—Ç–Ω—ã—Ö —Å–µ—Ç–æ–∫
            used_materials: –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ [{'goodsid': int, 'length': float, 'quantity': int, 'is_remainder': bool}]
            business_remainders: –°–ø–∏—Å–æ–∫ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ [{'goodsid': int, 'length': float, 'quantity': int}]
            used_fiberglass_sheets: –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤/–æ—Å—Ç–∞—Ç–∫–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
            new_fiberglass_remainders: –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ñ–∏–±–µ—Ä–≥–ª–∞—Å—Å–∞
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            print(f"üîß API Client: adjust_materials_altawin –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
            print(f"   grorders_mos_id: {grorders_mos_id}")
            print(f"   used_materials (–ø—Ä–æ—Ñ–∏–ª–∏): {len(used_materials) if used_materials else 0} –∑–∞–ø–∏—Å–µ–π")
            print(f"   business_remainders (–ø—Ä–æ—Ñ–∏–ª–∏): {len(business_remainders) if business_remainders else 0} –∑–∞–ø–∏—Å–µ–π")
            print(f"   used_fiberglass_sheets: {len(used_fiberglass_sheets) if used_fiberglass_sheets else 0} –∑–∞–ø–∏—Å–µ–π")
            print(f"   new_fiberglass_remainders: {len(new_fiberglass_remainders) if new_fiberglass_remainders else 0} –∑–∞–ø–∏—Å–µ–π")

            payload = {
                "grorders_mos_id": grorders_mos_id,
                "used_materials": used_materials or [],
                "business_remainders": business_remainders or [],
                "used_fiberglass_sheets": used_fiberglass_sheets or [],
                "new_fiberglass_remainders": new_fiberglass_remainders or []
            }
            
            print(f"üîß API Client: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            response = self.session.post(
                f"{self.base_url}/api/adjust-materials-altawin",
                json=payload,
                timeout=120
            )
            response.raise_for_status()
            result = response.json()
            print(f"‚úÖ API Client: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
            return result
            
        except requests.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {str(e)}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_api_client = None

def get_api_client() -> APIClient:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞"""
    global _api_client
    if _api_client is None:
        _api_client = APIClient()
    return _api_client

def set_api_url(url: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å URL API"""
    global _api_client
    _api_client = APIClient(url) 