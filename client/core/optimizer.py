"""
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ä–∞—Å–∫—Ä–æ—è –ø—Ä–æ—Ñ–∏–ª–µ–π
–í–µ—Ä—Å–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

–ê–≤—Ç–æ—Ä: –ê—Ä—Ç–µ–º
"""

import time
from typing import List, Dict, Any
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
from .models import Profile, Stock, CutPlan, OptimizationResult, Piece

@dataclass
class OptimizationSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–æ—è"""
    blade_width: float = 5.0              # –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–∞ –≤ –º–º
    min_remainder_length: float = 300.0   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞ –≤ –º–º
    max_waste_percent: float = 15.0       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤
    pair_optimization: bool = True        # –ü–∞—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    use_remainders: bool = True           # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
    time_limit_seconds: int = 60          # –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏
    begin_indent: float = 10.0            # –û—Ç—Å—Ç—É–ø –æ—Ç –Ω–∞—á–∞–ª–∞ (–º–º)
    end_indent: float = 10.0              # –û—Ç—Å—Ç—É–ø –æ—Ç –∫–æ–Ω—Ü–∞ (–º–º)
    min_trash_mm: float = 50.0            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Ö–æ–¥ (–º–º)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–æ—Å–∫–æ—Å—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    min_remainder_width: float = 500.0    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–º–º)
    min_remainder_height: float = 500.0   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–º–º)
    planar_cut_width: float = 1.0         # –®–∏—Ä–∏–Ω–∞ —Ä–µ–∑–∞ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–º–º)
    sheet_indent: float = 15.0            # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª–∏—Å—Ç–∞ —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω (–º–º)
    remainder_indent: float = 15.0        # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω (–º–º)
    planar_max_waste_percent: float = 5.0 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–∞ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (%)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–∏–ª–µ–Ω–Ω–æ–π –ø–∞—Ä–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    pairing_exact_bonus: float = 3000.0           # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä–æ—è
    pairing_partial_bonus: float = 1000.0         # –ë–æ–Ω—É—Å –∑–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏)
    pairing_partial_threshold: float = 0.7        # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è [0..1]
    pairing_new_simple_bonus: float = 150.0       # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞—Å–∫—Ä–æ—è –Ω–∞ –ø—É—Å—Ç–æ–º —Ö–ª—ã—Å—Ç–µ


class SimpleOptimizer:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ä–∞—Å–∫—Ä–æ—è - –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
    """
    
    def __init__(self, settings: OptimizationSettings = None):
        self.settings = settings or OptimizationSettings()
        self.solve_time = 0.0
    
    def optimize(self, profiles: List[Profile], stocks: List[Stock], 
                settings: OptimizationSettings = None, progress_fn=None) -> OptimizationResult:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        Args:
            profiles: –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞
            stocks: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤ 
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            progress_fn: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            OptimizationResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        start_time = time.time()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if settings:
                self.settings = settings
                
            if progress_fn:
                progress_fn(10)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not profiles:
                return self._create_error_result("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞")
                
            if not stocks:
                return self._create_error_result("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            remainder_validation = self._validate_input_remainders(stocks)
            if remainder_validation["has_duplicates"]:
                error_msg = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:\n"
                for duplicate in remainder_validation["duplicates"]:
                    error_msg += f"- warehouseremaindersid {duplicate['warehouseremaindersid']}: {duplicate['count']} —Ä–∞–∑\n"
                return self._create_error_result(error_msg)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            if progress_fn:
                progress_fn(15)
            material_check = self._check_material_availability(profiles, stocks)
            if not material_check["sufficient"]:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                warning_msg = "‚ö†Ô∏è –ù–ï–•–í–ê–¢–ö–ê –ú–ê–¢–ï–†–ò–ê–õ–û–í –ù–ê –°–ö–õ–ê–î–ï:\n\n"
                for shortage in material_check["shortages"]:
                    warning_msg += f"üìã –ê—Ä—Ç–∏–∫—É–ª: {shortage['profile_code']}\n"
                    warning_msg += f"   –¢—Ä–µ–±—É–µ—Ç—Å—è: {shortage['needed']} –¥–µ—Ç–∞–ª–µ–π –æ–±—â–µ–π –¥–ª–∏–Ω–æ–π {shortage['total_length']:.0f}–º–º\n"
                    warning_msg += f"   –î–æ—Å—Ç—É–ø–Ω–æ: {shortage['available']} —Ö–ª—ã—Å—Ç–æ–≤ –æ–±—â–µ–π –¥–ª–∏–Ω–æ–π {shortage['available_length']:.0f}–º–º\n"
                    warning_msg += f"   –ù–µ—Ö–≤–∞—Ç–∫–∞: {shortage['shortage']} –¥–µ—Ç–∞–ª–µ–π –Ω–∞ {shortage['shortage_length']:.0f}–º–º\n\n"
                    
                warning_msg += "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                warning_msg += "- –î–æ–∫—É–ø–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
                warning_msg += "- –ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
                warning_msg += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ\n\n"
                warning_msg += "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –∏–º–µ—é—â–∏–º–∏—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏."
                
                print(f"‚ö†Ô∏è {warning_msg}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            valid_profiles = [p for p in profiles if p.quantity > 0 and p.length > 0]
            valid_stocks = [s for s in stocks if s.quantity > 0 and s.length > 0]
            
            if not valid_profiles:
                return self._create_error_result("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
                
            if not valid_stocks:
                return self._create_error_result("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤")
        
            if progress_fn:
                progress_fn(25)
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            max_stock_length = max(s.length for s in valid_stocks)
            impossible = [p for p in valid_profiles if p.length > max_stock_length - self.settings.blade_width]
            
            if impossible:
                names = [p.element_name for p in impossible[:3]]
                return self._create_error_result(f"–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è: {', '.join(names)}")
        
            if progress_fn:
                progress_fn(40)
                
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã
            valid_profiles.sort(key=lambda p: p.length, reverse=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
            cut_plans = self._simple_fit_algorithm(valid_profiles, valid_stocks, progress_fn)
        
            if progress_fn:
                progress_fn(90)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            total_waste = sum(plan.waste * getattr(plan, 'count', 1) for plan in cut_plans)
            total_remainder = sum((plan.remainder or 0) * getattr(plan, 'count', 1) for plan in cut_plans)
            total_length = sum(plan.stock_length * getattr(plan, 'count', 1) for plan in cut_plans)
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: waste_percent —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç—Ö–æ–¥—ã, –±–µ–∑ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            waste_percent = (total_waste / total_length * 100) if total_length > 0 else 0
            remainder_percent = (total_remainder / total_length * 100) if total_length > 0 else 0
            
            self.solve_time = time.time() - start_time
            
            result = OptimizationResult(
                cut_plans=cut_plans,
                total_waste=total_waste,
                total_waste_percent=waste_percent,
                settings=self.settings,
                success=True,
                message=f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {self.solve_time:.1f}—Å"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            result.statistics = self._calculate_stats(cut_plans)
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            result.statistics['total_remainder'] = total_remainder
            result.statistics['remainder_percent'] = remainder_percent
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –û—Ç—Ö–æ–¥—ã={total_waste:.0f}–º–º ({waste_percent:.1f}%), –î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏={total_remainder:.0f}–º–º ({remainder_percent:.1f}%)")
            try:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ–≥–æ –¥–µ—Ç–∞–ª–µ–π –Ω—É–∂–Ω–æ (–ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º) –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–ø–æ –ø–ª–∞–Ω–∞–º)
                total_pieces_needed = sum(p.quantity for p in valid_profiles)
                total_pieces_placed = 0
                
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–æ–≤
                for plan in cut_plans:
                    plan_count = getattr(plan, 'count', 1)
                    if hasattr(plan, 'cuts') and plan.cuts:
                        # –°—á–∏—Ç–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –æ–¥–Ω–æ–º –ø–ª–∞–Ω–µ
                        plan_pieces = sum(int(c.get('quantity', 0)) for c in plan.cuts)
                        # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π –ø–ª–∞–Ω–∞
                        total_pieces_placed += plan_pieces * plan_count
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞—Ö–æ–¥–∏–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                unplaced_pieces = self._find_unplaced_pieces_in_result(valid_profiles, cut_plans)
                total_pieces_unplaced = len(unplaced_pieces)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á–µ—Ç–∞
                if total_pieces_placed != total_pieces_needed:
                    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –ø–æ–¥—Å—á–µ—Ç–µ –¥–µ—Ç–∞–ª–µ–π!")
                    print(f"   –ù—É–∂–Ω–æ: {total_pieces_needed}")
                    print(f"   –†–∞–∑–º–µ—â–µ–Ω–æ: {total_pieces_placed}")
                    print(f"   –†–∞–∑–Ω–∏—Ü–∞: {total_pieces_placed - total_pieces_needed}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç
                    corrected_total = 0
                    for plan in cut_plans:
                        plan_count = getattr(plan, 'count', 1)
                        if hasattr(plan, 'cuts') and plan.cuts:
                            for cut in plan.cuts:
                                if isinstance(cut, dict) and 'quantity' in cut:
                                    corrected_total += int(cut.get('quantity', 0)) * plan_count
                    
                    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç: {corrected_total}")
                    if corrected_total == total_pieces_needed:
                        total_pieces_placed = corrected_total
                        print("   ‚úÖ –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
                    else:
                        print("   ‚ùå –ü–æ–¥—Å—á–µ—Ç –≤—Å–µ –µ—â–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
                
                result.statistics['total_pieces_needed'] = int(total_pieces_needed)
                result.statistics['total_pieces_placed'] = int(total_pieces_placed)
                result.statistics['total_pieces_unplaced'] = int(total_pieces_unplaced)
                result.statistics['placement_efficiency'] = round((total_pieces_placed / total_pieces_needed * 100) if total_pieces_needed > 0 else 0, 1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª—è—Ö
                if total_pieces_unplaced > 0:
                    result.statistics['unplaced_details'] = [
                        {
                            'profile_id': p['profile_id'],
                            'profile_code': p.get('profile_code', ''),
                            'length': p['length'],
                            'element_name': p['element_name']
                        }
                        for p in unplaced_pieces[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    ]
                    
                    print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: {total_pieces_unplaced} –¥–µ—Ç–∞–ª–µ–π –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã!")
                    print(f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {result.statistics['placement_efficiency']}%")
                else:
                    print(f"‚úÖ –í–°–ï –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã! ({total_pieces_placed}/{total_pieces_needed})")
                    print("üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: 100%")
                    
            except Exception as stats_err:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–∞–ª–µ–π: {stats_err}")
                result.statistics['total_pieces_needed'] = 0
                result.statistics['total_pieces_placed'] = 0
                result.statistics['total_pieces_unplaced'] = 0
                result.statistics['placement_efficiency'] = 0
            
            if progress_fn:
                progress_fn(100)
                
            return result
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}"
            print(f"‚ùå {error_msg}")
            return self._create_error_result(error_msg)
    
    def _simple_fit_algorithm(self, profiles: List[Profile], stocks: List[Stock], progress_fn=None) -> List[CutPlan]:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –æ—Ç—Ö–æ–¥–æ–≤
        """
        cut_plans = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Å–∫–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Piece
        pieces_to_place = []
        for profile in profiles:
            for i in range(profile.quantity):
                piece = Piece(
                    profile_id=profile.id,
                    profile_code=profile.profile_code,
                    length=profile.length,
                    element_name=profile.element_name,
                    order_id=profile.order_id,
                    piece_id=f"{profile.id}_{profile.length}_{profile.order_id}_{i}",
                    orderitemsid=profile.orderitemsid,
                    izdpart=profile.izdpart,
                    itemsdetailid=profile.itemsdetailid
                )
                pieces_to_place.append(piece)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫
        self._distribute_cells_for_profiles(pieces_to_place)
        
        total_pieces = len(pieces_to_place)
        print(f"üîß –°–æ–∑–¥–∞–Ω–æ {total_pieces} –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤
        available_stocks = []
        for stock in stocks:
            if stock.is_remainder:
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ quantity –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –í–°–ï–ì–î–ê 1!
                # –ï—Å–ª–∏ quantity > 1, —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö - –∫–∞–∂–¥—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω
                if stock.quantity != 1:
                    print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {stock.id} –∏–º–µ–µ—Ç quantity={stock.quantity}, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤ 1")
                
                # –°–æ–∑–¥–∞–µ–º –û–î–ò–ù –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–ª–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
                available_stocks.append({
                    'id': f"{stock.id}_remainder_unique",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
                    'original_id': stock.id,
                    'length': stock.length,
                    'profile_code': getattr(stock, 'profile_code', None),
                    'warehouseremaindersid': getattr(stock, 'warehouseremaindersid', None),
                    'groupgoods_thick': getattr(stock, 'groupgoods_thick', 6000),
                    'is_remainder': True,
                    'used_length': 0,
                    'cuts': [],
                    'cuts_count': 0,
                    'quantity': 1,  # –í–°–ï–ì–î–ê 1 –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                    'used_quantity': 0,
                    'max_usage': 1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π = 1
                    'original_stock': stock,
                    'instance_id': 1,  # –í—Å–µ–≥–¥–∞ 1, —Ç–∞–∫ –∫–∞–∫ –æ—Å—Ç–∞—Ç–æ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω
                    'is_used': False  # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                })
                print(f"üîß –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {stock.id} (warehouseremaindersid: {getattr(stock, 'warehouseremaindersid', 'N/A')}) –¥–ª–∏–Ω–æ–π {stock.length}–º–º")
            else:
                # –î–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                for i in range(stock.quantity):
                    available_stocks.append({
                        'id': f"{stock.id}_material_{i+1}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        'original_id': stock.id,
                        'length': stock.length,
                        'profile_code': getattr(stock, 'profile_code', None),
                        'warehouseremaindersid': None,
                        'groupgoods_thick': getattr(stock, 'groupgoods_thick', 6000),
                        'is_remainder': False,
                        'used_length': 0,
                        'cuts': [],
                        'cuts_count': 0,
                        'quantity': 1,
                        'used_quantity': 0,
                        'max_usage': 1,  # –ö–∞–∂–¥—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
                        'original_stock': stock,
                        'instance_id': i + 1,
                        'is_used': False
                    })
                print(f"üîß –°–æ–∑–¥–∞–Ω–æ {stock.quantity} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ü–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ {stock.id} –¥–ª–∏–Ω–æ–π {stock.length}–º–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ö–ª—ã—Å—Ç—ã –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        for stock in available_stocks:
            if not all(key in stock for key in ['id', 'length', 'used_length', 'cuts', 'cuts_count', 'quantity', 'used_quantity']):
                print(f"‚ö†Ô∏è –•–ª—ã—Å—Ç {stock.get('id', 'unknown')} –Ω–µ –∏–º–µ–µ—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π")
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                stock.setdefault('used_length', 0)
                stock.setdefault('cuts', [])
                stock.setdefault('cuts_count', 0)
                stock.setdefault('quantity', 1)
                stock.setdefault('used_quantity', 0)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º/—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–ª—ã—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        if not self.settings.use_remainders:
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
            available_stocks = [s for s in available_stocks if not bool(s.get('is_remainder'))]
            available_stocks.sort(key=lambda x: x['length'])
        else:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–º–µ—é—Ç –ê–ë–°–û–õ–Æ–¢–ù–´–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç!
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –±—ã–ª–∏ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
            remainders = [s for s in available_stocks if s.get('is_remainder')]
            materials = [s for s in available_stocks if not s.get('is_remainder')]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã (—Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ)
            remainders.sort(key=lambda x: -x['length'])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–ª–∏–Ω—ã 
            materials.sort(key=lambda x: x['length'])
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º: –°–ù–ê–ß–ê–õ–ê –í–°–ï –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ—Ç–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            available_stocks = remainders + materials
            
            print(f"üîß –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è: {len(remainders)} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –Ω–∞—á–∞–ª–µ, {len(materials)} —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å–ª–µ")
        
        # –†–ê–ó–ú–ï–©–ê–ï–ú –î–ï–¢–ê–õ–ò –û–î–ò–ù –†–ê–ó - —É–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—ã!
        print("üöÄ –ó–ê–ü–£–°–ö–ê–Æ –û–î–ò–ù –ü–†–û–•–û–î –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        placed_count = self._single_pass_optimization(pieces_to_place, available_stocks, progress_fn)
        
        if progress_fn:
            progress_fn(70)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–æ
        unplaced_pieces = self._find_unplaced_pieces(pieces_to_place, available_stocks)
        if unplaced_pieces:
            print(f"‚ö†Ô∏è {len(unplaced_pieces)} –¥–µ—Ç–∞–ª–µ–π –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞")
            
            # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å
            if len(unplaced_pieces) > 0:
                print("üîß –ü—ã—Ç–∞—é—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ—Ç–∞–ª–∏ –≤ –Ω–æ–≤—ã–µ —Ö–ª—ã—Å—Ç—ã...")
                additional_placed = self._place_remaining_pieces(unplaced_pieces, available_stocks, stocks)
                placed_count += additional_placed
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                final_unplaced = self._find_unplaced_pieces(pieces_to_place, available_stocks)
                if final_unplaced:
                    print(f"‚ö†Ô∏è {len(final_unplaced)} –¥–µ—Ç–∞–ª–µ–π –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω—ã")
                    print("üîß –°–æ–∑–¥–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–µ—Ç–∞–ª–µ–π...")
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–µ—Ç–∞–ª–µ–π
                    self._create_final_stocks_for_unplaced(final_unplaced, available_stocks, stocks)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                    final_check = self._find_unplaced_pieces(pieces_to_place, available_stocks)
                    if final_check:
                        print(f"‚ùå {len(final_check)} –¥–µ—Ç–∞–ª–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤")
                        for piece in final_check:
                            print(f"   - {piece.element_name}: {piece.length}–º–º (–∞—Ä—Ç–∏–∫—É–ª: {piece.profile_code})")
                    else:
                        print("‚úÖ –í—Å–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤!")
                else:
                    print("‚úÖ –í—Å–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã!")
        else:
            print("‚úÖ –í—Å–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ö–æ–¥–µ!")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã —Ä–∞—Å–ø–∏–ª–∞ –¢–û–õ–¨–ö–û –¥–ª—è —Ö–ª—ã—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ö–ª—ã—Å—Ç–∞
        for stock in available_stocks:
            if stock['cuts']:  # –¢–æ–ª—å–∫–æ —Ö–ª—ã—Å—Ç—ã —Å —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
                cut_plan = self._create_cut_plan_from_stock(stock)
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–ª–∞–Ω
                if not cut_plan.validate(self.settings.blade_width):
                    analysis = self._analyze_cut_plan(cut_plan)
                    print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞ —Ö–ª—ã—Å—Ç–∞ {cut_plan.stock_id} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
                    print(f"   –î–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞: {analysis['stock_length']:.0f}–º–º")
                    print(f"   –°—É–º–º–∞ –¥–µ—Ç–∞–ª–µ–π: {analysis['total_pieces_length']:.0f}–º–º")
                    print(f"   –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–æ–≤: {analysis['saw_width_total']:.0f}–º–º")
                    print(f"   –û–±—â–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {analysis['used_length']:.0f}–º–º")
                    print(f"   –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {analysis['used_length'] - analysis['stock_length']:.0f}–º–º")
                    print(f"   –î–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏–ª–∞: {analysis['cuts_detail']}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    corrected_plans = self._auto_correct_invalid_plan(cut_plan, available_stocks, stocks)
                    if corrected_plans:
                        print(f"‚úÖ –ü–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞–Ω–æ–≤: {len(corrected_plans)}")
                        cut_plans.extend(corrected_plans)
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω")
                        cut_plans.append(cut_plan)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                else:
                    cut_plans.append(cut_plan)
                    print(f"üîß –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ö–ª—ã—Å—Ç–∞ {stock['id']} (original_id: {stock['original_id']})")
                    print(f"   –î–µ—Ç–∞–ª–∏: {cut_plan.cuts}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã –≤ –æ–¥–∏–Ω —Å –ø–æ–ª–µ–º count
        return self._group_identical_plans(cut_plans)
    
    def _fill_remainders_with_small_pieces(self, all_pieces: List[Piece], available_stocks: List[Dict], progress_fn=None):
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _fill_remainders_with_small_pieces —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _optimize_combinations(self, available_stocks: List[Dict], progress_fn=None):
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _optimize_combinations —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _progressive_optimization(self, pieces_to_place: List[Piece], available_stocks: List[Dict], progress_fn=None) -> int:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _progressive_optimization —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _simple_first_fit_placement(self, pieces_to_place: List[Piece], available_stocks: List[Dict]) -> int:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _simple_first_fit_placement —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _improved_best_fit_placement(self, pieces_to_place: List[Piece], available_stocks: List[Dict]) -> int:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _improved_best_fit_placement —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _optimize_remainders(self, pieces_to_place: List[Piece], available_stocks: List[Dict]) -> int:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _optimize_remainders —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _force_place_remaining_pieces(self, pieces_to_place: List[Piece], available_stocks: List[Dict]) -> int:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _force_place_remaining_pieces —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _force_place_unplaced_pieces(self, unplaced_pieces: List[Piece], available_stocks: List[Dict], original_stocks: List[Stock]) -> int:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _force_place_unplaced_pieces —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _create_additional_stocks_for_unplaced(self, unplaced_pieces: List[Piece], available_stocks: List[Dict], original_stocks: List[Stock]):
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _create_additional_stocks_for_unplaced —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _create_forced_stock_for_piece(self, piece: Piece, available_stocks: List[Dict], original_stocks: List[Stock]):
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _create_forced_stock_for_piece —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _dynamic_placement_forces(self, pieces_to_place: List[Piece], available_stocks: List[Dict]) -> int:
        """
        –£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        """
        print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _dynamic_placement_forces —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return 0
    
    def _calculate_cuts_length(self, cuts: List[Dict]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –¥–ª–∏–Ω—É –¥–µ—Ç–∞–ª–µ–π —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–ø–∏–ª–æ–≤"""
        if not cuts:
            return 0
        
        total_pieces_length = sum(cut['length'] * cut['quantity'] for cut in cuts)
        total_cuts_count = sum(cut['quantity'] for cut in cuts)
        saw_width_total = self.settings.blade_width * (total_cuts_count - 1) if total_cuts_count > 1 else 0
        
        return total_pieces_length + saw_width_total
    
    def _add_piece_to_stock(self, stock: Dict, piece: Piece, force_placement: bool = False) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—É—Å–æ–∫ –≤ —Ö–ª—ã—Å—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –¥–µ—Ç–∞–ª—å
            if piece.placed:
                print(f"‚ö†Ô∏è –î–µ—Ç–∞–ª—å {piece.length}–º–º —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ —Ö–ª—ã—Å—Ç–µ {piece.placed_in_stock_id}")
                return False
            
            # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–µ—Ç–∞–ª—å –¥–æ–ª–∂–Ω–∞ –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ —Ö–ª—ã—Å—Ç
            needed_length = piece.length
            
            # –î–æ–±–∞–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–ø–∏–ª–∞ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å–ø–∏–ª—ã
            if stock['cuts_count'] > 0:
                needed_length += self.settings.blade_width
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
            effective_length = max(0, stock['length'] - (self.settings.begin_indent + self.settings.end_indent))
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ç–∞–ª—å –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è
            if stock['used_length'] + needed_length > effective_length:
                if force_placement:
                    print(f"‚ö†Ô∏è FORCE: –î–µ—Ç–∞–ª—å {piece.length}–º–º –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ö–ª—ã—Å—Ç {stock['id']} (–Ω—É–∂–Ω–æ: {stock['used_length'] + needed_length:.0f}–º–º, –¥–æ—Å—Ç—É–ø–Ω–æ: {effective_length:.0f}–º–º)")
                    return False
                else:
                    print(f"‚ùå –î–µ—Ç–∞–ª—å {piece.length}–º–º –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ö–ª—ã—Å—Ç {stock['id']} (–Ω—É–∂–Ω–æ: {stock['used_length'] + needed_length:.0f}–º–º, –¥–æ—Å—Ç—É–ø–Ω–æ: {effective_length:.0f}–º–º)")
                    return False
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å–ø–∏–ª —Ç–∞–∫–æ–≥–æ –∂–µ —Ç–∏–ø–∞ (–≤–∫–ª—é—á–∞—è order_id –¥–ª—è —Ç–æ—á–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏)
            existing_cut = None
            for cut in stock['cuts']:
                if (cut['profile_id'] == piece.profile_id and 
                    cut['length'] == piece.length and 
                    cut.get('order_id') == piece.order_id and
                    cut.get('cell_number') == piece.cell_number): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —è—á–µ–π–∫—É
                    existing_cut = cut
                    break
            
            if existing_cut:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                existing_cut['quantity'] += 1
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å–ø–∏–ª
                cut_data = {
                    'profile_id': piece.profile_id,
                    'profile_code': piece.profile_code,  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ—Ñ–∏–ª—è
                    'length': piece.length,
                    'quantity': 1,
                    'order_id': piece.order_id,  # –î–æ–±–∞–≤–ª—è–µ–º order_id –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
                    'cell_number': piece.cell_number, # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
                    'itemsdetailid': piece.itemsdetailid # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–µ—Ç–∞–ª–∏
                }
                stock['cuts'].append(cut_data)
                print(f"üîß OPTIMIZER: *** –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–Ø *** –î–æ–±–∞–≤–ª–µ–Ω cut —Å order_id: {piece.order_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É –∏ —Å—á–µ—Ç—á–∏–∫
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ needed_length, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç —à–∏—Ä–∏–Ω—É –ø—Ä–æ–ø–∏–ª–∞
            stock['used_length'] += needed_length
            stock['cuts_count'] += 1
            
            # –ü–æ–º–µ—á–∞–µ–º –¥–µ—Ç–∞–ª—å –∫–∞–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é
            try:
                piece.placed = True
                piece.placed_in_stock_id = stock['id']
                print(f"üîß DEBUG: –î–µ—Ç–∞–ª—å {piece.length}–º–º –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –≤ —Ö–ª—ã—Å—Ç–µ {stock['id']}")
                print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stock['used_length']:.0f}–º–º –∏–∑ {effective_length:.0f}–º–º ({stock['used_length']/effective_length*100:.1f}%)")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é: {e}")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö–ª—ã—Å—Ç–∞
            effective_length = max(0, stock['length'] - (self.settings.begin_indent + self.settings.end_indent))
            usage_percent = (stock['used_length'] / effective_length) * 100 if effective_length > 0 else 100
            
            # –î–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã!
            if stock['is_remainder']:
                remaining_length = effective_length - stock['used_length']
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π
                if remaining_length < self.settings.min_remainder_length:
                    stock['is_used'] = True
                    stock['used_quantity'] = 1
                    print(f"üîß –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {stock['id']} –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é (–æ—Å—Ç–∞—Ç–æ–∫ {remaining_length:.0f}–º–º)")
                else:
                    print(f"üîß –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {stock['id']} —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω (–æ—Å—Ç–∞—Ç–æ–∫ {remaining_length:.0f}–º–º) - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –¥–µ—Ç–∞–ª–∏")
            else:
                # –î–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
                # –ò–õ–ò –µ—Å–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–µ—Ç–∞–ª–µ–π
                remaining_length = effective_length - stock['used_length']
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                # 1. –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –±–æ–ª–µ–µ 95% –ò–õ–ò
                # 2. –û—Å—Ç–∞–µ—Ç—Å—è –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–µ—Ç–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300–º–º)
                if usage_percent > 95 or remaining_length < self.settings.min_remainder_length:
                    stock['is_used'] = True
                    stock['used_quantity'] = stock.get('max_usage', 1)  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                    print(f"üîß –¶–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª {stock['id']} –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {usage_percent:.1f}% (–æ—Å—Ç–∞—Ç–æ–∫ {remaining_length:.0f}–º–º) –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π")
                else:
                    print(f"üîß –¶–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª {stock['id']} –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {usage_percent:.1f}% (–æ—Å—Ç–∞—Ç–æ–∫ {remaining_length:.0f}–º–º) - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if force_placement:
                print(f"üîß FORCE: –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ —Ö–ª—ã—Å—Ç {stock['id']} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)")
            else:
                print(f"üîß DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ —Ö–ª—ã—Å—Ç {stock['id']}")
                print(f"   –¢–∏–ø: {'–î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫' if stock['is_remainder'] else '–¶–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç'}")
                print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ö–ª—ã—Å—Ç–æ–≤: {stock['used_quantity']}/{stock['quantity']}")
                print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {stock['used_length']:.0f}–º–º")
                if stock['is_remainder']:
                    print(f"   Warehouseremaindersid: {stock.get('warehouseremaindersid', 'N/A')}")
                    print(f"   Instance ID: {stock.get('instance_id', 'N/A')}")
            
            return True  # –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ _add_piece_to_stock: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
            return False
    
    def _create_cut_plan_from_stock(self, stock: Dict) -> CutPlan:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ö–ª—ã—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CutPlan –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        temp_cuts = stock['cuts'].copy()
        temp_plan = CutPlan(
            stock_id=stock['original_id'],
            stock_length=stock['length'],
            cuts=temp_cuts,
            waste=0,
            waste_percent=0
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É
        used_length = temp_plan.get_used_length(self.settings.blade_width)
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–ª–∏–Ω–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–æ–≤
        effective_length = max(0, stock['length'] - (self.settings.begin_indent + self.settings.end_indent))
        waste_or_remainder = max(0, effective_length - used_length)
        waste = waste_or_remainder
        remainder = None
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:
        # –ï—Å–ª–∏ –∫—Ä–æ–∏–º –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫, —Ç–æ –æ–±—Ä–µ–∑–æ–∫ –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ min_remainder_length
        if stock.get('is_remainder', False):
            # –î–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–µ–∑–æ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
            if waste_or_remainder >= self.settings.min_remainder_length:
                remainder = waste_or_remainder
                waste = 0
                print(f"üîß –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫: –æ–±—Ä–µ–∑–æ–∫ {waste_or_remainder:.0f}–º–º >= {self.settings.min_remainder_length}–º–º - —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–æ–≤—ã–º –¥–µ–ª–æ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º")
            else:
                # –û–±—Ä–µ–∑–æ–∫ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã - –≤ –æ—Ç—Ö–æ–¥—ã
                waste = waste_or_remainder
                remainder = None
                print(f"üîß –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫: –æ–±—Ä–µ–∑–æ–∫ {waste_or_remainder:.0f}–º–º < {self.settings.min_remainder_length}–º–º - –≤ –æ—Ç—Ö–æ–¥—ã")
        else:
            # –î–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if waste_or_remainder >= self.settings.min_remainder_length:
                remainder = waste_or_remainder
                waste = 0
                print(f"üîß –¶–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: –æ—Å—Ç–∞—Ç–æ–∫ {waste_or_remainder:.0f}–º–º >= {self.settings.min_remainder_length}–º–º - —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–µ–ª–æ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º")
            else:
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Ö–æ–¥: –¥–æ–ø—É—Å–∫–∞–µ–º, –Ω–æ —Å—Ç–∞—Ä–∞–µ–º—Å—è –∏–∑–±–µ–≥–∞—Ç—å –≤ –≤—ã–±–æ—Ä–µ
                waste = waste_or_remainder
                remainder = None
                print(f"üîß –¶–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: –æ—Ç—Ö–æ–¥ {waste_or_remainder:.0f}–º–º < {self.settings.min_remainder_length}–º–º")
        
        waste_percent = (waste / stock['length'] * 100) if stock['length'] > 0 else 0
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ is_remainder –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ö–ª—ã—Å—Ç–∞
        is_remainder_value = bool(stock.get('is_remainder', False))
        
        # –ü–æ–ª—É—á–∞–µ–º warehouseremaindersid –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ö–ª—ã—Å—Ç–∞
        warehouseremaindersid_value = stock.get('warehouseremaindersid', None)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîß DEBUG: –°–æ–∑–¥–∞—é CutPlan –¥–ª—è —Ö–ª—ã—Å—Ç–∞ {stock['original_id']}")
        print(f"   –î–ª–∏–Ω–∞: {stock['length']}–º–º")
        print(f"   is_remainder: {is_remainder_value}")
        print(f"   warehouseremaindersid: {warehouseremaindersid_value}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–∏–ª–æ–≤: {len(stock['cuts'])}")
        print(f"   –î–µ—Ç–∞–ª–∏: {stock['cuts']}")
        
        return CutPlan(
            stock_id=stock['original_id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID —Ö–ª—ã—Å—Ç–∞
            stock_length=stock['length'],
            cuts=stock['cuts'].copy(),
            waste=waste,
            waste_percent=waste_percent,
            remainder=remainder,
            count=1,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º count=1, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–∏–Ω –ø–ª–∞–Ω
            is_remainder=is_remainder_value,
            warehouseremaindersid=warehouseremaindersid_value
        )
    
    def _calculate_stats(self, cut_plans: List[CutPlan]) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            if not cut_plans:
                return {
                    'total_stocks': 0,
                    'total_cuts': 0,
                    'total_length': 0,
                    'total_waste': 0,
                    'waste_percent': 0,
                    'avg_waste_per_stock': 0
                }
            
            total_stocks = sum(getattr(plan, 'count', 1) for plan in cut_plans)
            total_cuts = sum(plan.get_cuts_count() * getattr(plan, 'count', 1) for plan in cut_plans)
            total_length = sum(plan.stock_length * getattr(plan, 'count', 1) for plan in cut_plans)
            total_waste = sum(plan.waste * getattr(plan, 'count', 1) for plan in cut_plans)
            waste_percent = (total_waste / total_length * 100) if total_length > 0 else 0
            
            return {
                'total_stocks': total_stocks,
                'total_cuts': total_cuts,
                'total_length': total_length,
                'total_waste': total_waste,
                'waste_percent': waste_percent,
                'avg_waste_per_stock': total_waste / total_stocks if total_stocks > 0 else 0
            }
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ _calculate_stats: {e}")
            return {
                'total_stocks': 0,
                'total_cuts': 0,
                'total_length': 0,
                'total_waste': 0,
                'waste_percent': 0,
                'avg_waste_per_stock': 0
            }
    
    def _analyze_cut_plan(self, cut_plan: CutPlan) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        total_pieces_length = cut_plan.get_total_pieces_length()
        used_length = cut_plan.get_used_length(self.settings.blade_width)
        cuts_count = cut_plan.get_cuts_count()
        saw_width_total = self.settings.blade_width * (cuts_count - 1) if cuts_count > 1 else 0
        
        return {
            'stock_id': cut_plan.stock_id,
            'stock_length': cut_plan.stock_length,
            'total_pieces_length': total_pieces_length,
            'used_length': used_length,
            'cuts_count': cuts_count,
            'saw_width_total': saw_width_total,
            'waste': cut_plan.waste,
            'waste_percent': cut_plan.waste_percent,
            'is_valid': cut_plan.validate(self.settings.blade_width),
            'cuts_detail': cut_plan.cuts
        }
    
    def _create_error_result(self, message: str) -> OptimizationResult:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π"""
        return OptimizationResult(
            cut_plans=[],
            total_waste=0,
            total_waste_percent=0,
            settings=self.settings,
            success=False,
            message=message
        )
    
    def _validate_input_remainders(self, stocks: List[Stock]) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        validation_result = {
            "has_duplicates": False,
            "duplicates": [],
            "total_remainders": 0,
            "unique_remainders": 0
        }
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º warehouseremaindersid
        remainder_counts = {}
        
        for stock in stocks:
            if stock.is_remainder and hasattr(stock, 'warehouseremaindersid') and stock.warehouseremaindersid:
                validation_result["total_remainders"] += stock.quantity
                
                whrid = stock.warehouseremaindersid
                if whrid not in remainder_counts:
                    remainder_counts[whrid] = {
                        "count": 0,
                        "stock_ids": [],
                        "total_quantity": 0
                    }
                
                remainder_counts[whrid]["count"] += 1
                remainder_counts[whrid]["stock_ids"].append(stock.id)
                remainder_counts[whrid]["total_quantity"] += stock.quantity
        
        validation_result["unique_remainders"] = len(remainder_counts)
        
        # –ò—â–µ–º –¥—É–±–ª–∏ - –∫–∞–∂–¥—ã–π warehouseremaindersid –¥–æ–ª–∂–µ–Ω –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –°–¢–†–û–ì–û –æ–¥–∏–Ω —Ä–∞–∑ —Å quantity=1
        for whrid, info in remainder_counts.items():
            if info["count"] > 1:
                validation_result["has_duplicates"] = True
                validation_result["duplicates"].append({
                    "warehouseremaindersid": whrid,
                    "count": info["count"],
                    "total_quantity": info["total_quantity"],
                    "stock_ids": info["stock_ids"],
                    "issue": f"warehouseremaindersid {whrid} –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {info['count']} —Ä–∞–∑ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1)"
                })
            elif info["total_quantity"] > 1:
                validation_result["has_duplicates"] = True
                validation_result["duplicates"].append({
                    "warehouseremaindersid": whrid,
                    "count": info["count"],
                    "total_quantity": info["total_quantity"],
                    "stock_ids": info["stock_ids"],
                    "issue": f"warehouseremaindersid {whrid} –∏–º–µ–µ—Ç quantity={info['total_quantity']} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1)"
                })
        
        if validation_result["has_duplicates"]:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏:")
            for duplicate in validation_result["duplicates"]:
                print(f"   {duplicate['issue']}")
                print(f"   Stock IDs: {duplicate['stock_ids']}")
        else:
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞: {validation_result['total_remainders']} –æ—Å—Ç–∞—Ç–∫–æ–≤, {validation_result['unique_remainders']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
        
        return validation_result
    
    def _check_material_availability(self, profiles: List[Profile], stocks: List[Stock]) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        check_result = {
            "sufficient": True,
            "shortages": [],
            "by_profile": {}
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        needs_by_profile = {}
        for profile in profiles:
            code = profile.profile_code
            if code not in needs_by_profile:
                needs_by_profile[code] = {
                    "pieces": 0,
                    "total_length": 0,
                    "max_length": 0
                }
            
            needs_by_profile[code]["pieces"] += profile.quantity
            needs_by_profile[code]["total_length"] += profile.length * profile.quantity
            needs_by_profile[code]["max_length"] = max(needs_by_profile[code]["max_length"], profile.length)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        available_by_profile = {}
        for stock in stocks:
            code = getattr(stock, 'profile_code', '') or ''
            if not code:
                continue
                
            if code not in available_by_profile:
                available_by_profile[code] = {
                    "total_length": 0,
                    "pieces": 0,
                    "stocks": []
                }
            
            # –î–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫–∞–∂–¥—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            if stock.is_remainder:
                available_by_profile[code]["total_length"] += stock.length * stock.quantity
                available_by_profile[code]["pieces"] += stock.quantity
            else:
                # –î–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø–æ–≤—É—é –¥–ª–∏–Ω—É
                typical_length = getattr(stock, 'groupgoods_thick', 6000) or 6000
                available_by_profile[code]["total_length"] += typical_length * stock.quantity
                available_by_profile[code]["pieces"] += stock.quantity
            
            available_by_profile[code]["stocks"].append(stock)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å
        for profile_code, needs in needs_by_profile.items():
            available = available_by_profile.get(profile_code, {
                "total_length": 0,
                "pieces": 0,
                "stocks": []
            })
            
            check_result["by_profile"][profile_code] = {
                "needed_pieces": needs["pieces"],
                "needed_length": needs["total_length"],
                "available_pieces": available["pieces"],
                "available_length": available["total_length"],
                "sufficient": available["total_length"] >= needs["total_length"]
            }
            
            # –ï—Å–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            if available["total_length"] < needs["total_length"]:
                check_result["sufficient"] = False
                shortage = {
                    "profile_code": profile_code,
                    "needed": needs["pieces"],
                    "total_length": needs["total_length"],
                    "available": available["pieces"],
                    "available_length": available["total_length"],
                    "shortage": needs["pieces"] - available["pieces"],
                    "shortage_length": needs["total_length"] - available["total_length"]
                }
                check_result["shortages"].append(shortage)
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
        print(f"   –ê—Ä—Ç–∏–∫—É–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {len(needs_by_profile)}")
        print(f"   –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(available_by_profile)}")
        print(f"   –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {'–î–∞' if check_result['sufficient'] else '–ù–µ—Ç'}")
        
        if not check_result["sufficient"]:
            print(f"   –ù–µ—Ö–≤–∞—Ç–∫–∞ –ø–æ {len(check_result['shortages'])} –∞—Ä—Ç–∏–∫—É–ª–∞–º:")
            for shortage in check_result["shortages"]:
                print(f"     {shortage['profile_code']}: –Ω–µ—Ö–≤–∞—Ç–∫–∞ {shortage['shortage_length']:.0f}–º–º")
        
        return check_result
    
    def _auto_correct_invalid_plan(self, invalid_plan: 'CutPlan', available_stocks: List[Dict], original_stocks: List['Stock']) -> List['CutPlan']:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø–∏–ª–∞
        
        Args:
            invalid_plan: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞
            available_stocks: –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã  
            original_stocks: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞
        """
        try:
            print(f"üîß –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é –ø–ª–∞–Ω–∞ —Ö–ª—ã—Å—Ç–∞ {invalid_plan.stock_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
            pieces_to_redistribute = []
            for cut in invalid_plan.cuts:
                if isinstance(cut, dict) and 'length' in cut and 'quantity' in cut and 'profile_id' in cut:
                    for i in range(cut['quantity']):
                        piece = Piece(
                            profile_id=cut['profile_id'],
                            profile_code=cut.get('profile_code', ''),
                            length=cut['length'],
                            element_name=f"–ü–µ—Ä–µ—Ä–∞–∑–º–µ—â–∞–µ–º–∞—è –¥–µ—Ç–∞–ª—å {cut['length']}–º–º",
                            order_id=1  # –í—Ä–µ–º–µ–Ω–Ω—ã–π order_id
                        )
                        pieces_to_redistribute.append(piece)
            
            if not pieces_to_redistribute:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                return []
            
            print(f"üì¶ –ü–µ—Ä–µ—Ä–∞–∑–º–µ—â–∞—é {len(pieces_to_redistribute)} –¥–µ—Ç–∞–ª–µ–π...")
            
            corrected_plans = []
            unplaced_pieces = pieces_to_redistribute.copy()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
            print(f"üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è {len(unplaced_pieces)} –¥–µ—Ç–∞–ª–µ–π...")
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            max_iterations = 100
            iteration_count = 0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—é
            while unplaced_pieces and iteration_count < max_iterations:
                iteration_count += 1
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ö–ª—ã—Å—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                best_stock = None
                best_stock_usage = 0
                
                for orig_stock in original_stocks:
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —Ç–∏–ø —Ö–ª—ã—Å—Ç–∞
                    simulated_length = 0
                    simulated_count = 0
                    temp_pieces = unplaced_pieces.copy()
                    
                    for piece in temp_pieces:
                        needed = piece.length + (self.settings.blade_width if simulated_count > 0 else 0)
                        if simulated_length + needed <= orig_stock.length:
                            simulated_length += needed
                            simulated_count += 1
                    
                    usage_percent = (simulated_length / orig_stock.length) * 100 if orig_stock.length > 0 else 0
                    if simulated_count > 0 and usage_percent > best_stock_usage:
                        best_stock = orig_stock
                        best_stock_usage = usage_percent
                
                if best_stock:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–ª—ã—Å—Ç —Å –í–°–ï–ú–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
                    new_stock_id = f"auto_{best_stock.id}_{len(corrected_plans) + 1}_{int(time.time())}"
                    new_stock = {
                        'id': new_stock_id,
                        'original_id': best_stock.id,
                        'length': best_stock.length,
                        'profile_code': getattr(best_stock, 'profile_code', None),
                        'warehouseremaindersid': None,
                        'groupgoods_thick': getattr(best_stock, 'groupgoods_thick', 6000),
                        'is_remainder': False,
                        'used_length': 0,
                        'cuts': [],
                        'cuts_count': 0,
                        'quantity': 1,
                        'used_quantity': 0,
                        'original_stock': best_stock
                    }
                    
                    available_stocks.append(new_stock)
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –Ω–æ–≤—ã–π —Ö–ª—ã—Å—Ç
                    placed_in_new = []
                    for piece in unplaced_pieces.copy():  # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                        if piece.placed:
                            continue
                            
                        needed = piece.length + (self.settings.blade_width if new_stock['cuts_count'] > 0 else 0)
                        if new_stock['used_length'] + needed <= new_stock['length']:
                            if self._add_piece_to_stock(new_stock, piece):
                                placed_in_new.append(piece)
                                print(f"  ‚úÖ –î–µ—Ç–∞–ª—å {piece.length}–º–º —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –Ω–æ–≤—ã–π —Ö–ª—ã—Å—Ç {new_stock_id}")
                            else:
                                print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ –Ω–æ–≤—ã–π —Ö–ª—ã—Å—Ç {new_stock_id}")
                        else:
                            print(f"  ‚ö†Ô∏è –î–µ—Ç–∞–ª—å {piece.length}–º–º –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –Ω–æ–≤—ã–π —Ö–ª—ã—Å—Ç {new_stock_id} (–Ω—É–∂–Ω–æ: {new_stock['used_length'] + needed:.0f}–º–º, –¥–æ—Å—Ç—É–ø–Ω–æ: {new_stock['length']:.0f}–º–º)")
                    
                    # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
                    for piece in placed_in_new:
                        if piece in unplaced_pieces:
                            unplaced_pieces.remove(piece)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–ª—ã—Å—Ç–∞
                    if new_stock['cuts']:
                        new_plan = self._create_cut_plan_from_stock(new_stock)
                        if new_plan.validate(self.settings.blade_width):
                            corrected_plans.append(new_plan)
                            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞–Ω: —Ö–ª—ã—Å—Ç {new_plan.stock_id}")
                        else:
                            print(f"  ‚ö†Ô∏è –ù–æ–≤—ã–π –ø–ª–∞–Ω —Ç–æ–∂–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: —Ö–ª—ã—Å—Ç {new_plan.stock_id}")
                            corrected_plans.append(new_plan)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–∂–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ö–ª—ã—Å—Ç –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–µ—Ç–∞–ª–µ–π")
                    break
            
            if iteration_count >= max_iterations:
                print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π ({max_iterations}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é")
            
            if unplaced_pieces:
                print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ {len(unplaced_pieces)} –¥–µ—Ç–∞–ª–µ–π")
                for piece in unplaced_pieces:
                    print(f"   - {piece.element_name}: {piece.length}–º–º")
            
            print(f"üéØ –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ {len(corrected_plans)} –ø–ª–∞–Ω–æ–≤")
            return corrected_plans
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return []

        return []

    def _get_cuts_signature(self, cuts: List[Dict]) -> tuple:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –Ω–∞–±–æ—Ä–∞ —Ä–∞—Å–ø–∏–ª–æ–≤"""
        normalized = []
        for c in cuts:
            if isinstance(c, dict):
                normalized.append((int(c.get('profile_id', 0) or 0), float(c.get('length', 0) or 0), int(c.get('quantity', 0) or 0)))
        normalized.sort()
        return tuple(normalized)

    def _calc_signature_similarity(self, sig_a: tuple, sig_b: tuple) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä —Ä–∞—Å–∫—Ä–æ—è [0..1].

        –ò–¥–µ—è: —Å—á–∏—Ç–∞–µ–º, –∫–∞–∫–∞—è –¥–æ–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ (profile_id, length).
        –ö–æ–ª-–≤–æ –¥–ª—è –ø–∞—Ä—ã –±–µ—Ä–µ—Ç—Å—è –∫–∞–∫ min(qty_a, qty_b) –∏ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤—Å–µ–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –ø–æ–∑–∏—Ü–∏—è–º.
        –î–µ–ª–∏–º –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º–∞—Ä–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0).
        """
        if not sig_a and not sig_b:
            return 1.0
        if not sig_a or not sig_b:
            return 0.0

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏: –∫–ª—é—á=(profile_id,length), –∑–Ω–∞—á–µ–Ω–∏–µ=qty
        def to_map(sig: tuple) -> Dict[tuple, int]:
            acc: Dict[tuple, int] = {}
            for profile_id, length, qty in sig:
                key = (profile_id, length)
                acc[key] = acc.get(key, 0) + int(qty)
            return acc

        a_map = to_map(sig_a)
        b_map = to_map(sig_b)

        # –û–±—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å (—Å—É–º–º–∞ qty) –ø–æ –∫–∞–∂–¥–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
        sum_a = sum(a_map.values())
        sum_b = sum(b_map.values())
        if max(sum_a, sum_b) == 0:
            return 0.0

        # –°–æ–≤–ø–∞–≤—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        common = 0
        for key, qty_a in a_map.items():
            qty_b = b_map.get(key)
            if qty_b:
                common += min(qty_a, qty_b)

        return common / max(sum_a, sum_b)

    def _group_identical_plans(self, cut_plans: List[CutPlan]) -> List[CutPlan]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª–∏–Ω–∞ –∏ –Ω–∞–±–æ—Ä —Ä–∞—Å–ø–∏–ª–æ–≤, –∏ —Ç–∏–ø —Ö–ª—ã—Å—Ç–∞)"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if not self.settings.pair_optimization:
            print("üîß –ü–∞—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return cut_plans

        groups: Dict[tuple, CutPlan] = {}
        remainder_plans = []  # –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        
        for plan in cut_plans:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ù–ï –≥—Ä—É–ø–ø–∏—Ä—É–µ–º!
            # –ö–∞–∂–¥—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if getattr(plan, 'is_remainder', False):
                remainder_plans.append(plan)
                print(f"üîß –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {plan.stock_id} –Ω–µ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç—Å—è (warehouseremaindersid: {getattr(plan, 'warehouseremaindersid', None)})")
                continue
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            cuts_sig = self._get_cuts_signature(plan.cuts)
            key = (
                float(plan.stock_length),
                cuts_sig,
                bool(getattr(plan, 'is_remainder', False)),  # –í—Å–µ–≥–¥–∞ False –¥–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                getattr(plan, 'warehouseremaindersid', None)  # –í—Å–µ–≥–¥–∞ None –¥–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            )

            plan_count = getattr(plan, 'count', 1)
            if key in groups:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥—Ä—É–ø–ø—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                old_count = getattr(groups[key], 'count', 1)
                groups[key].count = old_count + plan_count
                print(f"üîß –ì—Ä—É–ø–ø–∏—Ä—É—é –ø–ª–∞–Ω —Ü–µ–ª—å–Ω–æ–≥–æ —Ö–ª—ã—Å—Ç–∞ {plan.stock_id} —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º (—Ç–µ–ø–µ—Ä—å count={groups[key].count})")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                new_plan = CutPlan(
                    stock_id=plan.stock_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
                    stock_length=plan.stock_length,
                    cuts=plan.cuts.copy(),
                    waste=plan.waste,
                    waste_percent=plan.waste_percent,
                    remainder=plan.remainder,
                    count=plan_count,
                    is_remainder=False,  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ False –¥–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                    warehouseremaindersid=None  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ None –¥–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                )
                groups[key] = new_plan
                print(f"üîß –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø–ª–∞–Ω–∞ —Ü–µ–ª—å–Ω–æ–≥–æ —Ö–ª—ã—Å—Ç–∞ {plan.stock_id} (count={plan_count})")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ü–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) –∏ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (–Ω–µ—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        result = list(groups.values()) + remainder_plans
        print(f"üîß –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(cut_plans)} –ø–ª–∞–Ω–æ–≤ ‚Üí {len(result)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤")
        print(f"   –¶–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {len(groups)} –≥—Ä—É–ø–ø")
        print(f"   –î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏: {len(remainder_plans)} –ø–ª–∞–Ω–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        total_pieces_before = sum(
            sum(cut.get('quantity', 0) for cut in plan.cuts) * getattr(plan, 'count', 1)
            for plan in cut_plans
        )
        total_pieces_after = sum(
            sum(cut.get('quantity', 0) for cut in plan.cuts) * getattr(plan, 'count', 1)
            for plan in result
        )
        
        if total_pieces_before != total_pieces_after:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π!")
            print(f"   –î–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {total_pieces_before}")
            print(f"   –ü–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {total_pieces_after}")
            print(f"   –†–∞–∑–Ω–∏—Ü–∞: {total_pieces_after - total_pieces_before}")
        else:
            print("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        remainder_validation_errors = self._validate_remainder_usage(result)
        if remainder_validation_errors:
            print("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò —Å –¥–µ–ª–æ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏:")
            for error in remainder_validation_errors:
                print(f"   - {error}")
        else:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞")
        
        return result

    def _validate_remainder_usage(self, cut_plans: List[CutPlan]) -> List[str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ (–ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –≤—Å–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
        """
        errors = []
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        used_remainders = {}
        
        for plan in cut_plans:
            is_remainder = getattr(plan, 'is_remainder', False)
            
            if is_remainder:
                plan_count = getattr(plan, 'count', 1)
                warehouseremaindersid = getattr(plan, 'warehouseremaindersid', None)
                
                # –û—à–∏–±–∫–∞ 1: count > 1 –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                if plan_count > 1:
                    errors.append(f"–î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {plan.stock_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {plan_count} —Ä–∞–∑ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1)")
                
                # –û—à–∏–±–∫–∞ 2: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ warehouseremaindersid
                if warehouseremaindersid:
                    if warehouseremaindersid in used_remainders:
                        errors.append(f"warehouseremaindersid {warehouseremaindersid} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ (—Ö–ª—ã—Å—Ç—ã {used_remainders[warehouseremaindersid]} –∏ {plan.stock_id})")
                    else:
                        used_remainders[warehouseremaindersid] = plan.stock_id
                else:
                    errors.append(f"–î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ {plan.stock_id} –Ω–µ –∏–º–µ–µ—Ç warehouseremaindersid")
        
        return errors

    def _find_unplaced_pieces(self, all_pieces: List[Piece], available_stocks: List[Dict]) -> List[Piece]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–ª–∞–≥–æ–º placed
        """
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ
        unplaced_pieces = []
        for piece in all_pieces:
            if not piece.placed:
                unplaced_pieces.append(piece)
        
        return unplaced_pieces

    def _find_unplaced_pieces_in_result(self, profiles: List[Profile], cut_plans: List[CutPlan]) -> List[Dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è: —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        """
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ø–ª–∞–Ω–∞—Ö
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –ø–æ (profile_id, length)
        placed_pieces_count = {}
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –ø–ª–∞–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º
        for plan in cut_plans:
            plan_count = getattr(plan, 'count', 1)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤
            print(f"üîß –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–ª–∞–Ω {plan.stock_id} —Å count={plan_count}")
            
            for cut in plan.cuts:
                if isinstance(cut, dict) and 'length' in cut and 'quantity' in cut and 'profile_id' in cut:
                    piece_key = (cut['profile_id'], cut['length'])
                    # –£—á–∏—Ç—ã–≤–∞–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ cut, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–Ω–æ–≤
                    total_quantity = cut['quantity'] * plan_count
                    placed_pieces_count[piece_key] = placed_pieces_count.get(piece_key, 0) + total_quantity
                    print(f"  - –î–µ—Ç–∞–ª—å {cut['profile_id']}: {cut['length']}–º–º √ó {cut['quantity']}—à—Ç √ó {plan_count} = {total_quantity}—à—Ç")
                else:
                    print(f"  ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π cut: {cut}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        needed_pieces_count = {}
        for profile in profiles:
            piece_key = (profile.id, profile.length)
            needed_pieces_count[piece_key] = needed_pieces_count.get(piece_key, 0) + profile.quantity
            print(f"üîß –ù—É–∂–Ω–æ –¥–µ—Ç–∞–ª–µ–π {profile.id}: {profile.length}–º–º √ó {profile.quantity}—à—Ç")
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        unplaced_pieces = []
        print("\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
        
        for profile in profiles:
            piece_key = (profile.id, profile.length)
            needed = needed_pieces_count.get(piece_key, 0)
            placed = placed_pieces_count.get(piece_key, 0)
            
            unplaced_count = max(0, needed - placed)
            
            print(f"  {profile.element_name} ({profile.length}–º–º): –Ω—É–∂–Ω–æ {needed}, —Ä–∞–∑–º–µ—â–µ–Ω–æ {placed}, –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ {unplaced_count}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
            for i in range(unplaced_count):
                unplaced_pieces.append({
                    'profile_id': profile.id,
                    'profile_code': profile.profile_code,
                    'length': profile.length,
                    'element_name': profile.element_name
                })
        
        print(f"üîß –í—Å–µ–≥–æ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π: {len(unplaced_pieces)}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_needed = sum(needed_pieces_count.values())
        total_placed = sum(placed_pieces_count.values())
        print(f"üîß –ò–¢–û–ì–û: –Ω—É–∂–Ω–æ {total_needed}, —Ä–∞–∑–º–µ—â–µ–Ω–æ {total_placed}, —Ä–∞–∑–Ω–∏—Ü–∞ {total_placed - total_needed}")
        
        return unplaced_pieces

    def _single_pass_optimization(self, pieces_to_place: List[Piece], available_stocks: List[Dict], progress_fn=None) -> int:
        """
        –û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ - —Ä–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        print("üîß –ó–∞–ø—É—Å–∫–∞—é –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        
        if progress_fn:
            progress_fn(10)
        
        placed_count = 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–µ–Ω—å—à–∏–º) –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        pieces_to_place.sort(key=lambda x: x.length, reverse=True)
        
        # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –°–û–†–¢–ò–†–û–í–ö–ê: –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º —Ü–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        # –î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞, –Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        remainders = [s for s in available_stocks if s.get('is_remainder', False)]
        materials = [s for s in available_stocks if not s.get('is_remainder', False)]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã
        remainders.sort(key=lambda x: -x['length'])
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã
        materials.sort(key=lambda x: -x['length'])
        
        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤
        available_stocks = remainders + materials
        
        print(f"üîß –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {len(remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤ ‚Üí {len(materials)} —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ö–ª—ã—Å—Ç—ã –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É ID, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        stock_groups = {}
        for stock in available_stocks:
            original_id = stock['original_id']
            if original_id not in stock_groups:
                stock_groups[original_id] = []
            stock_groups[original_id].append(stock)
        
        print(f"üîß –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(stock_groups)} —Ç–∏–ø–æ–≤ —Ö–ª—ã—Å—Ç–æ–≤")
        
        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
        for piece in pieces_to_place:
            if piece.placed:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                continue
                
            # –ò—â–µ–º –ª—É—á—à–∏–π —Ö–ª—ã—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
            best_stock = None
            best_score = float('-inf')
            
            for group_id, stock_list in stock_groups.items():
                # –ò—â–µ–º –ª—É—á—à–∏–π —Ö–ª—ã—Å—Ç –≤ –≥—Ä—É–ø–ø–µ
                for stock in stock_list:
                    if not self._can_place_piece(stock, piece):
                        continue
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º "—Å–∏–ª—É" —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    score = self._calculate_placement_score(stock, piece, available_stocks)
                    if score > best_score:
                        best_score = score
                        best_stock = stock
            
            # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å –≤ –ª—É—á—à–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ö–ª—ã—Å—Ç
            if best_stock:
                if self._add_piece_to_stock(best_stock, piece):
                    placed_count += 1
                    stock_type = "–î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö" if best_stock.get('is_remainder', False) else "—Ü–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç"
                    print(f"üîß –†–∞–∑–º–µ—â–µ–Ω–∞ –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ {stock_type} {best_stock['id']} (score: {best_score:.0f})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ —Ö–ª—ã—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π)
                    if best_stock.get('is_used', False):
                        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ö–ª—ã—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã
                        if best_stock in stock_groups[best_stock['original_id']]:
                            stock_groups[best_stock['original_id']].remove(best_stock)
                            print(f"üîß –£–¥–∞–ª—è—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ö–ª—ã—Å—Ç {best_stock['id']} –∏–∑ –≥—Ä—É–ø–ø—ã {best_stock['original_id']}")
                    
                    if progress_fn:
                        progress_fn(10 + (placed_count / len(pieces_to_place)) * 50)
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ —Ö–ª—ã—Å—Ç {best_stock['id']}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ö–ª—ã—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª–∏ {piece.length}–º–º")
        
        print(f"‚úÖ –û–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–∞–∑–º–µ—â–µ–Ω–æ: {placed_count}/{len(pieces_to_place)} –¥–µ—Ç–∞–ª–µ–π")
        return placed_count

    def _place_remaining_pieces(self, unplaced_pieces: List[Piece], available_stocks: List[Dict], original_stocks: List[Stock]) -> int:
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ—Ç–∞–ª–∏, —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—ã–µ —Ö–ª—ã—Å—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–∞–µ—Ç –í–°–ï –¥–µ—Ç–∞–ª–∏
        """
        print(f"üîß –†–∞–∑–º–µ—â–∞—é {len(unplaced_pieces)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–µ—Ç–∞–ª–µ–π...")
        
        placed_count = 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–µ–Ω—å—à–∏–º)
        unplaced_pieces.sort(key=lambda x: x.length, reverse=True)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        pieces_by_profile = {}
        for piece in unplaced_pieces:
            if not piece.placed:
                profile_code = piece.profile_code
                if profile_code not in pieces_by_profile:
                    pieces_by_profile[profile_code] = []
                pieces_by_profile[profile_code].append(piece)
        
        print(f"üì¶ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º: {list(pieces_by_profile.keys())}")
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ö–ª—ã—Å—Ç—ã
        for profile_code, pieces in pieces_by_profile.items():
            if not pieces:
                continue
                
            print(f"üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—Ä—Ç–∏–∫—É–ª {profile_code}: {len(pieces)} –¥–µ—Ç–∞–ª–µ–π")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ö–ª—ã—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
            suitable_stock = None
            for stock in original_stocks:
                if getattr(stock, 'profile_code', None) == profile_code:
                    suitable_stock = stock
                    break
            
            if not suitable_stock:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ö–ª—ã—Å—Ç, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω
                suitable_stock = original_stocks[0] if original_stocks else None
            
            if not suitable_stock:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ö–ª—ã—Å—Ç –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {profile_code}")
                continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–ª–∏–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            pieces.sort(key=lambda x: x.length, reverse=True)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
            current_stock = None
            current_stock_length = 0
            
            for piece in pieces:
                if piece.placed:
                    continue
                    
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ö–ª—ã—Å—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                if current_stock is None or current_stock_length + piece.length > suitable_stock.length:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–ª—ã—Å—Ç
                    new_stock_id = f"new_{profile_code}_{len(available_stocks) + 1}_{int(time.time())}"
                    new_stock = {
                        'id': new_stock_id,
                        'original_id': suitable_stock.id,
                        'length': suitable_stock.length,
                        'profile_code': profile_code,
                        'warehouseremaindersid': None,
                        'groupgoods_thick': getattr(suitable_stock, 'groupgoods_thick', 6000),
                        'is_remainder': False,
                        'used_length': 0,
                        'cuts': [],
                        'cuts_count': 0,
                        'quantity': 1,
                        'used_quantity': 0,
                        'original_stock': suitable_stock
                    }
                    
                    available_stocks.append(new_stock)
                    current_stock = new_stock
                    current_stock_length = 0
                    
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ö–ª—ã—Å—Ç {new_stock_id} –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {profile_code}")
                
                # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å –≤ —Ç–µ–∫—É—â–∏–π —Ö–ª—ã—Å—Ç —Å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ú —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
                if self._add_piece_to_stock(current_stock, piece, force_placement=True):
                    placed_count += 1
                    current_stock_length += piece.length
                    print(f"    ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ —Ö–ª—ã—Å—Ç {current_stock['id']}")
                else:
                    print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ —Ö–ª—ã—Å—Ç {current_stock['id']}")
                    
                    # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç –¥–ª—è –Ω–µ—ë
                    if not piece.placed:
                        single_stock_id = f"single_{profile_code}_{piece.length}_{len(available_stocks) + 1}_{int(time.time())}"
                        single_stock = {
                            'id': single_stock_id,
                            'original_id': suitable_stock.id,
                            'length': piece.length + self.settings.blade_width + 100,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ + –∑–∞–ø–∞—Å
                            'profile_code': profile_code,
                            'warehouseremaindersid': None,
                            'groupgoods_thick': getattr(suitable_stock, 'groupgoods_thick', 6000),
                            'is_remainder': False,
                            'used_length': 0,
                            'cuts': [],
                            'cuts_count': 0,
                            'quantity': 1,
                            'used_quantity': 0,
                            'original_stock': suitable_stock
                        }
                        
                        available_stocks.append(single_stock)
                        
                        if self._add_piece_to_stock(single_stock, piece, force_placement=True):
                            placed_count += 1
                            print(f"    ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç {single_stock_id}")
                        else:
                            print(f"    ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å {piece.length}–º–º –¥–∞–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç")
        
        print(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ {placed_count} –¥–µ—Ç–∞–ª–µ–π –≤ –Ω–æ–≤—ã—Ö —Ö–ª—ã—Å—Ç–∞—Ö")
        return placed_count
    
    def _can_place_piece(self, stock: Dict, piece: Piece) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å –≤ —Ö–ª—ã—Å—Ç"""
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ö–ª—ã—Å—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω?
        if stock.get('is_used', False):
            return False
        
        # –î–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º used_quantity - –ø–æ–∑–≤–æ–ª—è–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–æ –∫–æ–Ω—Ü–∞
        # –î–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ is_used
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ—Ñ–∏–ª—è
        if stock['profile_code'] and piece.profile_code and stock['profile_code'] != piece.profile_code:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        needed_length = piece.length
        if stock['cuts_count'] > 0:
            needed_length += self.settings.blade_width
        
        effective_length = max(0, stock['length'] - (self.settings.begin_indent + self.settings.end_indent))
        can_fit = stock['used_length'] + needed_length <= effective_length
        
        return can_fit
    
    def _calculate_waste_if_placed(self, stock: Dict, piece: Piece) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç—Ö–æ–¥—ã –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–∏"""
        needed_length = piece.length
        if stock['cuts_count'] > 0:
            needed_length += self.settings.blade_width
        
        effective_length = max(0, stock['length'] - (self.settings.begin_indent + self.settings.end_indent))
        remaining_length = effective_length - (stock['used_length'] + needed_length)
        
        return max(0, remaining_length)

    def _calculate_placement_score(self, stock: Dict, piece: Piece, all_stocks: List[Dict]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç "—Å–∏–ª—É" —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –≤ —Ö–ª—ã—Å—Ç"""
        score = 0.0
        
        # –û–ì–†–û–ú–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!
        if stock.get('is_remainder', False):
            score += 10000  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            print(f"üîß –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö: {stock['id']} –ø–æ–ª—É—á–∞–µ—Ç +10000 –±–∞–ª–ª–æ–≤")
        
        # –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –∑–∞ —Ä–∞–∑–º–µ—Ä –¥–µ—Ç–∞–ª–∏
        score += piece.length * 0.1
        
        effective_length = max(0, stock['length'] - (self.settings.begin_indent + self.settings.end_indent))
        usage_ratio = (stock['used_length'] + piece.length) / effective_length if effective_length > 0 else 1
        remaining_length = effective_length - (stock['used_length'] + piece.length)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–≥—Ä–æ–º–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤
        # –≠—Ç–æ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–ª—ã—Å—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
        if stock['used_length'] > 0:
            if stock.get('is_remainder', False):
                score += 2000  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            else:
                score += 1500  # –£–í–ï–õ–ò–ß–ï–ù: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª—å–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            if usage_ratio > 0.6:
                score += 500  # –£–í–ï–õ–ò–ß–ï–ù: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            if usage_ratio > 0.8:
                score += 800  # –£–í–ï–õ–ò–ß–ï–ù: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ç–ª–∏—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            if usage_ratio > 0.9:
                score += 1000  # –£–í–ï–õ–ò–ß–ï–ù: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        else:
            # –î–ª—è –ø—É—Å—Ç—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤
            if stock.get('is_remainder', False):
                score += 1000  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø—É—Å—Ç—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            else:
                score += 10   # –£–ú–ï–ù–¨–®–ï–ù: –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø—É—Å—Ç—ã—Ö —Ü–µ–ª—å–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        if usage_ratio <= 0.95:  # –•–ª—ã—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
            score += 100
        else:  # –•–ª—ã—Å—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω - —Å–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            score -= 100
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫
        if remaining_length < self.settings.min_remainder_length:
            score += 200  # –ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –æ—Ç–ª–∏—á–Ω–æ
        elif remaining_length >= self.settings.min_remainder_length and remaining_length < effective_length * 0.3:
            score += 150  # –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –®—Ç—Ä–∞—Ñ –∑–∞ –ø–ª–æ—Ö–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–ª—ã—Å—Ç–∞ (–±–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫)
        # –≠—Ç–æ —Å—Ç–∏–º—É–ª–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–ª—ã—Å—Ç–æ–≤
        if remaining_length > effective_length * 0.4:
            # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–ª—å—à–µ 40% –¥–ª–∏–Ω—ã —Ö–ª—ã—Å—Ç–∞ - —ç—Ç–æ –ø–ª–æ—Ö–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π —à—Ç—Ä–∞—Ñ –¥–ª—è –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            waste_ratio = remaining_length / effective_length
            waste_penalty = (waste_ratio ** 2) * 2000  # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–π —à—Ç—Ä–∞—Ñ
            score -= waste_penalty
            # –í—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"‚ö†Ô∏è –®–¢–†–ê–§ –∑–∞ –±–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫: {stock['id']}, –æ—Å—Ç–∞—Ç–æ–∫={remaining_length:.0f}–º–º ({waste_ratio*100:.1f}%), —à—Ç—Ä–∞—Ñ=-{waste_penalty:.0f}")
        
        # –£–ë–†–ê–õ —à—Ç—Ä–∞—Ñ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π - —ç—Ç–æ –≤—Ä–µ–¥–∏–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        if stock.get('profile_code') == piece.profile_code:
            if stock.get('is_remainder', False):
                score += 200  # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≥–æ –∂–µ –∞—Ä—Ç–∏–∫—É–ª–∞
            else:
                score += 50   # –û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è —Ü–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        
        # --- ENHANCED PAIRING LOGIC ---
        # –£—Å–∏–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–æ—â—Ä–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∏–ª–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ä–∞—Å–∫—Ä–æ–µ–≤
        # –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
        # 1. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–ª—ã—Å—Ç–∞ —Ö–æ—Ä–æ—à–µ–µ (> 50%)
        # 2. –û—Å—Ç–∞—Ç–æ–∫ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (< 40% –∏–ª–∏ –±—É–¥–µ—Ç –¥–µ–ª–æ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º)
        pairing_allowed = (
            not stock.get('is_remainder', False) and 
            self.settings.pair_optimization and 
            usage_ratio > 0.5 and 
            (remaining_length < effective_length * 0.4 or remaining_length >= self.settings.min_remainder_length)
        )
        if pairing_allowed:
            # 1. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä–æ—è, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –¥–µ—Ç–∞–ª—å –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            temp_cuts = [c.copy() for c in stock['cuts']]

            # –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            existing_cut = None
            for cut in temp_cuts:
                if (cut.get('profile_id') == piece.profile_id and 
                    cut.get('length') == piece.length):
                    existing_cut = cut
                    break

            if existing_cut:
                existing_cut['quantity'] = existing_cut.get('quantity', 0) + 1
            else:
                temp_cuts.append({'profile_id': piece.profile_id, 'length': piece.length, 'quantity': 1})

            # 2. –ü–æ–¥–ø–∏—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–∫—Ä–æ—è
            new_signature = self._get_cuts_signature(temp_cuts)

            # 3. –ò—â–µ–º —Ç–æ—á–Ω—ã–µ –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            pairing_bonus_total = 0.0
            best_partial_similarity = 0.0
            for other_stock in all_stocks:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º —Ö–ª—ã—Å—Ç, –ø—É—Å—Ç—ã–µ —Ö–ª—ã—Å—Ç—ã –∏ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
                if (other_stock['id'] == stock['id'] or 
                    not other_stock['cuts'] or 
                    other_stock.get('is_remainder', False)):
                    continue

                other_signature = self._get_cuts_signature(other_stock['cuts'])
                if new_signature == other_signature:
                    pairing_bonus_total += self.settings.pairing_exact_bonus
                    print(f"üíé PAIRING EXACT BONUS: {piece.length}–º–º –≤ {stock['id']} —Å–æ–∑–¥–∞—Å—Ç –ø–∞—Ä—É —Å {other_stock['id']}")
                    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –º–æ–∂–Ω–æ –Ω–µ –∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ
                    best_partial_similarity = 1.0
                    break
                else:
                    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    sim = self._calc_signature_similarity(new_signature, other_signature)
                    if sim > best_partial_similarity:
                        best_partial_similarity = sim

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∑–∞ —á–∞—Å—Ç–∏—á–Ω—É—é —Å—Ö–æ–∂–µ—Å—Ç—å, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥
            if pairing_bonus_total == 0 and best_partial_similarity >= self.settings.pairing_partial_threshold:
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –±–æ–Ω—É—Å –ª–∏–Ω–µ–π–Ω–æ –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ —Å—Ö–æ–∂–µ—Å—Ç–∏
                pairing_bonus_total += self.settings.pairing_partial_bonus * best_partial_similarity
                print(f"üí† PAIRING PARTIAL BONUS: sim={best_partial_similarity:.2f} –¥–ª—è {stock['id']}")

            # 4. –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ä—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –ø—É—Å—Ç–æ–º —Ö–ª—ã—Å—Ç–µ
            if stock['cuts_count'] == 0 and pairing_bonus_total == 0:
                if len(temp_cuts) == 1:
                    score += self.settings.pairing_new_simple_bonus

            score += pairing_bonus_total
        # --- END OF ENHANCED PAIRING LOGIC ---
        
        return score
    
    def _update_placement_forces(self, stock: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç "—Å–∏–ª—ã" —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏"""
        # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–ª—ã—Å—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        # —á—Ç–æ–±—ã –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
        pass  # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É

    def _create_final_stocks_for_unplaced(self, unplaced_pieces: List[Piece], available_stocks: List[Dict], original_stocks: List[Stock]):
        """
        –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–∑–º–µ—â–∞–µ—Ç –í–°–ï –¥–µ—Ç–∞–ª–∏
        """
        print(f"üîß –°–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è {len(unplaced_pieces)} –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ—Ñ–∏–ª—è
        pieces_by_profile = {}
        for piece in unplaced_pieces:
            if not piece.placed:
                profile_code = piece.profile_code
                if profile_code not in pieces_by_profile:
                    pieces_by_profile[profile_code] = []
                pieces_by_profile[profile_code].append(piece)
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç
        for profile_code, pieces in pieces_by_profile.items():
            if not pieces:
                continue
                
            print(f"üîß –°–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {profile_code}: {len(pieces)} –¥–µ—Ç–∞–ª–µ–π")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ö–ª—ã—Å—Ç
            suitable_stock = None
            for stock in original_stocks:
                if getattr(stock, 'profile_code', None) == profile_code:
                    suitable_stock = stock
                    break
            
            if not suitable_stock:
                suitable_stock = original_stocks[0] if original_stocks else None
            
            if not suitable_stock:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ö–ª—ã—Å—Ç –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {profile_code}")
                continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–ª–∏–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            pieces.sort(key=lambda x: x.length, reverse=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω–æ–π
            max_piece_length = max(p.length for p in pieces)
            total_needed_length = sum(p.length for p in pieces) + (len(pieces) - 1) * self.settings.blade_width
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏–∑: –∏—Å—Ö–æ–¥–Ω–æ–π –¥–ª–∏–Ω—ã, —Å—É–º–º—ã –¥–µ—Ç–∞–ª–µ–π + –ø—Ä–æ–ø–∏–ª—ã, –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏ + –∑–∞–ø–∞—Å
            final_stock_length = max(
                suitable_stock.length,
                total_needed_length + 200,  # –ó–∞–ø–∞—Å 200–º–º
                max_piece_length + self.settings.blade_width + 300  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª—å + –∑–∞–ø–∞—Å
            )
            
            final_stock_id = f"final_{profile_code}_{len(available_stocks) + 1}_{int(time.time())}"
            final_stock = {
                'id': final_stock_id,
                'original_id': suitable_stock.id,
                'length': final_stock_length,
                'profile_code': profile_code,
                'warehouseremaindersid': None,
                'groupgoods_thick': getattr(suitable_stock, 'groupgoods_thick', 6000),
                'is_remainder': False,
                'used_length': 0,
                'cuts': [],
                'cuts_count': 0,
                'quantity': 1,
                'used_quantity': 0,
                'original_stock': suitable_stock
            }
            
            available_stocks.append(final_stock)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç
            placed_in_final = 0
            for piece in pieces:
                if not piece.placed:
                    if self._add_piece_to_stock(final_stock, piece, force_placement=True):
                        placed_in_final += 1
                        print(f"  ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç {final_stock_id}")
                    else:
                        print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç {final_stock_id}")
                        
                        # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –¥–∞–∂–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç, —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç
                        if not piece.placed:
                            single_stock_id = f"single_final_{profile_code}_{piece.length}_{len(available_stocks) + 1}_{int(time.time())}"
                            single_stock = {
                                'id': single_stock_id,
                                'original_id': suitable_stock.id,
                                'length': piece.length + self.settings.blade_width + 200,  # –î–µ—Ç–∞–ª—å + –ø—Ä–æ–ø–∏–ª—ã + –∑–∞–ø–∞—Å
                                'profile_code': profile_code,
                                'warehouseremaindersid': None,
                                'groupgoods_thick': getattr(suitable_stock, 'groupgoods_thick', 6000),
                                'is_remainder': False,
                                'used_length': 0,
                                'cuts': [],
                                'cuts_count': 0,
                                'quantity': 1,
                                'used_quantity': 0,
                                'original_stock': suitable_stock
                            }
                            
                            available_stocks.append(single_stock)
                            
                            if self._add_piece_to_stock(single_stock, piece, force_placement=True):
                                print(f"  ‚úÖ –†–∞–∑–º–µ—â–µ–Ω–∞ –¥–µ—Ç–∞–ª—å {piece.length}–º–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç {single_stock_id}")
                            else:
                                print(f"  ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å {piece.length}–º–º –¥–∞–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç")
            
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç {final_stock_id} –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ {profile_code} (—Ä–∞–∑–º–µ—â–µ–Ω–æ {placed_in_final}/{len(pieces)} –¥–µ—Ç–∞–ª–µ–π)")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(pieces_by_profile)} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ö–ª—ã—Å—Ç–æ–≤")

    def _distribute_cells_for_profiles(self, pieces: List[Piece]):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–º–∞–º –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π."""
        print("üè† –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        
        unique_openings = {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–º—É.
        # –ü—Ä–æ–µ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ 'orderitemsid' –∏ 'izdpart'
        for piece in pieces:
            key = (piece.orderitemsid, piece.izdpart)
            if key not in unique_openings:
                unique_openings[key] = {"pieces": []}
            unique_openings[key]["pieces"].append(piece)
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–º—ã –ø–æ orderitemsid –∏ izdpart –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        sorted_keys = sorted(unique_openings.keys())
        
        print("  --- –ù–∞—á–∞–ª–æ –ª–æ–≥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π ---")
        cell_counter = 1
        for key in sorted_keys:
            opening_data = unique_openings[key]
            print(f"  - –ü—Ä–æ–µ–º (–∫–ª—é—á): {key}, –Ø—á–µ–π–∫–∞ ‚Ññ{cell_counter}, –ö–æ–ª-–≤–æ –¥–µ—Ç–∞–ª–µ–π: {len(opening_data['pieces'])}")
            for piece in opening_data["pieces"]:
                piece.cell_number = cell_counter
            cell_counter += 1
        print("  --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π ---")
            
        print(f"‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —è—á–µ–µ–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(unique_openings)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–º–æ–≤.")

    def _prepare_final_stocks(self, cutting_plans: Dict[str, List[Dict]]) -> List[Dict]:
        """
        –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–ª—ã—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞
        """
        final_stocks = []
        for plan_id, plan_data in cutting_plans.items():
            for stock_data in plan_data:
                stock_id = stock_data['id']
                stock_length = stock_data['length']
                cuts = stock_data['cuts']
                waste = stock_data['waste']
                remainder = stock_data['remainder']
                count = stock_data['count']
                is_remainder = stock_data['is_remainder']
                warehouseremaindersid = stock_data['warehouseremaindersid']
                
                final_stock = {
                    'id': stock_id,
                    'length': stock_length,
                    'cuts': cuts,
                    'waste': waste,
                    'remainder': remainder,
                    'count': count,
                    'is_remainder': is_remainder,
                    'warehouseremaindersid': warehouseremaindersid
                }
                final_stocks.append(final_stock)
        return final_stocks


class LinearOptimizer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
    """
    
    def __init__(self, settings=None):
        if settings:
            if isinstance(settings, OptimizationSettings):
                self.settings = settings
            else:
                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ "—Å—Ç–∞—Ä—ã–º–∏" –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                self.settings = OptimizationSettings(
                    blade_width=getattr(settings, 'blade_width', 5.0),
                    min_remainder_length=getattr(settings, 'min_remainder_length', 300.0),
                    max_waste_percent=getattr(settings, 'max_waste_percent', 15.0),
                    pair_optimization=getattr(settings, 'pair_optimization', True),
                    use_remainders=getattr(settings, 'use_remainders', True),
                    time_limit_seconds=getattr(settings, 'time_limit_seconds', 60),
                    begin_indent=getattr(settings, 'begin_indent', 10.0),
                    end_indent=getattr(settings, 'end_indent', 10.0),
                    min_trash_mm=getattr(settings, 'min_trash_mm', 50.0),
                )
        else:
            self.settings = OptimizationSettings()
        
        self.optimizer = SimpleOptimizer(self.settings)
    
    def optimize(self, profiles: List[Profile], stocks: List[Stock], 
                settings=None, progress_fn=None, use_professional=True) -> OptimizationResult:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        """
        print(f"üîß LinearOptimizer.optimize –≤—ã–∑–≤–∞–Ω —Å {len(profiles)} –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏ {len(stocks)} —Ö–ª—ã—Å—Ç–∞–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã (–±–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ GUI)
        current_settings = self.settings
        if settings:
            if isinstance(settings, OptimizationSettings):
                current_settings = settings
            else:
                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–æ–±–µ—Ä–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π
                current_settings = OptimizationSettings(
                    blade_width=getattr(settings, 'blade_width', self.settings.blade_width),
                    min_remainder_length=getattr(settings, 'min_remainder_length', self.settings.min_remainder_length),
                    max_waste_percent=getattr(settings, 'max_waste_percent', self.settings.max_waste_percent),
                    pair_optimization=getattr(settings, 'pair_optimization', self.settings.pair_optimization),
                    use_remainders=getattr(settings, 'use_remainders', self.settings.use_remainders),
                    time_limit_seconds=getattr(settings, 'time_limit_seconds', self.settings.time_limit_seconds),
                    begin_indent=getattr(settings, 'begin_indent', self.settings.begin_indent),
                    end_indent=getattr(settings, 'end_indent', self.settings.end_indent),
                    min_trash_mm=getattr(settings, 'min_trash_mm', self.settings.min_trash_mm),
                )
        
        return self.optimizer.optimize(profiles, stocks, current_settings, progress_fn)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class CuttingStockOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º API"""
    
    def __init__(self, settings: OptimizationSettings = None):
        self.settings = settings or OptimizationSettings()
        self.optimizer = SimpleOptimizer(self.settings)
    
    def optimize(self, profiles: List[Profile], stocks: List[Stock], 
                progress_fn=None) -> OptimizationResult:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        return self.optimizer.optimize(profiles, stocks, self.settings, progress_fn)


# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class SolverType:
    """–¢–∏–ø—ã —Å–æ–ª–≤–µ—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    GREEDY = "greedy"
    CP_SAT = "cp_sat" 
    BIN_PACKING = "bin_packing"
    LINEAR_PROGRAMMING = "linear_programming"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
def optimize_cutting_stock(profiles: List[Profile], stocks: List[Stock], 
                          solver_type=None, blade_width: float = 5.0,
                          min_remainder: float = 300.0, time_limit: int = 300,
                          progress_fn=None) -> OptimizationResult:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä–æ—è
    """
    settings = OptimizationSettings(
        blade_width=blade_width,
        min_remainder_length=min_remainder,
        time_limit_seconds=time_limit
    )
    
    optimizer = SimpleOptimizer(settings)
    return optimizer.optimize(profiles, stocks, settings, progress_fn)


if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–µ–π—à–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_profiles = [
        Profile(id=1, order_id=1, element_name="–†–∞–º–∞", profile_code="P001", length=2400, quantity=2),
        Profile(id=2, order_id=1, element_name="–ò–º–ø–æ—Å—Ç", profile_code="P001", length=1800, quantity=2),
        Profile(id=3, order_id=1, element_name="–°—Ç–≤–æ—Ä–∫–∞", profile_code="P001", length=1200, quantity=2),
    ]
    
    test_stocks = [
        Stock(id=1, profile_id=1, length=6000, quantity=2),
        Stock(id=2, profile_id=1, length=4000, quantity=1),
    ]
    
    print(f"–ü—Ä–æ—Ñ–∏–ª–∏: {len(test_profiles)}")
    print(f"–•–ª—ã—Å—Ç—ã: {len(test_stocks)}")
    
    def test_progress(percent):
        print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}%")
    
    try:
        optimizer = SimpleOptimizer()
        result = optimizer.optimize(test_profiles, test_stocks, progress_fn=test_progress)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø–µ—Ö' if result.success else '–û—à–∏–±–∫–∞'}")
        print(f"üìä –ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(result.cut_plans)}")
        print(f"üìà –û—Ç—Ö–æ–¥—ã: {result.total_waste_percent:.1f}%")
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
        
        if result.cut_plans:
            print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–æ–≤:")
            for i, plan in enumerate(result.cut_plans):
                print(f"  –•–ª—ã—Å—Ç {i+1}: {len(plan.cuts)} —Ä–∞—Å–ø–∏–ª–æ–≤, –æ—Ç—Ö–æ–¥ {plan.waste:.0f}–º–º")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()