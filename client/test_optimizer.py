#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

from core.optimizer import SimpleOptimizer, OptimizationSettings
from core.models import Profile, Stock, CutPlan

def test_optimizer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π)
    profiles = [
        Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å A", profile_code="P001", length=1110, quantity=5),
        Profile(id=2, order_id=1, element_name="–î–µ—Ç–∞–ª—å B", profile_code="P002", length=860, quantity=2),
        Profile(id=3, order_id=1, element_name="–î–µ—Ç–∞–ª—å C", profile_code="P003", length=610, quantity=8),
    ]
    
    stocks = [
        Stock(id=1, profile_id=1, length=4460, quantity=1),  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ö–ª—ã—Å—Ç
        Stock(id=2, profile_id=1, length=6000, quantity=2),  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö–ª—ã—Å—Ç
    ]
    
    print(f"üìã –ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞:")
    for profile in profiles:
        print(f"   {profile.element_name}: {profile.length}–º–º x {profile.quantity}—à—Ç")
    
    print(f"\nüì¶ –•–ª—ã—Å—Ç—ã:")
    for stock in stocks:
        print(f"   –•–ª—ã—Å—Ç {stock.id}: {stock.length}–º–º x {stock.quantity}—à—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
    settings = OptimizationSettings(
        blade_width=5.0,
        min_remainder_length=300.0,
        max_waste_percent=15.0
    )
    
    optimizer = SimpleOptimizer(settings)
    
    print(f"\nüîß –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    result = optimizer.optimize(profiles, stocks)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print(f"   –£—Å–ø–µ—Ö: {result.success}")
    print(f"   –ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(result.cut_plans)}")
    print(f"   –û–±—â–∏–µ –æ—Ç—Ö–æ–¥—ã: {result.total_waste_percent:.1f}%")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
    
    if result.cut_plans:
        print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞:")
        for i, plan in enumerate(result.cut_plans):
            analysis = optimizer._analyze_cut_plan(plan)
            print(f"\n   –•–ª—ã—Å—Ç {plan.stock_id}:")
            print(f"     –î–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞: {plan.stock_length:.0f}–º–º")
            print(f"     –°—É–º–º–∞ –¥–µ—Ç–∞–ª–µ–π: {analysis['total_pieces_length']:.0f}–º–º")
            print(f"     –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–æ–≤: {analysis['saw_width_total']:.0f}–º–º")
            print(f"     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {analysis['used_length']:.0f}–º–º")
            print(f"     –û—Ç—Ö–æ–¥—ã: {plan.waste:.0f}–º–º ({plan.waste_percent:.1f}%)")
            print(f"     –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if analysis['is_valid'] else '‚ùå'}")
            
            if not analysis['is_valid']:
                print(f"     –ü–†–ï–í–´–®–ï–ù–ò–ï: {analysis['used_length'] - analysis['stock_length']:.0f}–º–º")
            
            print(f"     –†–∞—Å–ø–∏–ª—ã: {analysis['cuts_detail']}")

if __name__ == "__main__":
    test_optimizer() 