#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–≤–µ—Ç–∞–º–∏ –≤ GUI
"""

import sys

def test_color_fix():
    """–¢–µ—Å—Ç —Ü–≤–µ—Ç–æ–≤ PyQt5"""
    print("üé® –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¶–í–ï–¢–û–í")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from PyQt5.QtWidgets import QApplication, QTableWidget
        from PyQt5.QtGui import QColor
        from gui.table_widgets import fill_optimization_results_table
        from core.models import CutPlan
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º QApplication
        if not QApplication.instance():
            app = QApplication([])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        table = QTableWidget()
        table.setColumnCount(5)
        table.setHorizontalHeaderLabels(["ID —Ö–ª—ã—Å—Ç–∞", "–î–ª–∏–Ω–∞", "–†–∞—Å–ø–∏–ª—ã", "–û—Ç—Ö–æ–¥—ã", "% –æ—Ç—Ö–æ–¥–æ–≤"])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã - –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
        test_cuts_valid = [
            {'profile_id': 1, 'length': 1000, 'quantity': 2},
            {'profile_id': 2, 'length': 500, 'quantity': 1}
        ]
        
        test_cuts_invalid = [
            {'profile_id': 1, 'length': 3000, 'quantity': 2},  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
            {'profile_id': 2, 'length': 2000, 'quantity': 1}
        ]
        
        plans = [
            # –í–∞–ª–∏–¥–Ω—ã–π –ø–ª–∞–Ω
            CutPlan(
                stock_id=1,
                stock_length=3000,
                cuts=test_cuts_valid,
                waste=485,
                waste_percent=16.2
            ),
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–ª–∞–Ω (–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç)
            CutPlan(
                stock_id=2,
                stock_length=4000,
                cuts=test_cuts_invalid,
                waste=-4000,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã = –æ—à–∏–±–∫–∞
                waste_percent=-100.0
            ),
        ]
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        fill_optimization_results_table(table, plans)
        
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: {table.rowCount()} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–æ–≤:")
        for row in range(table.rowCount()):
            item = table.item(row, 0)  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
            if item:
                bg_color = item.background()
                if bg_color.isValid():
                    color = bg_color.color()
                    print(f"   –°—Ç—Ä–æ–∫–∞ {row + 1}: RGB({color.red()}, {color.green()}, {color.blue()})")
                else:
                    print(f"   –°—Ç—Ä–æ–∫–∞ {row + 1}: –ù–µ—Ç —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞")
        
        print("\n‚úÖ –¢–ï–°–¢ –¶–í–ï–¢–û–í –ü–†–û–®–ï–õ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï –¶–í–ï–¢–û–í: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_color_fix()
    print(f"\n{'‚úÖ –¶–í–ï–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–´' if success else '‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –¶–í–ï–¢–ê–ú–ò'}")
    sys.exit(0 if success else 1)