#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç—Ö–æ–¥–æ–≤ –≤ –ø–ª–∞–Ω–∞—Ö —Ä–∞—Å–ø–∏–ª–∞
"""

import sys

def test_waste_calculation():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç—Ö–æ–¥–æ–≤"""
    print("üßÆ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ê–°–ß–ï–¢–ê –û–¢–•–û–î–û–í")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from core.models import Profile, Stock, CutPlan
        from core.optimizer import SimpleOptimizer, OptimizationSettings
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        profiles = [
            Profile(id=1, order_id=1, element_name="–î–µ—Ç–∞–ª—å A", profile_code="P001", length=1000, quantity=2),
            Profile(id=2, order_id=1, element_name="–î–µ—Ç–∞–ª—å B", profile_code="P001", length=800, quantity=1),
        ]
        
        stocks = [
            Stock(id=1, profile_id=1, length=3000, quantity=1),
        ]
        
        print(f"\nüì¶ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ü—Ä–æ—Ñ–∏–ª–∏:")
        for p in profiles:
            print(f"     - {p.element_name}: {p.length}–º–º x{p.quantity}")
        print(f"   –•–ª—ã—Å—Ç—ã:")
        for s in stocks:
            print(f"     - –•–ª—ã—Å—Ç {s.id}: {s.length}–º–º x{s.quantity}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        settings = OptimizationSettings(
            blade_width=5.0,
            min_remainder_length=300.0,
            max_waste_percent=20.0
        )
        optimizer = SimpleOptimizer(settings)
        print(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ø—Ä–æ–ø–∏–ª {settings.blade_width}–º–º, –º–∏–Ω.–æ—Å—Ç–∞—Ç–æ–∫ {settings.min_remainder_length}–º–º")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        result = optimizer.optimize(profiles, stocks)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        print(f"   –£—Å–ø–µ—Ö: {'‚úÖ' if result.success else '‚ùå'}")
        print(f"   –ü–ª–∞–Ω–æ–≤: {len(result.cut_plans)}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
        for i, plan in enumerate(result.cut_plans):
            print(f"\nüîç –ü–õ–ê–ù {i+1} (–•–ª—ã—Å—Ç {plan.stock_id}):")
            print(f"   –î–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞: {plan.stock_length}–º–º")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏–ª—ã
            print(f"   –†–∞—Å–ø–∏–ª—ã:")
            total_pieces_manual = 0
            total_cuts_manual = 0
            
            for cut in plan.cuts:
                if isinstance(cut, dict):
                    length = cut.get('length', 0)
                    quantity = cut.get('quantity', 0)
                    total_length_cut = length * quantity
                    total_pieces_manual += total_length_cut
                    total_cuts_manual += quantity
                    print(f"     - {quantity}x{length}–º–º = {total_length_cut}–º–º")
            
            # –†–∞—Å—á–µ—Ç—ã —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã
            used_length_method = plan.get_used_length(settings.blade_width)
            total_pieces_method = plan.get_total_pieces_length()
            cuts_count_method = plan.get_cuts_count()
            
            # –†—É—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
            saw_width_total = settings.blade_width * (total_cuts_manual - 1) if total_cuts_manual > 1 else 0
            used_length_manual = total_pieces_manual + saw_width_total
            waste_manual = plan.stock_length - used_length_manual
            waste_percent_manual = (waste_manual / plan.stock_length * 100) if plan.stock_length > 0 else 0
            
            print(f"\n   üìè –†–ê–°–ß–ï–¢–´:")
            print(f"     –°—É–º–º–∞ –¥–µ—Ç–∞–ª–µ–π (—Ä—É—á–Ω–æ–π): {total_pieces_manual:.0f}–º–º")
            print(f"     –°—É–º–º–∞ –¥–µ—Ç–∞–ª–µ–π (–º–µ—Ç–æ–¥):  {total_pieces_method:.0f}–º–º")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤ (—Ä—É—á–Ω–æ–π): {total_cuts_manual}")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Å–∫–æ–≤ (–º–µ—Ç–æ–¥):  {cuts_count_method}")
            print(f"     –®–∏—Ä–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–æ–≤: {saw_width_total:.0f}–º–º ({total_cuts_manual-1} –ø—Ä–æ–ø–∏–ª–æ–≤)")
            print(f"     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (—Ä—É—á–Ω–æ–π): {used_length_manual:.0f}–º–º")
            print(f"     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (–º–µ—Ç–æ–¥):  {used_length_method:.0f}–º–º")
            
            print(f"\n   üóëÔ∏è –û–¢–•–û–î–´:")
            print(f"     –û—Ç—Ö–æ–¥—ã (—Ä—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç): {waste_manual:.0f}–º–º ({waste_percent_manual:.1f}%)")
            print(f"     –û—Ç—Ö–æ–¥—ã (–≤ –ø–ª–∞–Ω–µ):       {plan.waste:.0f}–º–º ({plan.waste_percent:.1f}%)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
            if hasattr(plan, 'remainder') and plan.remainder:
                print(f"     –û—Å—Ç–∞—Ç–æ–∫: {plan.remainder:.0f}–º–º (>= {settings.min_remainder_length}–º–º)")
                print(f"     üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –û—Å—Ç–∞—Ç–æ–∫ >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –ø–æ—ç—Ç–æ–º—É –æ—Ç—Ö–æ–¥—ã = 0")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            is_valid = plan.validate(settings.blade_width)
            print(f"     –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ' if is_valid else '‚ùå'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            if abs(used_length_manual - used_length_method) > 0.1:
                print(f"     ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–µ: {abs(used_length_manual - used_length_method):.1f}–º–º")
            
            if abs(waste_manual - plan.waste) > 0.1 and not (hasattr(plan, 'remainder') and plan.remainder):
                print(f"     ‚ö†Ô∏è –†–ê–°–•–û–ñ–î–ï–ù–ò–ï –≤ –æ—Ç—Ö–æ–¥–∞—Ö: {abs(waste_manual - plan.waste):.1f}–º–º")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = result.get_statistics()
        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_waste_calculation()
    print(f"\n{'‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê' if success else '‚ùå –û–®–ò–ë–ö–ê –í –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï'}")
    sys.exit(0 if success else 1)