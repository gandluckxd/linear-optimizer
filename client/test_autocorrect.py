#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞
"""

import sys

def test_autocorrect():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"""
    print("üîß –¢–ï–°–¢ –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–ò –ü–õ–ê–ù–û–í –†–ê–°–ü–ò–õ–ê")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        from core.models import Profile, Stock, CutPlan, OptimizationResult
        from core.optimizer import SimpleOptimizer, OptimizationSettings
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–∞–¥—É—Ç –æ—à–∏–±–∫—É
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ö–ª—ã—Å—Ç–æ–≤
        profiles = [
            Profile(id=1, order_id=1, element_name="–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è –¥–µ—Ç–∞–ª—å", profile_code="P001", length=3500, quantity=2),
            Profile(id=2, order_id=1, element_name="–î–ª–∏–Ω–Ω–∞—è –¥–µ—Ç–∞–ª—å", profile_code="P001", length=3000, quantity=2),
            Profile(id=3, order_id=1, element_name="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª—å", profile_code="P001", length=1500, quantity=1),
        ]
        
        stocks = [
            Stock(id=1, profile_id=1, length=4000, quantity=1),  # –û–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–ª—ã—Å—Ç
            Stock(id=2, profile_id=1, length=6000, quantity=2),  # –î–≤–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Ö–ª—ã—Å—Ç–∞
        ]
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
        print(f"   - {profiles[0].element_name}: {profiles[0].length}–º–º x{profiles[0].quantity}")
        print(f"   - {profiles[1].element_name}: {profiles[1].length}–º–º x{profiles[1].quantity}")
        print(f"   - {profiles[2].element_name}: {profiles[2].length}–º–º x{profiles[2].quantity}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ö–ª—ã—Å—Ç–æ–≤: {len(stocks)}")
        print(f"   - –•–ª—ã—Å—Ç {stocks[0].id}: {stocks[0].length}–º–º x{stocks[0].quantity}")
        print(f"   - –•–ª—ã—Å—Ç {stocks[1].id}: {stocks[1].length}–º–º x{stocks[1].quantity}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        settings = OptimizationSettings(
            blade_width=5.0,
            min_remainder_length=300.0,
            max_waste_percent=30.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Ç—Ö–æ–¥—ã
        )
        optimizer = SimpleOptimizer(settings)
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π...")
        def progress_callback(percent):
            if percent % 25 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 25%
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}%")
        
        result = optimizer.optimize(profiles, stocks, progress_fn=progress_callback)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –£—Å–ø–µ—Ö: {'‚úÖ' if result.success else '‚ùå'}")
        print(f"   –ü–ª–∞–Ω–æ–≤ —Ä–∞—Å–ø–∏–ª–∞: {len(result.cut_plans)}")
        print(f"   –û—Ç—Ö–æ–¥—ã: {result.total_waste_percent:.1f}%")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–õ–ê–ù–û–í:")
        valid_plans = 0
        invalid_plans = 0
        auto_corrected = 0
        
        for i, plan in enumerate(result.cut_plans):
            is_valid = plan.validate(5.0)
            used_length = plan.get_used_length(5.0)
            
            print(f"\n   –ü–ª–∞–Ω {i+1}:")
            print(f"     –•–ª—ã—Å—Ç: {plan.stock_id} ({plan.stock_length}–º–º)")
            print(f"     –†–∞—Å–ø–∏–ª—ã: {len(plan.cuts)} —à—Ç")
            print(f"     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_length:.0f}–º–º")
            print(f"     –û—Ç—Ö–æ–¥—ã: {plan.waste:.0f}–º–º ({plan.waste_percent:.1f}%)")
            print(f"     –°—Ç–∞—Ç—É—Å: {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if is_valid else '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}")
            
            if is_valid:
                valid_plans += 1
            else:
                invalid_plans += 1
                print(f"     ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {used_length - plan.stock_length:.0f}–º–º")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–ª–∞–Ω –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω
            if 'auto_' in str(plan.stock_id):
                auto_corrected += 1
                print(f"     üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–∏–ª–æ–≤
            for cut in plan.cuts:
                if isinstance(cut, dict):
                    print(f"       - {cut.get('quantity', 0)}x{cut.get('length', 0)}–º–º")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–ò:")
        print(f"   –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {valid_plans}")
        print(f"   –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {invalid_plans}")
        print(f"   –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {auto_corrected}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if auto_corrected > 0:
            print(f"\nüéØ –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–Ø –°–†–ê–ë–û–¢–ê–õ–ê!")
            print(f"   –°–æ–∑–¥–∞–Ω–æ {auto_corrected} –Ω–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {(auto_corrected / len(result.cut_plans)) * 100:.1f}%")
        else:
            print(f"\n‚ö†Ô∏è –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_autocorrect()
    print(f"\n{'‚úÖ –¢–ï–°–¢ –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–ò –ü–†–û–®–ï–õ' if success else '‚ùå –¢–ï–°–¢ –ê–í–¢–û–ö–û–†–†–ï–ö–¶–ò–ò –ü–†–û–í–ê–õ–ï–ù'}")
    sys.exit(0 if success else 1)