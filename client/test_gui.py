#!/usr/bin/env python3
"""
–¢–µ—Å—Ç GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Linear Optimizer
"""

import sys
import traceback

def test_step(name, test_func):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    print(f"\nüîç {name}")
    print("-" * 50)
    try:
        result = test_func()
        print(f"‚úÖ {name} - –£–°–ü–ï–•")
        return True, result
    except Exception as e:
        print(f"‚ùå {name} - –û–®–ò–ë–ö–ê: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False, None

def test_pyqt5_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ PyQt5"""
    from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QTableWidget
    from PyQt5.QtCore import Qt, QThread, pyqtSignal
    from PyQt5.QtGui import QFont
    return "PyQt5 –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã"

def test_gui_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ GUI –º–æ–¥—É–ª–µ–π"""
    from gui.table_widgets import (
        fill_optimization_results_table, _create_text_item, _create_numeric_item
    )
    from gui.dialogs import DebugDialog, ProgressDialog
    from gui.config import MAIN_WINDOW_STYLE
    return "GUI –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"

def test_main_window_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    from gui.main_window import LinearOptimizerWindow, OptimizationThread
    return "–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ"

def test_table_widgets():
    """–¢–µ—Å—Ç –≤–∏–¥–∂–µ—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü"""
    from PyQt5.QtWidgets import QApplication, QTableWidget
    from gui.table_widgets import _create_text_item, _create_numeric_item
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ QApplication –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    if not QApplication.instance():
        app = QApplication([])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
    text_item = _create_text_item("–¢–µ—Å—Ç")
    numeric_item = _create_numeric_item(123.45)
    
    print(f"   –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {text_item.text()}")
    print(f"   –ß–∏—Å–ª–æ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {numeric_item.text()}")
    
    return "–í–∏–¥–∂–µ—Ç—ã —Ç–∞–±–ª–∏—Ü —Ä–∞–±–æ—Ç–∞—é—Ç"

def test_optimization_result_display():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    from PyQt5.QtWidgets import QApplication, QTableWidget
    from gui.table_widgets import fill_optimization_results_table
    from core.models import CutPlan
    
    # –°–æ–∑–¥–∞–µ–º QApplication –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not QApplication.instance():
        app = QApplication([])
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    table = QTableWidget()
    table.setColumnCount(5)
    table.setHorizontalHeaderLabels(["ID —Ö–ª—ã—Å—Ç–∞", "–î–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞", "–†–∞—Å–ø–∏–ª—ã", "–û—Ç—Ö–æ–¥—ã", "% –æ—Ç—Ö–æ–¥–æ–≤"])
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞
    test_cuts = [
        {'profile_id': 1, 'length': 1000, 'quantity': 2},
        {'profile_id': 2, 'length': 500, 'quantity': 1}
    ]
    
    test_plan = CutPlan(
        stock_id=1,
        stock_length=3000,
        cuts=test_cuts,
        waste=485,
        waste_percent=16.2
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    fill_optimization_results_table(table, [test_plan])
    
    print(f"   –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {table.rowCount()}")
    print(f"   –°—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ: {table.columnCount()}")
    
    if table.rowCount() > 0:
        for col in range(table.columnCount()):
            item = table.item(0, col)
            if item:
                print(f"   –°—Ç–æ–ª–±–µ—Ü {col}: {item.text()}")
    
    return "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"

def test_main_window_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
    from PyQt5.QtWidgets import QApplication
    from gui.main_window import LinearOptimizerWindow
    
    # –°–æ–∑–¥–∞–µ–º QApplication –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not QApplication.instance():
        app = QApplication([])
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    try:
        window = LinearOptimizerWindow()
        print(f"   –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {window.windowTitle()}")
        print(f"   –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {window.size()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if hasattr(window, 'optimizer'):
            print(f"   –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: {type(window.optimizer).__name__}")
        if hasattr(window, 'profiles'):
            print(f"   –ü—Ä–æ—Ñ–∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(window.profiles)}")
        if hasattr(window, 'stocks'):
            print(f"   –•–ª—ã—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(window.stocks)}")
        
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ–º
        return window
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞: {e}")
        raise

def test_optimization_thread():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    from PyQt5.QtWidgets import QApplication
    from gui.main_window import OptimizationThread
    from core.optimizer import LinearOptimizer, OptimizationSettings
    from core.models import Profile, Stock
    
    # –°–æ–∑–¥–∞–µ–º QApplication –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not QApplication.instance():
        app = QApplication([])
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    profiles = [
        Profile(id=1, order_id=1, element_name="–¢–µ—Å—Ç", profile_code="P001", length=1000, quantity=1)
    ]
    stocks = [
        Stock(id=1, profile_id=1, length=2000, quantity=1)
    ]
    
    optimizer = LinearOptimizer()
    settings = OptimizationSettings()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    thread = OptimizationThread(optimizer, profiles, stocks, settings)
    
    print(f"   –ü–æ—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω: {type(thread).__name__}")
    print(f"   –ü—Ä–æ—Ñ–∏–ª–∏ –≤ –ø–æ—Ç–æ–∫–µ: {len(thread.profiles)}")
    print(f"   –•–ª—ã—Å—Ç—ã –≤ –ø–æ—Ç–æ–∫–µ: {len(thread.stocks)}")
    
    return thread

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GUI"""
    print("üñ•Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GUI LINEAR OPTIMIZER")
    print("=" * 60)
    
    tests = [
        ("PyQt5 –∏–º–ø–æ—Ä—Ç—ã", test_pyqt5_imports),
        ("GUI –º–æ–¥—É–ª–∏", test_gui_imports),
        ("–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–∏–º–ø–æ—Ä—Ç)", test_main_window_import),
        ("–í–∏–¥–∂–µ—Ç—ã —Ç–∞–±–ª–∏—Ü", test_table_widgets),
        ("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", test_optimization_result_display),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞", test_main_window_creation),
        ("–ü–æ—Ç–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", test_optimization_thread),
    ]
    
    results = []
    failed_tests = []
    
    for test_name, test_func in tests:
        success, result = test_step(test_name, test_func)
        results.append((test_name, success, result))
        
        if not success:
            failed_tests.append(test_name)
            print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω!")
            break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ GUI
    
    print("\nüìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í GUI:")
    print("=" * 60)
    
    for test_name, success, _ in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} - {test_name}")
    
    if failed_tests:
        print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ GUI: {', '.join(failed_tests)}")
        print("–≠—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    else:
        print("\nüéâ –í–°–ï GUI –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
        print("GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    
    return len(failed_tests) == 0

if __name__ == "__main__":
    try:
        success = main()
        print(f"\n{'‚úÖ GUI –†–ê–ë–û–¢–ê–ï–¢' if success else '‚ùå –ü–†–û–ë–õ–ï–ú–´ –í GUI'}")
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í GUI –¢–ï–°–¢–ï: {e}")
        traceback.print_exc()
        sys.exit(1)