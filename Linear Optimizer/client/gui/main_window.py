"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Linear Optimizer
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Glass Optimizer
"""

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QListWidget, 
    QTableWidget, QTableWidgetItem, QCheckBox, QSpinBox, QGroupBox, 
    QPushButton, QFormLayout, QLineEdit, 
    QTabWidget, QComboBox, QDialog, QProgressBar, QMessageBox, QHeaderView,
    QSplitter, QFrame, QTextEdit, QSlider, QMainWindow, QMenuBar, QStatusBar,
    QAction, QApplication
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QThread
from PyQt5.QtGui import QFont, QIcon, QShowEvent
import sys
import threading
from datetime import datetime
import functools
import requests
import os
import json
import logging

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from core.api_client import get_api_client
from core.optimizer import LinearOptimizer, OptimizationSettings
from core.models import Profile, Stock, OptimizationResult, StockRemainder, StockMaterial
from .table_widgets import (
    _create_text_item, _create_numeric_item, setup_table_columns,
    fill_profiles_table, fill_stock_table, fill_optimization_results_table,
    fill_stock_remainders_table, fill_stock_materials_table,
    update_table_column_widths, clear_table, enable_table_sorting
)
from .dialogs import DebugDialog, ProgressDialog, OptimizationSettingsDialog, ApiSettingsDialog
from .config import MAIN_WINDOW_STYLE, TAB_STYLE, SPECIAL_BUTTON_STYLES, WIDGET_CONFIGS, COLORS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class LinearOptimizerWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Linear Optimizer"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è thread-safe –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    debug_step_signal = pyqtSignal(str)
    error_signal = pyqtSignal(str, str, str)  # title, message, icon
    success_signal = pyqtSignal()
    data_loaded_signal = pyqtSignal(list, dict)  # profiles, stock_data
    restore_button_signal = pyqtSignal()
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_result_signal = pyqtSignal(object)  # OptimizationResult
    optimization_error_signal = pyqtSignal(str)
    close_progress_signal = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.api_client = get_api_client()
        self.optimizer = LinearOptimizer()
        self.current_order_id = None
        self.profiles = []
        self.stocks = []  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.stock_remainders = []  # –û—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞
        self.stock_materials = []   # –¶–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ —Å–∫–ª–∞–¥–∞
        self.optimization_result = None
        self.current_settings = OptimizationSettings()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.debug_dialog = None
        self.progress_dialog = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.init_ui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.setWindowTitle("Linear Optimizer - –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞")
        self.setMinimumSize(1400, 900)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è thread-safe –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        self.debug_step_signal.connect(self._add_debug_step_safe)
        self.error_signal.connect(self._show_error_safe)
        self.success_signal.connect(self._show_success_safe)
        self.data_loaded_signal.connect(self._update_tables_safe)
        self.restore_button_signal.connect(self._restore_button_safe)
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimization_result_signal.connect(self._handle_optimization_result)
        self.optimization_error_signal.connect(self._handle_optimization_error)
        self.close_progress_signal.connect(self._close_progress_dialog)
        
        print("üîß DEBUG: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ Linear Optimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

    def showEvent(self, event):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ showEvent –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        super().showEvent(event)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ (–¥–ª—è Windows)
        try:
            import ctypes
            from ctypes import wintypes
            import platform
            
            # –ü–æ–ª—É—á–∞–µ–º handle –æ–∫–Ω–∞
            hwnd = int(self.winId())
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Windows –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            version = platform.version()
            version_parts = version.split('.')
            build_number = int(version_parts[2]) if len(version_parts) > 2 else 0
            
            # –î–ª—è Windows 10 1903+ (build 18362+) –∏ Windows 11
            if build_number >= 18362:
                # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É (Windows 11)
                DWMWA_USE_IMMERSIVE_DARK_MODE = 20
                value = ctypes.c_int(1)
                result = ctypes.windll.dwmapi.DwmSetWindowAttribute(
                    hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE, 
                    ctypes.byref(value), ctypes.sizeof(value)
                )
                
                # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
                if result != 0:
                    DWMWA_USE_IMMERSIVE_DARK_MODE = 19
                    result = ctypes.windll.dwmapi.DwmSetWindowAttribute(
                        hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE, 
                        ctypes.byref(value), ctypes.sizeof(value)
                    )
                
                if result == 0:
                    print(f"üîß DEBUG: –¢–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {DWMWA_USE_IMMERSIVE_DARK_MODE})")
                else:
                    print(f"üîß DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∫–æ–¥ –æ—à–∏–±–∫–∏: {result})")
            else:
                print("üîß DEBUG: –í–µ—Ä—Å–∏—è Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω")
                
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–µ Windows –∏–ª–∏ –æ—à–∏–±–∫–∞), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            print(f"üîß DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}")
            pass

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –∫–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        self.setStyleSheet(MAIN_WINDOW_STYLE)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        self.create_menu()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet(TAB_STYLE)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        self.create_order_data_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.create_results_tab()
        
        main_layout.addWidget(self.tabs)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        new_action = QAction("–ù–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", self)
        new_action.setShortcut("Ctrl+N")
        new_action.triggered.connect(self.new_optimization)
        file_menu.addAction(new_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_menu = menubar.addMenu("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        optimization_settings_action = QAction("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", self)
        optimization_settings_action.triggered.connect(self.show_optimization_settings)
        settings_menu.addAction(optimization_settings_action)
        
        api_settings_action = QAction("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", self)
        api_settings_action.triggered.connect(self.show_api_settings)
        settings_menu.addAction(api_settings_action)
        
        # –ú–µ–Ω—é –ü–æ–º–æ—â—å
        help_menu = menubar.addMenu("–ü–æ–º–æ—â—å")
        
        about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)



    def create_order_data_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        order_tab = QWidget()
        layout = QVBoxLayout(order_tab)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        top_group = self.create_order_info_group()
        layout.addWidget(top_group)
        
        # –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ—Ñ–∏–ª–∏ –∏ —Å–∫–ª–∞–¥—ã)
        middle_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞
        left_group = self.create_profiles_group()
        middle_splitter.addWidget(left_group)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å–∫–ª–∞–¥—ã (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ)
        right_group = self.create_stock_groups()
        middle_splitter.addWidget(right_group)
        
        middle_splitter.setSizes([500, 900])
        layout.addWidget(middle_splitter)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        params_group = self.create_optimization_params_group()
        layout.addWidget(params_group)
        
        self.tabs.addTab(order_tab, "üìä –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞")

    def create_order_info_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")
        layout = QVBoxLayout(group)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
        input_layout = QHBoxLayout()
        
        input_layout.addWidget(QLabel("ID –∑–∞–∫–∞–∑–∞:"))
        self.order_id_input = QLineEdit()
        self.order_id_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        self.order_id_input.setMaximumWidth(150)
        input_layout.addWidget(self.order_id_input)
        
        self.load_data_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.load_data_button.clicked.connect(self.on_load_data_clicked)
        input_layout.addWidget(self.load_data_button)
        
        input_layout.addStretch()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        self.order_info_label = QLabel("<–∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω>")
        self.order_info_label.setStyleSheet(WIDGET_CONFIGS["info_label"])
        input_layout.addWidget(self.order_info_label)
        
        layout.addLayout(input_layout)
        
        return group

    def create_profiles_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞"""
        group = QGroupBox("–ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ä–∞—Å–ø–∏–ª–∞")
        layout = QVBoxLayout(group)

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        self.profiles_table = QTableWidget()
        setup_table_columns(self.profiles_table, [
            '–≠–ª–µ–º–µ–Ω—Ç', '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ—Ñ–∏–ª—è', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        ])
        
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        enable_table_sorting(self.profiles_table, True)
        self.profiles_table.setMinimumHeight(300)
        layout.addWidget(self.profiles_table)
        
        return group

    def create_stock_groups(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø —Å–∫–ª–∞–¥–æ–≤ (–æ—Å—Ç–∞—Ç–∫–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_widget = QWidget()
        layout = QVBoxLayout(main_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü —Å–∫–ª–∞–¥–æ–≤
        splitter = QSplitter(Qt.Vertical)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
        remainders_group = QGroupBox("–°–∫–ª–∞–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        remainders_layout = QVBoxLayout(remainders_group)
        
        self.stock_remainders_table = QTableWidget()
        setup_table_columns(self.stock_remainders_table, [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–æ–∫'
        ])
        enable_table_sorting(self.stock_remainders_table, True)
        self.stock_remainders_table.setMinimumHeight(200)
        remainders_layout.addWidget(self.stock_remainders_table)
        
        # –ì—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
        materials_group = QGroupBox("–°–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        materials_layout = QVBoxLayout(materials_group)
        
        self.stock_materials_table = QTableWidget()
        setup_table_columns(self.stock_materials_table, [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–î–ª–∏–Ω–∞ (–º–º)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç'
        ])
        enable_table_sorting(self.stock_materials_table, True)
        self.stock_materials_table.setMinimumHeight(200)
        materials_layout.addWidget(self.stock_materials_table)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter.addWidget(remainders_group)
        splitter.addWidget(materials_group)
        splitter.setSizes([300, 300])
        
        layout.addWidget(splitter)
        
        return main_widget

    def create_optimization_params_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        layout = QFormLayout()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞
        self.min_remainder_length = QSpinBox()
        self.min_remainder_length.setRange(10, 10000)
        self.min_remainder_length.setValue(300)
        self.min_remainder_length.setSuffix(" –º–º")
        layout.addRow("–ú–∏–Ω. –¥–ª–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞:", self.min_remainder_length)
        
        # –¢–æ–ª—â–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–∞
        self.blade_width = QSpinBox()
        self.blade_width.setRange(1, 20)
        self.blade_width.setValue(3)
        self.blade_width.setSuffix(" –º–º")
        layout.addRow("–¢–æ–ª—â–∏–Ω–∞ –ø—Ä–æ–ø–∏–ª–∞:", self.blade_width)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤
        self.max_waste_percent = QSpinBox()
        self.max_waste_percent.setRange(1, 50)
        self.max_waste_percent.setValue(15)
        self.max_waste_percent.setSuffix(" %")
        self.max_waste_percent.setStyleSheet(WIDGET_CONFIGS["target_waste_percent"])
        layout.addRow("üéØ –ú–∞–∫—Å. % –æ—Ç—Ö–æ–¥–æ–≤:", self.max_waste_percent)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        self.use_remainders = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞")
        self.use_remainders.setChecked(True)
        layout.addRow(self.use_remainders)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞
        self.optimize_order = QCheckBox("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å–ø–∏–ª–∞")
        self.optimize_order.setChecked(True)
        layout.addRow(self.optimize_order)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        buttons_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–ª–µ–≤–∞)
        self.save_settings_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        self.save_settings_button.clicked.connect(self.on_save_settings_clicked)
        self.save_settings_button.setStyleSheet(SPECIAL_BUTTON_STYLES["save_settings"])
        buttons_layout.addWidget(self.save_settings_button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        buttons_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—Å–ø—Ä–∞–≤–∞)
        self.optimize_button = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        self.optimize_button.clicked.connect(self.on_optimize_clicked)
        self.optimize_button.setEnabled(False)
        self.optimize_button.setStyleSheet(SPECIAL_BUTTON_STYLES["optimize"])
        buttons_layout.addWidget(self.optimize_button)
        
        layout.addRow(buttons_layout)
        
        params_group.setLayout(layout)
        return params_group

    def create_results_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        results_tab = QWidget()
        layout = QVBoxLayout(results_tab)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–≤–µ—Ä—Ö—É
        stats_group = self.create_statistics_group()
        layout.addWidget(stats_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_group = QGroupBox("–ü–ª–∞–Ω —Ä–∞—Å–ø–∏–ª–∞")
        results_layout = QVBoxLayout(results_group)
        
        self.results_table = QTableWidget()
        setup_table_columns(self.results_table, [
            '–•–ª—ã—Å—Ç (ID)', '–î–ª–∏–Ω–∞ —Ö–ª—ã—Å—Ç–∞ (–º–º)', '–†–∞—Å–ø–∏–ª—ã', '–û—Ç—Ö–æ–¥ (–º–º)', '–û—Ç—Ö–æ–¥ (%)'
        ])
        
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        enable_table_sorting(self.results_table, True)
        self.results_table.setMinimumHeight(400)
        results_layout.addWidget(self.results_table)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        self.tabs.addTab(results_tab, "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

    def create_statistics_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        group = QGroupBox("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        layout = QVBoxLayout(group)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_layout = QHBoxLayout()
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        left_layout = QFormLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_style = WIDGET_CONFIGS["stats_labels"]["default"]
        
        self.stats_total_stocks = QLabel("0")
        self.stats_total_stocks.setStyleSheet(stats_style)
        left_layout.addRow("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ö–ª—ã—Å—Ç–æ–≤:", self.stats_total_stocks)
        
        self.stats_total_cuts = QLabel("0")
        self.stats_total_cuts.setStyleSheet(stats_style)
        left_layout.addRow("–í—Å–µ–≥–æ —Ä–∞—Å–ø–∏–ª–æ–≤:", self.stats_total_cuts)
        
        self.stats_total_length = QLabel("0 –º")
        self.stats_total_length.setStyleSheet(stats_style)
        left_layout.addRow("–û–±—â–∞—è –¥–ª–∏–Ω–∞:", self.stats_total_length)
        
        stats_layout.addLayout(left_layout)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        right_layout = QFormLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤ (–∫—Ä–∞—Å–Ω—ã–π)
        waste_style = WIDGET_CONFIGS["stats_labels"]["waste"]
        
        self.stats_waste_length = QLabel("0 –º")
        self.stats_waste_length.setStyleSheet(waste_style)
        right_layout.addRow("–û—Ç—Ö–æ–¥—ã:", self.stats_waste_length)
        
        self.stats_waste_percent = QLabel("0.00 %")
        self.stats_waste_percent.setStyleSheet(waste_style)
        right_layout.addRow("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤:", self.stats_waste_percent)
        
        self.stats_efficiency = QLabel("0.00 %")
        self.stats_efficiency.setStyleSheet(WIDGET_CONFIGS["stats_labels"]["remnants"])
        right_layout.addRow("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", self.stats_efficiency)
        
        stats_layout.addLayout(right_layout)
        layout.addLayout(stats_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Altawin
        upload_layout = QHBoxLayout()
        upload_layout.addStretch()
        
        self.upload_to_altawin_button = QPushButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Altawin")
        self.upload_to_altawin_button.setStyleSheet(SPECIAL_BUTTON_STYLES["upload"])
        self.upload_to_altawin_button.clicked.connect(self.on_save_results)
        self.upload_to_altawin_button.setEnabled(False)
        
        upload_layout.addWidget(self.upload_to_altawin_button)
        upload_layout.addStretch()
        
        layout.addLayout(upload_layout)
        
        return group

    # ========== –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ==========
    
    def on_load_data_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å API"""
        order_id = self.order_id_input.text().strip()
        if not order_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
            return
        
        try:
            order_id = int(order_id)
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "ID –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.load_data_button.setEnabled(False)
        self.load_data_button.setText("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏
        self.debug_dialog = DebugDialog(self)
        self.debug_dialog.show()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def load_data():
            try:
                self._add_debug_step(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}...")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
                self._add_debug_step("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
                profiles = self.api_client.get_profiles(order_id)
                self._add_debug_step(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
                
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
                profile_codes = list(set(profile.profile_code for profile in profiles))
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞
                self._add_debug_step("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞...")
                stock_remainders = self.api_client.get_stock_remainders(profile_codes)
                self._add_debug_step(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stock_remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ —Å–∫–ª–∞–¥–∞
                self._add_debug_step("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ —Å–∫–ª–∞–¥–∞...")
                stock_materials = self.api_client.get_stock_materials(profile_codes)
                self._add_debug_step(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stock_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UI
                self.data_loaded_signal.emit(profiles, {'remainders': stock_remainders, 'materials': stock_materials})
                self._add_debug_step("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                self.success_signal.emit()
                
            except Exception as e:
                self._add_debug_step(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                self.error_signal.emit("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", str(e), "critical")
            finally:
                self.restore_button_signal.emit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=load_data, daemon=True)
        thread.start()

    # ========== –ú–ï–¢–û–î–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ==========
    
    def on_optimize_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.profiles:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(False)
        self.optimize_button.setText("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_dialog = ProgressDialog(self)
        self.progress_dialog.show()
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.current_settings.min_remainder_length = self.min_remainder_length.value()
        self.current_settings.blade_width = self.blade_width.value()
        self.current_settings.max_waste_percent = self.max_waste_percent.value()
        self.current_settings.use_remainders = self.use_remainders.isChecked()
        self.current_settings.optimize_order = self.optimize_order.isChecked()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_optimization():
            try:
                def progress_callback(percent):
                    if self.progress_dialog:
                        self.progress_dialog.set_progress(percent)
                
                # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                result = self.optimizer.optimize(
                    profiles=self.profiles,
                    stocks=self.stocks,
                    settings=self.current_settings,
                    progress_fn=progress_callback
                )
                
                if result and result.success:
                    self.optimization_result = result
                    self.optimization_result_signal.emit(result)
                else:
                    error_msg = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    if result and hasattr(result, 'message'):
                        error_msg = result.message
                    self.optimization_error_signal.emit(error_msg)
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}"
                self.optimization_error_signal.emit(error_msg)
            finally:
                self.close_progress_signal.emit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_optimization, daemon=True)
        thread.start()

    def on_save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Altawin"""
        if not self.optimization_result:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        reply = QMessageBox.question(
            self, 
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 
            f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin?\n\n"
            f"–ó–∞–∫–∞–∑: {self.current_order_id}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–ª—ã—Å—Ç–æ–≤: {len(self.optimization_result.cut_plans)}\n"
            f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {100 - self.optimization_result.get_statistics()['waste_percent']:.1f}%",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                success = self.api_client.upload_optimization_result(
                    self.current_order_id,
                    self.optimization_result
                )
                
                if success:
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Altawin")
                    self.status_bar.showMessage("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def on_save_settings_clicked(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª
        settings = {
            'min_remainder_length': self.min_remainder_length.value(),
            'blade_width': self.blade_width.value(),
            'max_waste_percent': self.max_waste_percent.value(),
            'use_remainders': self.use_remainders.isChecked(),
            'optimize_order': self.optimize_order.isChecked()
        }
        
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
        QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    # ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ò–ì–ù–ê–õ–û–í ==========
    
    def _add_debug_step(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –æ—Ç–ª–∞–¥–∫–∏"""
        print(f"üîß DEBUG: {message}")
        self.debug_step_signal.emit(message)
    
    def _add_debug_step_safe(self, message):
        """Thread-safe –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –æ—Ç–ª–∞–¥–∫–∏"""
        if self.debug_dialog:
            self.debug_dialog.add_step(message)
    
    def _show_error_safe(self, title, message, icon):
        """Thread-safe –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        print(f"‚ùå {title}: {message}")
        QMessageBox.critical(self, title, message)
    
    def _show_success_safe(self):
        """Thread-safe –ø–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞"""
        if self.debug_dialog:
            QTimer.singleShot(2000, self.debug_dialog.close)
    
    def _update_tables_safe(self, profiles, stock_data):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.profiles = profiles
            self.stock_remainders = stock_data.get('remainders', [])
            self.stock_materials = stock_data.get('materials', [])
            self.current_order_id = int(self.order_id_input.text().strip()) if self.order_id_input.text().strip().isdigit() else None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            fill_profiles_table(self.profiles_table, [p.__dict__ for p in profiles])
            fill_stock_remainders_table(self.stock_remainders_table, [r.__dict__ for r in self.stock_remainders])
            fill_stock_materials_table(self.stock_materials_table, [m.__dict__ for m in self.stock_materials])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            total_stock_items = len(self.stock_remainders) + len(self.stock_materials)
            self.order_info_label.setText(
                f"–ó–∞–∫–∞–∑ {self.current_order_id}: {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π, "
                f"{len(self.stock_remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤, {len(self.stock_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
            )
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self.optimize_button.setEnabled(True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            QTimer.singleShot(500, lambda: [
                update_table_column_widths(self.profiles_table),
                update_table_column_widths(self.stock_remainders_table),
                update_table_column_widths(self.stock_materials_table)
            ])
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def _restore_button_safe(self):
        """Thread-safe –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
        self.load_data_button.setEnabled(True)
        self.load_data_button.setText("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    def _handle_optimization_result(self, result):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.optimization_result = result
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(True)
        self.optimize_button.setText("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_statistics(result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        fill_optimization_results_table(self.results_table, result.cut_plans)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin
        self.upload_to_altawin_button.setEnabled(True)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tabs.setCurrentIndex(1)
        
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ö–ª—ã—Å—Ç–æ–≤: {len(result.cut_plans)}")
    
    def _handle_optimization_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(True)
        self.optimize_button.setText("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {error_msg}")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n\n{error_msg}")
    
    def _close_progress_dialog(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.progress_dialog:
            self.progress_dialog.close()
            self.progress_dialog = None
    
    def _update_statistics(self, result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats = result.get_statistics()
        
        self.stats_total_stocks.setText(str(stats['total_stocks']))
        self.stats_total_cuts.setText(str(stats['total_cuts']))
        self.stats_total_length.setText(f"{stats['total_length'] / 1000:.1f} –º")
        self.stats_waste_length.setText(f"{stats['total_waste'] / 1000:.1f} –º")
        self.stats_waste_percent.setText(f"{stats['waste_percent']:.2f} %")
        self.stats_efficiency.setText(f"{100 - stats['waste_percent']:.2f} %")

    # ========== –ú–ï–¢–û–î–´ –ú–ï–ù–Æ ==========
    
    def new_optimization(self):
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        self.order_id_input.clear()
        clear_table(self.profiles_table)
        clear_table(self.stock_remainders_table)
        clear_table(self.stock_materials_table)
        clear_table(self.results_table)
        self.optimization_result = None
        self.upload_to_altawin_button.setEnabled(False)
        self.optimize_button.setEnabled(False)
        self.order_info_label.setText("<–∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω>")
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.tabs.setCurrentIndex(0)
    
    def show_optimization_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        current_settings = {
            'min_remainder_length': self.min_remainder_length.value(),
            'blade_width': self.blade_width.value(),
            'max_waste_percent': self.max_waste_percent.value(),
            'use_remainders': self.use_remainders.isChecked(),
            'optimize_order': self.optimize_order.isChecked()
        }
        
        dialog = OptimizationSettingsDialog(self, current_settings)
        if dialog.exec_() == QDialog.Accepted:
            settings = dialog.get_settings()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.min_remainder_length.setValue(settings['min_remainder_length'])
            self.blade_width.setValue(settings['blade_width'])
            self.max_waste_percent.setValue(settings['max_waste_percent'])
            self.use_remainders.setChecked(settings['use_remainders'])
            self.optimize_order.setChecked(settings['optimize_order'])
    
    def show_api_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"""
        dialog = ApiSettingsDialog(self, {})
        if dialog.exec_() == QDialog.Accepted:
            settings = dialog.get_settings()
            # TODO: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
            QMessageBox.information(self, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
            "Linear Optimizer v1.0\n\n"
            "–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ä–∞—Å–ø–∏–ª–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ Glass Optimizer\n\n"
            "¬© 2024 Your Company")

    def set_order_id(self, order_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∑–∞–∫–∞–∑–∞"""
        self.order_id_input.setText(str(order_id))
        self.on_load_data_clicked()

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        reply = QMessageBox.question(self, '–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã', 
                                   '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
                                   QMessageBox.Yes | QMessageBox.No, 
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()