#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints MOS —Ç–∞–±–ª–∏—Ü
"""

import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api"

def test_connection():
    """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
    try:
        response = requests.get(f"{API_BASE}/test-connection", timeout=10)
        print(f"üîß –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: HTTP {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {data}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

def test_create_optimized_mos():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ OPTIMIZED_MOS"""
    try:
        payload = {
            "grorder_mos_id": 999,  # –¢–µ—Å—Ç–æ–≤—ã–π ID
            "goodsid": 123,         # –¢–µ—Å—Ç–æ–≤—ã–π goodsid
            "qty": 1,
            "isbar": 0,
            "longprof": 6000.0,
            "cutwidth": 5,
            "border": 0,
            "minrest": 300,
            "mintrash": 50,
            "map": "1000.0;2000.0;3000.0",
            "ostat": 0.0,
            "sumprof": 6000.0,
            "restpercent": 0.0,
            "trashpercent": 0.0,
            "beginindent": 0,
            "endindent": 0,
            "sumtrash": 0.0,
        }
        
        print(f"üîß –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è OPTIMIZED_MOS: {json.dumps(payload, indent=2)}")
        
        response = requests.post(
            f"{API_BASE}/optimized-mos",
            json=payload,
            timeout=30
        )
        
        print(f"üîß –û—Ç–≤–µ—Ç: HTTP {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ OPTIMIZED_MOS —Å–æ–∑–¥–∞–Ω: {data}")
            return data.get('id')
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTIMIZED_MOS: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTIMIZED_MOS: {e}")
        return None

def test_create_optdetail_mos(optimized_mos_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ OPTDETAIL_MOS"""
    if not optimized_mos_id:
        print("‚ùå –ù–µ—Ç ID –¥–ª—è OPTIMIZED_MOS, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç OPTDETAIL_MOS")
        return None
        
    try:
        payload = {
            "optimized_mos_id": optimized_mos_id,
            "orderid": 456,  # –¢–µ—Å—Ç–æ–≤—ã–π orderid
            "qty": 1,
            "itemsdetailid": None,
            "itemlong": 1000.0,
            "ug1": None,
            "ug2": None,
            "num": 1,
            "subnum": 1,
            "long_al": 1005.0,
            "izdpart": None,
            "partside": None,
            "modelno": None,
            "modelheight": None,
            "modelwidth": None,
            "flugelopentype": None,
            "flugelcount": None,
            "ishandle": None,
            "handlepos": None,
            "handleposfalts": None,
            "flugelopentag": None
        }
        
        print(f"üîß –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: {json.dumps(payload, indent=2)}")
        
        response = requests.post(
            f"{API_BASE}/optdetail-mos",
            json=payload,
            timeout=30
        )
        
        print(f"üîß –û—Ç–≤–µ—Ç: HTTP {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ OPTDETAIL_MOS —Å–æ–∑–¥–∞–Ω: {data}")
            return data.get('id')
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è OPTDETAIL_MOS: {e}")
        return None

def test_delete_optimized_mos(grorders_mos_id):
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π MOS"""
    try:
        print(f"üîß –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOS –¥–ª—è grorders_mos_id={grorders_mos_id}")
        
        response = requests.delete(
            f"{API_BASE}/optimized-mos/by-grorders-mos-id/{grorders_mos_id}",
            timeout=30
        )
        
        print(f"üîß –û—Ç–≤–µ—Ç: HTTP {response.status_code}")
        if response.status_code in [200, 404]:
            data = response.json() if response.content else {}
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ MOS —É–¥–∞–ª–µ–Ω—ã: {data}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOS: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö MOS: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints MOS —Ç–∞–±–ª–∏—Ü")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
    if not test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ OPTIMIZED_MOS
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ OPTIMIZED_MOS")
    optimized_mos_id = test_create_optimized_mos()
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ OPTDETAIL_MOS
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ OPTDETAIL_MOS")
    optdetail_mos_id = test_create_optdetail_mos(optimized_mos_id)
    
    # –¢–µ—Å—Ç 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    test_delete_optimized_mos(999)
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    if optimized_mos_id and optdetail_mos_id:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    main()
